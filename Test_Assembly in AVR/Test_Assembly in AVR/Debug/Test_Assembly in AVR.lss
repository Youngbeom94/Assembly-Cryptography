
Test_Assembly in AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000278  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b93  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a26  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d10  00000000  00000000  00002911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00003624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e0  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a42  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00005a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	2c d0       	rcall	.+88     	; 0x10c <main>
  b4:	5e c0       	rjmp	.+188    	; 0x172 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <AddRoundKey_asm>:
 #include "AVR_macro.s"

 .global AddRoundKey_asm

 AddRoundKey_asm:
	push r2
  b8:	2f 92       	push	r2
	push r3
  ba:	3f 92       	push	r3
	push r17
  bc:	1f 93       	push	r17
	push r26
  be:	af 93       	push	r26
	push r27
  c0:	bf 93       	push	r27
	push r28
  c2:	cf 93       	push	r28
	push r29
  c4:	df 93       	push	r29
	push r30
  c6:	ef 93       	push	r30
	push r31
  c8:	ff 93       	push	r31
	/*
		state from r24 : r25  --> r26 : r27 ; X
		urkey from r22 : r23 -- > r28 : r29 ; Y 
	*/
	movw	r26,	r24 ;Y : state
  ca:	dc 01       	movw	r26, r24
	movw	r30,	r24 ;Z : state
  cc:	fc 01       	movw	r30, r24
	movw	r28,	r22 ;X : usrkey
  ce:	eb 01       	movw	r28, r22
	ldi		r17,	16	
  d0:	10 e1       	ldi	r17, 0x10	; 16

000000d2 <loop>:
	
loop:
	ld	r2,		Y+
  d2:	29 90       	ld	r2, Y+
	ld	r3,		X+
  d4:	3d 90       	ld	r3, X+
	eor	r2,		r3
  d6:	23 24       	eor	r2, r3
	st	Z+,		r2
  d8:	21 92       	st	Z+, r2
	dec	r17
  da:	1a 95       	dec	r17
	brne loop
  dc:	d1 f7       	brne	.-12     	; 0xd2 <loop>

	pop r31
  de:	ff 91       	pop	r31
	pop r30
  e0:	ef 91       	pop	r30
	pop r29
  e2:	df 91       	pop	r29
	pop r28
  e4:	cf 91       	pop	r28
	pop r27
  e6:	bf 91       	pop	r27
	pop r26
  e8:	af 91       	pop	r26
	pop r17
  ea:	1f 91       	pop	r17
	pop r3
  ec:	3f 90       	pop	r3
	pop r2
  ee:	2f 90       	pop	r2
	ret
  f0:	08 95       	ret

000000f2 <AddRoundKey>:
		}
	}
}

void AddRoundKey(u8 *state, u8* rdkey)
{
  f2:	db 01       	movw	r26, r22
  f4:	fc 01       	movw	r30, r24
  f6:	ac 01       	movw	r20, r24
  f8:	40 5f       	subi	r20, 0xF0	; 240
  fa:	5f 4f       	sbci	r21, 0xFF	; 255
	int cnt_i;
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
	{
		state[cnt_i] ^= rdkey[cnt_i];
  fc:	9d 91       	ld	r25, X+
  fe:	20 81       	ld	r18, Z
 100:	92 27       	eor	r25, r18
 102:	91 93       	st	Z+, r25
}

void AddRoundKey(u8 *state, u8* rdkey)
{
	int cnt_i;
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 104:	e4 17       	cp	r30, r20
 106:	f5 07       	cpc	r31, r21
 108:	c9 f7       	brne	.-14     	; 0xfc <AddRoundKey+0xa>
	{
		state[cnt_i] ^= rdkey[cnt_i];
	}
}
 10a:	08 95       	ret

0000010c <main>:

#include "header.h"


int main(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	a0 97       	sbiw	r28, 0x20	; 32
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
	
 	 u8 inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	de 01       	movw	r26, r28
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	01 90       	ld	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	8a 95       	dec	r24
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x1e>
 	 u8 userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	e0 e1       	ldi	r30, 0x10	; 16
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	de 01       	movw	r26, r28
 13a:	51 96       	adiw	r26, 0x11	; 17
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	8a 95       	dec	r24
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x30>
	
	//AES_encrypt(inp,out,userkey);
	//AES_encrypt_asm(inp,out,userkey);
	//AES_encrypt_asm_Progm(inp,out,userkey);
	
	AddRoundKey_asm(inp,userkey);
 144:	be 01       	movw	r22, r28
 146:	6f 5e       	subi	r22, 0xEF	; 239
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	b4 df       	rcall	.-152    	; 0xb8 <AddRoundKey_asm>
	AddRoundKey(inp,userkey);
 150:	be 01       	movw	r22, r28
 152:	6f 5e       	subi	r22, 0xEF	; 239
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	cb df       	rcall	.-106    	; 0xf2 <AddRoundKey>




	
}
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	a0 96       	adiw	r28, 0x20	; 32
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
