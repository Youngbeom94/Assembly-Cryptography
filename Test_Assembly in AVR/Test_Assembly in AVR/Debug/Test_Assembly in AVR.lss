
Test_Assembly in AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001008  00001108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001008  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eeprom       00001000  00810000  00810000  00001118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00002188  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e53  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4a  00000000  00000000  0000411b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001028  00000000  00000000  00004b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00005b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  00005fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d29  00000000  00000000  000065d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000082f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ff c1       	rjmp	.+1022   	; 0x400 <__ctors_end>
       2:	00 00       	nop
       4:	12 c2       	rjmp	.+1060   	; 0x42a <__bad_interrupt>
       6:	00 00       	nop
       8:	10 c2       	rjmp	.+1056   	; 0x42a <__bad_interrupt>
       a:	00 00       	nop
       c:	0e c2       	rjmp	.+1052   	; 0x42a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c2       	rjmp	.+1048   	; 0x42a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c2       	rjmp	.+1044   	; 0x42a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c2       	rjmp	.+1040   	; 0x42a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c2       	rjmp	.+1036   	; 0x42a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c2       	rjmp	.+1032   	; 0x42a <__bad_interrupt>
      22:	00 00       	nop
      24:	02 c2       	rjmp	.+1028   	; 0x42a <__bad_interrupt>
      26:	00 00       	nop
      28:	00 c2       	rjmp	.+1024   	; 0x42a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c1       	rjmp	.+1020   	; 0x42a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c1       	rjmp	.+1016   	; 0x42a <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c1       	rjmp	.+1012   	; 0x42a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c1       	rjmp	.+1008   	; 0x42a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c1       	rjmp	.+1004   	; 0x42a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c1       	rjmp	.+1000   	; 0x42a <__bad_interrupt>
      42:	00 00       	nop
      44:	f2 c1       	rjmp	.+996    	; 0x42a <__bad_interrupt>
      46:	00 00       	nop
      48:	f0 c1       	rjmp	.+992    	; 0x42a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c1       	rjmp	.+988    	; 0x42a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c1       	rjmp	.+984    	; 0x42a <__bad_interrupt>
      52:	00 00       	nop
      54:	ea c1       	rjmp	.+980    	; 0x42a <__bad_interrupt>
      56:	00 00       	nop
      58:	e8 c1       	rjmp	.+976    	; 0x42a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c1       	rjmp	.+972    	; 0x42a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c1       	rjmp	.+968    	; 0x42a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c1       	rjmp	.+964    	; 0x42a <__bad_interrupt>
      66:	00 00       	nop
      68:	e0 c1       	rjmp	.+960    	; 0x42a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	de c1       	rjmp	.+956    	; 0x42a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c1       	rjmp	.+952    	; 0x42a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c1       	rjmp	.+948    	; 0x42a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c1       	rjmp	.+944    	; 0x42a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c1       	rjmp	.+940    	; 0x42a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c1       	rjmp	.+936    	; 0x42a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c1       	rjmp	.+932    	; 0x42a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c1       	rjmp	.+928    	; 0x42a <__bad_interrupt>
	...

0000008c <__trampolines_end>:
	...

00000100 <sbox2>:
     100:	00 02 04 06 08 0a 0c 0e 10 12 14 16 18 1a 1c 1e     ................
     110:	20 22 24 26 28 2a 2c 2e 30 32 34 36 38 3a 3c 3e      "$&(*,.02468:<>
     120:	40 42 44 46 48 4a 4c 4e 50 52 54 56 58 5a 5c 5e     @BDFHJLNPRTVXZ\^
     130:	60 62 64 66 68 6a 6c 6e 70 72 74 76 78 7a 7c 7e     `bdfhjlnprtvxz|~
     140:	80 82 84 86 88 8a 8c 8e 90 92 94 96 98 9a 9c 9e     ................
     150:	a0 a2 a4 a6 a8 aa ac ae b0 b2 b4 b6 b8 ba bc be     ................
     160:	c0 c2 c4 c6 c8 ca cc ce d0 d2 d4 d6 d8 da dc de     ................
     170:	e0 e2 e4 e6 e8 ea ec ee f0 f2 f4 f6 f8 fa fc fe     ................
     180:	1b 19 1f 1d 13 11 17 15 0b 09 0f 0d 03 01 07 05     ................
     190:	3b 39 3f 3d 33 31 37 35 2b 29 2f 2d 23 21 27 25     ;9?=3175+)/-#!'%
     1a0:	5b 59 5f 5d 53 51 57 55 4b 49 4f 4d 43 41 47 45     [Y_]SQWUKIOMCAGE
     1b0:	7b 79 7f 7d 73 71 77 75 6b 69 6f 6d 63 61 67 65     {y.}sqwukiomcage
     1c0:	9b 99 9f 9d 93 91 97 95 8b 89 8f 8d 83 81 87 85     ................
     1d0:	bb b9 bf bd b3 b1 b7 b5 ab a9 af ad a3 a1 a7 a5     ................
     1e0:	db d9 df dd d3 d1 d7 d5 cb c9 cf cd c3 c1 c7 c5     ................
     1f0:	fb f9 ff fd f3 f1 f7 f5 eb e9 ef ed e3 e1 e7 e5     ................

00000200 <sbox>:
     200:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     210:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     220:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     230:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     240:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     250:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     260:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     270:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     280:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     290:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     2a0:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     2b0:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     2c0:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     2d0:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     2e0:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     2f0:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000300 <Rcon>:
     300:	01 02 04 08 10 20 40 80 1b 36 6c d8 ab 00 00 00     ..... @..6l.....
	...

00000400 <__ctors_end>:
     400:	11 24       	eor	r1, r1
     402:	1f be       	out	0x3f, r1	; 63
     404:	cf ef       	ldi	r28, 0xFF	; 255
     406:	d0 e1       	ldi	r29, 0x10	; 16
     408:	de bf       	out	0x3e, r29	; 62
     40a:	cd bf       	out	0x3d, r28	; 61

0000040c <__do_copy_data>:
     40c:	11 e0       	ldi	r17, 0x01	; 1
     40e:	a0 e0       	ldi	r26, 0x00	; 0
     410:	b1 e0       	ldi	r27, 0x01	; 1
     412:	e8 e0       	ldi	r30, 0x08	; 8
     414:	f0 e1       	ldi	r31, 0x10	; 16
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	0b bf       	out	0x3b, r16	; 59
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__do_copy_data+0x14>
     41c:	07 90       	elpm	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	a0 31       	cpi	r26, 0x10	; 16
     422:	b1 07       	cpc	r27, r17
     424:	d9 f7       	brne	.-10     	; 0x41c <__do_copy_data+0x10>
     426:	79 d5       	rcall	.+2802   	; 0xf1a <main>
     428:	ed c5       	rjmp	.+3034   	; 0x1004 <_exit>

0000042a <__bad_interrupt>:
     42a:	ea cd       	rjmp	.-1068   	; 0x0 <__vectors>

0000042c <MixColumns_asm_Progm>:
 #include "AVR_macro.s"

 .global MixColumns_asm_Progm
MixColumns_asm_Progm:

	regBackupAdd
     42c:	0f 92       	push	r0
     42e:	3f 92       	push	r3
     430:	4f 92       	push	r4
     432:	5f 92       	push	r5
     434:	6f 92       	push	r6
     436:	7f 92       	push	r7
     438:	8f 92       	push	r8
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	movw r26,	r24 ; X
     446:	dc 01       	movw	r26, r24
	movw r28,	r24 ; Y
     448:	ec 01       	movw	r28, r24
	ldi	 r16,	4
     44a:	04 e0       	ldi	r16, 0x04	; 4
	ldi  r17,	0x1b
     44c:	1b e1       	ldi	r17, 0x1B	; 27

	ldi	r30,	lo8(sbox2);!!!!!!!!!!!!!!!!
     44e:	e0 e0       	ldi	r30, 0x00	; 0
	ldi	r31,	hi8(sbox2);!!!!!!!!!!!!!!!!
     450:	f1 e0       	ldi	r31, 0x01	; 1

00000452 <loop>:

loop:
	;2 3 1 1 
	ld r2,		Y+	;3
     452:	29 90       	ld	r2, Y+
	ld r4,		Y+	;1
     454:	49 90       	ld	r4, Y+
	ld r5,		Y+	;1
     456:	59 90       	ld	r5, Y+
	ld r6,		Y+	;2
     458:	69 90       	ld	r6, Y+

	mov r0,		r2
     45a:	02 2c       	mov	r0, r2
	eor r0,		r4
     45c:	04 24       	eor	r0, r4
	mov r30,	r0
     45e:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     460:	04 90       	lpm	r0, Z
	eor	r0,		r4
     462:	04 24       	eor	r0, r4
	eor	r0,		r5
     464:	05 24       	eor	r0, r5
	eor r0,		r6
     466:	06 24       	eor	r0, r6
	st X+,		r0 ; -------------------[0]
     468:	0d 92       	st	X+, r0

	; 1 2 3 1 
	mov r0,		r4
     46a:	04 2c       	mov	r0, r4
	eor r0,		r5
     46c:	05 24       	eor	r0, r5
	mov r30,	r0
     46e:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     470:	04 90       	lpm	r0, Z
	eor	r0,		r2
     472:	02 24       	eor	r0, r2
	eor	r0,		r5
     474:	05 24       	eor	r0, r5
	eor r0,		r6
     476:	06 24       	eor	r0, r6
	st X+,		r0  ; -------------------[1]
     478:	0d 92       	st	X+, r0


	; 1 1 2 3 
	mov r0,		r5
     47a:	05 2c       	mov	r0, r5
	eor r0,		r6
     47c:	06 24       	eor	r0, r6
	mov r30,	r0
     47e:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     480:	04 90       	lpm	r0, Z
	eor	r0,		r2
     482:	02 24       	eor	r0, r2
	eor	r0,		r4
     484:	04 24       	eor	r0, r4
	eor r0,		r6
     486:	06 24       	eor	r0, r6
	st X+,		r0  ; -------------------[2]
     488:	0d 92       	st	X+, r0

	; 3 1 1 2 
	mov r0,		r6
     48a:	06 2c       	mov	r0, r6
	eor r0,		r2
     48c:	02 24       	eor	r0, r2
	mov r30,	r0
     48e:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     490:	04 90       	lpm	r0, Z
	eor	r0,		r2
     492:	02 24       	eor	r0, r2
	eor	r0,		r4
     494:	04 24       	eor	r0, r4
	eor r0,		r5
     496:	05 24       	eor	r0, r5
	st X+,		r0 ; -------------------[3]
     498:	0d 92       	st	X+, r0
	dec		r16
     49a:	0a 95       	dec	r16
	brne loop
     49c:	d1 f6       	brne	.-76     	; 0x452 <loop>

	regRetriveveAdd
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	8f 90       	pop	r8
     4ac:	7f 90       	pop	r7
     4ae:	6f 90       	pop	r6
     4b0:	5f 90       	pop	r5
     4b2:	4f 90       	pop	r4
     4b4:	3f 90       	pop	r3
     4b6:	0f 90       	pop	r0

	ret
     4b8:	08 95       	ret

000004ba <Subbyte_ShiftRows_asm>:

 .global Subbyte_ShiftRows_asm

 Subbyte_ShiftRows_asm:

	regBackupAdd2
     4ba:	0f 92       	push	r0
     4bc:	1f 92       	push	r1
     4be:	2f 92       	push	r2
     4c0:	3f 92       	push	r3
     4c2:	4f 92       	push	r4
     4c4:	5f 92       	push	r5
     4c6:	6f 92       	push	r6
     4c8:	7f 92       	push	r7
     4ca:	8f 92       	push	r8
     4cc:	9f 92       	push	r9
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	ef 93       	push	r30
     4e4:	ff 93       	push	r31
	movw	r28,	r24 ;Y : state
     4e6:	ec 01       	movw	r28, r24
	movw	r26,	r24 ;X : state
     4e8:	dc 01       	movw	r26, r24
	ldi	r30,	lo8(sbox)
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
	ldi	r31,	hi8(sbox)
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
	
	.irp i,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
		ld r30,		Y+
		lpm	r\i,	Z
	.endr
     4ee:	e9 91       	ld	r30, Y+
     4f0:	04 90       	lpm	r0, Z
     4f2:	e9 91       	ld	r30, Y+
     4f4:	14 90       	lpm	r1, Z
     4f6:	e9 91       	ld	r30, Y+
     4f8:	24 90       	lpm	r2, Z
     4fa:	e9 91       	ld	r30, Y+
     4fc:	34 90       	lpm	r3, Z
     4fe:	e9 91       	ld	r30, Y+
     500:	44 90       	lpm	r4, Z
     502:	e9 91       	ld	r30, Y+
     504:	54 90       	lpm	r5, Z
     506:	e9 91       	ld	r30, Y+
     508:	64 90       	lpm	r6, Z
     50a:	e9 91       	ld	r30, Y+
     50c:	74 90       	lpm	r7, Z
     50e:	e9 91       	ld	r30, Y+
     510:	84 90       	lpm	r8, Z
     512:	e9 91       	ld	r30, Y+
     514:	94 90       	lpm	r9, Z
     516:	e9 91       	ld	r30, Y+
     518:	a4 90       	lpm	r10, Z
     51a:	e9 91       	ld	r30, Y+
     51c:	b4 90       	lpm	r11, Z
     51e:	e9 91       	ld	r30, Y+
     520:	c4 90       	lpm	r12, Z
     522:	e9 91       	ld	r30, Y+
     524:	d4 90       	lpm	r13, Z
     526:	e9 91       	ld	r30, Y+
     528:	e4 90       	lpm	r14, Z
     52a:	e9 91       	ld	r30, Y+
     52c:	f4 90       	lpm	r15, Z

	.irp i,0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11
		st X+,	r\i
	.endr
     52e:	0d 92       	st	X+, r0
     530:	5d 92       	st	X+, r5
     532:	ad 92       	st	X+, r10
     534:	fd 92       	st	X+, r15
     536:	4d 92       	st	X+, r4
     538:	9d 92       	st	X+, r9
     53a:	ed 92       	st	X+, r14
     53c:	3d 92       	st	X+, r3
     53e:	8d 92       	st	X+, r8
     540:	dd 92       	st	X+, r13
     542:	2d 92       	st	X+, r2
     544:	7d 92       	st	X+, r7
     546:	cd 92       	st	X+, r12
     548:	1d 92       	st	X+, r1
     54a:	6d 92       	st	X+, r6
     54c:	bd 92       	st	X+, r11


	regRetriveveAdd2
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	7f 90       	pop	r7
     56c:	6f 90       	pop	r6
     56e:	5f 90       	pop	r5
     570:	4f 90       	pop	r4
     572:	3f 90       	pop	r3
     574:	2f 90       	pop	r2
     576:	1f 90       	pop	r1
     578:	0f 90       	pop	r0
	ret
     57a:	08 95       	ret

0000057c <SubByte>:

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
	}
}
     57c:	dc 01       	movw	r26, r24
     57e:	40 96       	adiw	r24, 0x10	; 16
     580:	ec 91       	ld	r30, X
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	e0 50       	subi	r30, 0x00	; 0
     586:	fe 4f       	sbci	r31, 0xFE	; 254
     588:	e4 91       	lpm	r30, Z
     58a:	ed 93       	st	X+, r30
     58c:	a8 17       	cp	r26, r24
     58e:	b9 07       	cpc	r27, r25
     590:	b9 f7       	brne	.-18     	; 0x580 <SubByte+0x4>
     592:	08 95       	ret

00000594 <ShiftRow>:
     594:	fc 01       	movw	r30, r24
     596:	85 85       	ldd	r24, Z+13	; 0x0d
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	95 87       	std	Z+13, r25	; 0x0d
     59c:	95 81       	ldd	r25, Z+5	; 0x05
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	91 85       	ldd	r25, Z+9	; 0x09
     5a2:	95 83       	std	Z+5, r25	; 0x05
     5a4:	81 87       	std	Z+9, r24	; 0x09
     5a6:	92 85       	ldd	r25, Z+10	; 0x0a
     5a8:	86 85       	ldd	r24, Z+14	; 0x0e
     5aa:	22 81       	ldd	r18, Z+2	; 0x02
     5ac:	22 87       	std	Z+10, r18	; 0x0a
     5ae:	26 81       	ldd	r18, Z+6	; 0x06
     5b0:	26 87       	std	Z+14, r18	; 0x0e
     5b2:	92 83       	std	Z+2, r25	; 0x02
     5b4:	86 83       	std	Z+6, r24	; 0x06
     5b6:	87 81       	ldd	r24, Z+7	; 0x07
     5b8:	93 81       	ldd	r25, Z+3	; 0x03
     5ba:	97 83       	std	Z+7, r25	; 0x07
     5bc:	97 85       	ldd	r25, Z+15	; 0x0f
     5be:	93 83       	std	Z+3, r25	; 0x03
     5c0:	93 85       	ldd	r25, Z+11	; 0x0b
     5c2:	97 87       	std	Z+15, r25	; 0x0f
     5c4:	83 87       	std	Z+11, r24	; 0x0b
     5c6:	08 95       	ret

000005c8 <AddRoundKey>:
     5c8:	db 01       	movw	r26, r22
     5ca:	fc 01       	movw	r30, r24
     5cc:	ac 01       	movw	r20, r24
     5ce:	40 5f       	subi	r20, 0xF0	; 240
     5d0:	5f 4f       	sbci	r21, 0xFF	; 255
     5d2:	9d 91       	ld	r25, X+
     5d4:	20 81       	ld	r18, Z
     5d6:	92 27       	eor	r25, r18
     5d8:	91 93       	st	Z+, r25
     5da:	e4 17       	cp	r30, r20
     5dc:	f5 07       	cpc	r31, r21
     5de:	c9 f7       	brne	.-14     	; 0x5d2 <AddRoundKey+0xa>
     5e0:	08 95       	ret

000005e2 <keyScheduling>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	64 97       	sbiw	r28, 0x14	; 20
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	dc 01       	movw	r26, r24
     5f8:	19 82       	std	Y+1, r1	; 0x01
     5fa:	9e 01       	movw	r18, r28
     5fc:	2e 5f       	subi	r18, 0xFE	; 254
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	f9 01       	movw	r30, r18
     604:	11 92       	st	Z+, r1
     606:	8a 95       	dec	r24
     608:	e9 f7       	brne	.-6      	; 0x604 <keyScheduling+0x22>
     60a:	1c 96       	adiw	r26, 0x0c	; 12
     60c:	3c 91       	ld	r19, X
     60e:	1c 97       	sbiw	r26, 0x0c	; 12
     610:	39 83       	std	Y+1, r19	; 0x01
     612:	1d 96       	adiw	r26, 0x0d	; 13
     614:	2c 91       	ld	r18, X
     616:	1d 97       	sbiw	r26, 0x0d	; 13
     618:	2a 8b       	std	Y+18, r18	; 0x12
     61a:	1e 96       	adiw	r26, 0x0e	; 14
     61c:	9c 91       	ld	r25, X
     61e:	1e 97       	sbiw	r26, 0x0e	; 14
     620:	9b 8b       	std	Y+19, r25	; 0x13
     622:	1f 96       	adiw	r26, 0x0f	; 15
     624:	8c 91       	ld	r24, X
     626:	1f 97       	sbiw	r26, 0x0f	; 15
     628:	8c 8b       	std	Y+20, r24	; 0x14
     62a:	ea 89       	ldd	r30, Y+18	; 0x12
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	e0 50       	subi	r30, 0x00	; 0
     630:	fe 4f       	sbci	r31, 0xFE	; 254
     632:	e4 91       	lpm	r30, Z
     634:	ee 87       	std	Y+14, r30	; 0x0e
     636:	eb 89       	ldd	r30, Y+19	; 0x13
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	e0 50       	subi	r30, 0x00	; 0
     63c:	fe 4f       	sbci	r31, 0xFE	; 254
     63e:	e4 91       	lpm	r30, Z
     640:	ef 87       	std	Y+15, r30	; 0x0f
     642:	ec 89       	ldd	r30, Y+20	; 0x14
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	e0 50       	subi	r30, 0x00	; 0
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	e4 91       	lpm	r30, Z
     64c:	e8 8b       	std	Y+16, r30	; 0x10
     64e:	e9 81       	ldd	r30, Y+1	; 0x01
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	e0 50       	subi	r30, 0x00	; 0
     654:	fe 4f       	sbci	r31, 0xFE	; 254
     656:	e4 91       	lpm	r30, Z
     658:	e9 8b       	std	Y+17, r30	; 0x11
     65a:	fb 01       	movw	r30, r22
     65c:	40 81       	ld	r20, Z
     65e:	4a 8b       	std	Y+18, r20	; 0x12
     660:	ea 89       	ldd	r30, Y+18	; 0x12
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	e0 50       	subi	r30, 0x00	; 0
     666:	fd 4f       	sbci	r31, 0xFD	; 253
     668:	e4 91       	lpm	r30, Z
     66a:	e9 83       	std	Y+1, r30	; 0x01
     66c:	ee 85       	ldd	r30, Y+14	; 0x0e
     66e:	59 81       	ldd	r21, Y+1	; 0x01
     670:	5e 27       	eor	r21, r30
     672:	ec 91       	ld	r30, X
     674:	5e 27       	eor	r21, r30
     676:	5a 83       	std	Y+2, r21	; 0x02
     678:	ef 85       	ldd	r30, Y+15	; 0x0f
     67a:	11 96       	adiw	r26, 0x01	; 1
     67c:	5c 91       	ld	r21, X
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	5e 27       	eor	r21, r30
     682:	5b 83       	std	Y+3, r21	; 0x03
     684:	e8 89       	ldd	r30, Y+16	; 0x10
     686:	12 96       	adiw	r26, 0x02	; 2
     688:	5c 91       	ld	r21, X
     68a:	12 97       	sbiw	r26, 0x02	; 2
     68c:	5e 27       	eor	r21, r30
     68e:	5c 83       	std	Y+4, r21	; 0x04
     690:	e9 89       	ldd	r30, Y+17	; 0x11
     692:	13 96       	adiw	r26, 0x03	; 3
     694:	5c 91       	ld	r21, X
     696:	13 97       	sbiw	r26, 0x03	; 3
     698:	5e 27       	eor	r21, r30
     69a:	5d 83       	std	Y+5, r21	; 0x05
     69c:	ea 81       	ldd	r30, Y+2	; 0x02
     69e:	14 96       	adiw	r26, 0x04	; 4
     6a0:	5c 91       	ld	r21, X
     6a2:	14 97       	sbiw	r26, 0x04	; 4
     6a4:	5e 27       	eor	r21, r30
     6a6:	5e 83       	std	Y+6, r21	; 0x06
     6a8:	eb 81       	ldd	r30, Y+3	; 0x03
     6aa:	15 96       	adiw	r26, 0x05	; 5
     6ac:	5c 91       	ld	r21, X
     6ae:	15 97       	sbiw	r26, 0x05	; 5
     6b0:	5e 27       	eor	r21, r30
     6b2:	5f 83       	std	Y+7, r21	; 0x07
     6b4:	ec 81       	ldd	r30, Y+4	; 0x04
     6b6:	16 96       	adiw	r26, 0x06	; 6
     6b8:	5c 91       	ld	r21, X
     6ba:	16 97       	sbiw	r26, 0x06	; 6
     6bc:	5e 27       	eor	r21, r30
     6be:	58 87       	std	Y+8, r21	; 0x08
     6c0:	ed 81       	ldd	r30, Y+5	; 0x05
     6c2:	17 96       	adiw	r26, 0x07	; 7
     6c4:	5c 91       	ld	r21, X
     6c6:	17 97       	sbiw	r26, 0x07	; 7
     6c8:	5e 27       	eor	r21, r30
     6ca:	59 87       	std	Y+9, r21	; 0x09
     6cc:	ee 81       	ldd	r30, Y+6	; 0x06
     6ce:	18 96       	adiw	r26, 0x08	; 8
     6d0:	5c 91       	ld	r21, X
     6d2:	18 97       	sbiw	r26, 0x08	; 8
     6d4:	5e 27       	eor	r21, r30
     6d6:	5a 87       	std	Y+10, r21	; 0x0a
     6d8:	ef 81       	ldd	r30, Y+7	; 0x07
     6da:	19 96       	adiw	r26, 0x09	; 9
     6dc:	5c 91       	ld	r21, X
     6de:	19 97       	sbiw	r26, 0x09	; 9
     6e0:	5e 27       	eor	r21, r30
     6e2:	5b 87       	std	Y+11, r21	; 0x0b
     6e4:	e8 85       	ldd	r30, Y+8	; 0x08
     6e6:	1a 96       	adiw	r26, 0x0a	; 10
     6e8:	5c 91       	ld	r21, X
     6ea:	1a 97       	sbiw	r26, 0x0a	; 10
     6ec:	5e 27       	eor	r21, r30
     6ee:	5c 87       	std	Y+12, r21	; 0x0c
     6f0:	e9 85       	ldd	r30, Y+9	; 0x09
     6f2:	1b 96       	adiw	r26, 0x0b	; 11
     6f4:	5c 91       	ld	r21, X
     6f6:	1b 97       	sbiw	r26, 0x0b	; 11
     6f8:	5e 27       	eor	r21, r30
     6fa:	5d 87       	std	Y+13, r21	; 0x0d
     6fc:	5a 85       	ldd	r21, Y+10	; 0x0a
     6fe:	35 27       	eor	r19, r21
     700:	3e 87       	std	Y+14, r19	; 0x0e
     702:	3b 85       	ldd	r19, Y+11	; 0x0b
     704:	23 27       	eor	r18, r19
     706:	2f 87       	std	Y+15, r18	; 0x0f
     708:	2c 85       	ldd	r18, Y+12	; 0x0c
     70a:	92 27       	eor	r25, r18
     70c:	98 8b       	std	Y+16, r25	; 0x10
     70e:	9d 85       	ldd	r25, Y+13	; 0x0d
     710:	89 27       	eor	r24, r25
     712:	89 8b       	std	Y+17, r24	; 0x11
     714:	4f 5f       	subi	r20, 0xFF	; 255
     716:	fb 01       	movw	r30, r22
     718:	40 83       	st	Z, r20
     71a:	19 82       	std	Y+1, r1	; 0x01
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	80 31       	cpi	r24, 0x10	; 16
     720:	98 f4       	brcc	.+38     	; 0x748 <keyScheduling+0x166>
     722:	99 81       	ldd	r25, Y+1	; 0x01
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	e2 e0       	ldi	r30, 0x02	; 2
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	ec 0f       	add	r30, r28
     72c:	fd 1f       	adc	r31, r29
     72e:	e8 0f       	add	r30, r24
     730:	f1 1d       	adc	r31, r1
     732:	80 81       	ld	r24, Z
     734:	fd 01       	movw	r30, r26
     736:	e9 0f       	add	r30, r25
     738:	f1 1d       	adc	r31, r1
     73a:	80 83       	st	Z, r24
     73c:	99 81       	ldd	r25, Y+1	; 0x01
     73e:	9f 5f       	subi	r25, 0xFF	; 255
     740:	99 83       	std	Y+1, r25	; 0x01
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	80 31       	cpi	r24, 0x10	; 16
     746:	68 f3       	brcs	.-38     	; 0x722 <keyScheduling+0x140>
     748:	64 96       	adiw	r28, 0x14	; 20
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <reset_count>:

void reset_count(u8* count)
{
     75a:	fc 01       	movw	r30, r24
     75c:	40 96       	adiw	r24, 0x10	; 16
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
	{
		count[cnt_i] = 0x00;
     75e:	11 92       	st	Z+, r1
}

void reset_count(u8* count)
{
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     760:	e8 17       	cp	r30, r24
     762:	f9 07       	cpc	r31, r25
     764:	e1 f7       	brne	.-8      	; 0x75e <reset_count+0x4>
	{
		count[cnt_i] = 0x00;
	}
}
     766:	08 95       	ret

00000768 <state_copy>:

void state_copy(u8* dst, u8* src)
{
     768:	fb 01       	movw	r30, r22
     76a:	dc 01       	movw	r26, r24
     76c:	9b 01       	movw	r18, r22
     76e:	20 5f       	subi	r18, 0xF0	; 240
     770:	3f 4f       	sbci	r19, 0xFF	; 255
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
	{
		dst[cnt_i] = src[cnt_i];
     772:	81 91       	ld	r24, Z+
     774:	8d 93       	st	X+, r24
}

void state_copy(u8* dst, u8* src)
{
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     776:	e2 17       	cp	r30, r18
     778:	f3 07       	cpc	r31, r19
     77a:	d9 f7       	brne	.-10     	; 0x772 <state_copy+0xa>
	{
		dst[cnt_i] = src[cnt_i];
	}
}
     77c:	08 95       	ret

0000077e <Count_Add_for_LUT>:
void Count_Add_for_LUT(u8* count, u8* cnt_k)
{
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	29 97       	sbiw	r28, 0x09	; 9
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	ac 01       	movw	r20, r24
	
	u8 carry = 0;           //맨처음 Carry 값은 0
	u8 out[4] = { 0x00 }; // 최종배열
     7a0:	19 82       	std	Y+1, r1	; 0x01
     7a2:	1a 82       	std	Y+2, r1	; 0x02
     7a4:	1b 82       	std	Y+3, r1	; 0x03
     7a6:	1c 82       	std	Y+4, r1	; 0x04
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
     7a8:	1d 82       	std	Y+5, r1	; 0x05
     7aa:	1e 82       	std	Y+6, r1	; 0x06
     7ac:	1f 82       	std	Y+7, r1	; 0x07
     7ae:	18 86       	std	Y+8, r1	; 0x08

	if (*cnt_k == 0)
     7b0:	db 01       	movw	r26, r22
     7b2:	3c 91       	ld	r19, X
     7b4:	31 11       	cpse	r19, r1
     7b6:	20 c0       	rjmp	.+64     	; 0x7f8 <Count_Add_for_LUT+0x7a>
	{
		one[3] = 0x01;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	88 87       	std	Y+8, r24	; 0x08
     7bc:	ba 01       	movw	r22, r20
     7be:	6c 5f       	subi	r22, 0xFC	; 252
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	8e 01       	movw	r16, r28
     7c4:	0b 5f       	subi	r16, 0xFB	; 251
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	fe 01       	movw	r30, r28
     7ca:	39 96       	adiw	r30, 0x09	; 9
     7cc:	68 01       	movw	r12, r16
	}
}
void Count_Add_for_LUT(u8* count, u8* cnt_k)
{
	
	u8 carry = 0;           //맨처음 Carry 값은 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
		int8_t i = 3;
		while(i >=0)
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
			if (out[i] < count[i])
			carry = 1;
     7d0:	ff 24       	eor	r15, r15
     7d2:	f3 94       	inc	r15
     7d4:	e1 2c       	mov	r14, r1
	{
		one[3] = 0x01;
		int8_t i = 3;
		while(i >=0)
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     7d6:	db 01       	movw	r26, r22
     7d8:	2e 91       	ld	r18, -X
     7da:	bd 01       	movw	r22, r26
     7dc:	92 91       	ld	r25, -Z
     7de:	92 0f       	add	r25, r18
     7e0:	98 0f       	add	r25, r24
     7e2:	d6 01       	movw	r26, r12
     7e4:	9e 93       	st	-X, r25
     7e6:	6d 01       	movw	r12, r26
			if (out[i] < count[i])
			carry = 1;
     7e8:	8f 2d       	mov	r24, r15
     7ea:	92 17       	cp	r25, r18
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <Count_Add_for_LUT+0x72>
     7ee:	8e 2d       	mov	r24, r14

	if (*cnt_k == 0)
	{
		one[3] = 0x01;
		int8_t i = 3;
		while(i >=0)
     7f0:	e0 17       	cp	r30, r16
     7f2:	f1 07       	cpc	r31, r17
     7f4:	81 f7       	brne	.-32     	; 0x7d6 <Count_Add_for_LUT+0x58>
     7f6:	37 c0       	rjmp	.+110    	; 0x866 <Count_Add_for_LUT+0xe8>
			}
			i--;
		}
		
	}
	if (*cnt_k == 1)
     7f8:	31 30       	cpi	r19, 0x01	; 1
     7fa:	09 f5       	brne	.+66     	; 0x83e <Count_Add_for_LUT+0xc0>
	{
		one[2] = 0x01;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	8f 83       	std	Y+7, r24	; 0x07
     800:	ba 01       	movw	r22, r20
     802:	6d 5f       	subi	r22, 0xFD	; 253
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	fe 01       	movw	r30, r28
     808:	38 96       	adiw	r30, 0x08	; 8
     80a:	6e 01       	movw	r12, r28
     80c:	b4 e0       	ldi	r27, 0x04	; 4
     80e:	cb 0e       	add	r12, r27
     810:	d1 1c       	adc	r13, r1
     812:	8e 01       	movw	r16, r28
     814:	0b 5f       	subi	r16, 0xFB	; 251
     816:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}
void Count_Add_for_LUT(u8* count, u8* cnt_k)
{
	
	u8 carry = 0;           //맨처음 Carry 값은 0
     818:	20 e0       	ldi	r18, 0x00	; 0
		int8_t i = 2;
		while(i >=0)
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
			if (out[i] < count[i])
			carry = 1;
     81a:	f1 2c       	mov	r15, r1
	{
		one[2] = 0x01;
		int8_t i = 2;
		while(i >=0)
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     81c:	db 01       	movw	r26, r22
     81e:	9e 91       	ld	r25, -X
     820:	bd 01       	movw	r22, r26
     822:	82 91       	ld	r24, -Z
     824:	89 0f       	add	r24, r25
     826:	82 0f       	add	r24, r18
     828:	d6 01       	movw	r26, r12
     82a:	8e 93       	st	-X, r24
     82c:	6d 01       	movw	r12, r26
			if (out[i] < count[i])
			carry = 1;
     82e:	23 2f       	mov	r18, r19
     830:	89 17       	cp	r24, r25
     832:	08 f0       	brcs	.+2      	; 0x836 <Count_Add_for_LUT+0xb8>
     834:	2f 2d       	mov	r18, r15
	}
	if (*cnt_k == 1)
	{
		one[2] = 0x01;
		int8_t i = 2;
		while(i >=0)
     836:	e0 17       	cp	r30, r16
     838:	f1 07       	cpc	r31, r17
     83a:	81 f7       	brne	.-32     	; 0x81c <Count_Add_for_LUT+0x9e>
     83c:	1d c0       	rjmp	.+58     	; 0x878 <Count_Add_for_LUT+0xfa>
				carry = 0;
			}
			i--;
		}
	}
	if (*cnt_k == 2)
     83e:	32 30       	cpi	r19, 0x02	; 2
     840:	89 f4       	brne	.+34     	; 0x864 <Count_Add_for_LUT+0xe6>
	{
		one[1] = 0x01;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	8e 83       	std	Y+6, r24	; 0x06
		int8_t i = 1;
		while(i >=0)
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     846:	fa 01       	movw	r30, r20
     848:	31 81       	ldd	r19, Z+1	; 0x01
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	23 0f       	add	r18, r19
     84e:	2a 83       	std	Y+2, r18	; 0x02
     850:	90 81       	ld	r25, Z
     852:	8d 81       	ldd	r24, Y+5	; 0x05
     854:	98 0f       	add	r25, r24
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	23 17       	cp	r18, r19
     85a:	08 f0       	brcs	.+2      	; 0x85e <Count_Add_for_LUT+0xe0>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	89 0f       	add	r24, r25
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	0a c0       	rjmp	.+20     	; 0x878 <Count_Add_for_LUT+0xfa>
	}
}
void Count_Add_for_LUT(u8* count, u8* cnt_k)
{
	
	u8 carry = 0;           //맨처음 Carry 값은 0
     864:	80 e0       	ldi	r24, 0x00	; 0
				carry = 0;
			}
			i--;
		}
	}
	if (*cnt_k == 3)
     866:	33 30       	cpi	r19, 0x03	; 3
     868:	39 f4       	brne	.+14     	; 0x878 <Count_Add_for_LUT+0xfa>
	{
		one[0] = 0x01;
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	9d 83       	std	Y+5, r25	; 0x05
		int8_t i = 0;
		while(i >=0)
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     86e:	da 01       	movw	r26, r20
     870:	9c 91       	ld	r25, X
     872:	9f 5f       	subi	r25, 0xFF	; 255
     874:	89 0f       	add	r24, r25
     876:	89 83       	std	Y+1, r24	; 0x01
			}
			i--;
		}
	}

	for (volatile int8_t cnt_i = 0; cnt_i < 4; cnt_i++)
     878:	19 86       	std	Y+9, r1	; 0x09
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	84 30       	cpi	r24, 0x04	; 4
     87e:	bc f4       	brge	.+46     	; 0x8ae <Count_Add_for_LUT+0x130>
	{
		count[cnt_i] = out[cnt_i];
     880:	29 85       	ldd	r18, Y+9	; 0x09
     882:	99 85       	ldd	r25, Y+9	; 0x09
     884:	fa 01       	movw	r30, r20
     886:	e2 0f       	add	r30, r18
     888:	f1 1d       	adc	r31, r1
     88a:	27 fd       	sbrc	r18, 7
     88c:	fa 95       	dec	r31
     88e:	a1 e0       	ldi	r26, 0x01	; 1
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ac 0f       	add	r26, r28
     894:	bd 1f       	adc	r27, r29
     896:	a9 0f       	add	r26, r25
     898:	b1 1d       	adc	r27, r1
     89a:	97 fd       	sbrc	r25, 7
     89c:	ba 95       	dec	r27
     89e:	9c 91       	ld	r25, X
     8a0:	90 83       	st	Z, r25
			}
			i--;
		}
	}

	for (volatile int8_t cnt_i = 0; cnt_i < 4; cnt_i++)
     8a2:	99 85       	ldd	r25, Y+9	; 0x09
     8a4:	9f 5f       	subi	r25, 0xFF	; 255
     8a6:	99 87       	std	Y+9, r25	; 0x09
     8a8:	99 85       	ldd	r25, Y+9	; 0x09
     8aa:	94 30       	cpi	r25, 0x04	; 4
     8ac:	4c f3       	brlt	.-46     	; 0x880 <Count_Add_for_LUT+0x102>
	{
		count[cnt_i] = out[cnt_i];
	}
	
}
     8ae:	29 96       	adiw	r28, 0x09	; 9
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	08 95       	ret

000008cc <Count_Add_for_FACE_LIGHT>:
void Count_Add_for_FACE_LIGHT(u8* count)
{
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	28 97       	sbiw	r28, 0x08	; 8
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	ac 01       	movw	r20, r24
	u8 carry = 0;           //맨처음 Carry 값은 0
	u8 out[4] = { 0x00 }; // 최종배열
     8f0:	19 82       	std	Y+1, r1	; 0x01
     8f2:	1a 82       	std	Y+2, r1	; 0x02
     8f4:	1b 82       	std	Y+3, r1	; 0x03
     8f6:	1c 82       	std	Y+4, r1	; 0x04
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
     8f8:	1d 82       	std	Y+5, r1	; 0x05
     8fa:	1e 82       	std	Y+6, r1	; 0x06
     8fc:	1f 82       	std	Y+7, r1	; 0x07
     8fe:	18 86       	std	Y+8, r1	; 0x08
	one[3] = 0x01;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	88 87       	std	Y+8, r24	; 0x08
     904:	8a 01       	movw	r16, r20
     906:	0c 5f       	subi	r16, 0xFC	; 252
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	fe 01       	movw	r30, r28
     90c:	35 96       	adiw	r30, 0x05	; 5
     90e:	de 01       	movw	r26, r28
     910:	19 96       	adiw	r26, 0x09	; 9
     912:	bf 01       	movw	r22, r30
     914:	7f 01       	movw	r14, r30
     916:	5f 01       	movw	r10, r30
	}
	
}
void Count_Add_for_FACE_LIGHT(u8* count)
{
	u8 carry = 0;           //맨처음 Carry 값은 0
     918:	80 e0       	ldi	r24, 0x00	; 0
	int8_t i = 3,cnt_i = 0;
	while(i >=0)
	{
		out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
		if (out[i] < count[i])
		carry = 1;
     91a:	31 e0       	ldi	r19, 0x01	; 1
     91c:	d1 2c       	mov	r13, r1
	one[3] = 0x01;

	int8_t i = 3,cnt_i = 0;
	while(i >=0)
	{
		out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     91e:	f8 01       	movw	r30, r16
     920:	22 91       	ld	r18, -Z
     922:	8f 01       	movw	r16, r30
     924:	9e 91       	ld	r25, -X
     926:	92 0f       	add	r25, r18
     928:	98 0f       	add	r25, r24
     92a:	f5 01       	movw	r30, r10
     92c:	92 93       	st	-Z, r25
     92e:	5f 01       	movw	r10, r30
		if (out[i] < count[i])
		carry = 1;
     930:	83 2f       	mov	r24, r19
     932:	92 17       	cp	r25, r18
     934:	08 f0       	brcs	.+2      	; 0x938 <Count_Add_for_FACE_LIGHT+0x6c>
     936:	8d 2d       	mov	r24, r13
	u8 out[4] = { 0x00 }; // 최종배열
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
	one[3] = 0x01;

	int8_t i = 3,cnt_i = 0;
	while(i >=0)
     938:	ae 15       	cp	r26, r14
     93a:	bf 05       	cpc	r27, r15
     93c:	81 f7       	brne	.-32     	; 0x91e <Count_Add_for_FACE_LIGHT+0x52>
     93e:	fe 01       	movw	r30, r28
     940:	31 96       	adiw	r30, 0x01	; 1
     942:	da 01       	movw	r26, r20
		}
		i--;
	}
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
	{
		count[cnt_i] = out[cnt_i];
     944:	81 91       	ld	r24, Z+
     946:	8d 93       	st	X+, r24
		{
			carry = 0;
		}
		i--;
	}
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
     948:	e6 17       	cp	r30, r22
     94a:	f7 07       	cpc	r31, r23
     94c:	d9 f7       	brne	.-10     	; 0x944 <Count_Add_for_FACE_LIGHT+0x78>
	{
		count[cnt_i] = out[cnt_i];
	}
}
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	bf 90       	pop	r11
     96a:	af 90       	pop	r10
     96c:	08 95       	ret

0000096e <Make_LUT_Face_Light>:
void Make_LUT_Face_Light(u8 LUT_FL[4][4][256],u8* userkey,u8* count)//! LUK Table of FACE_Light
{
     96e:	8f 92       	push	r8
     970:	9f 92       	push	r9
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	a8 97       	sbiw	r28, 0x28	; 40
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	7c 01       	movw	r14, r24
     998:	5b 01       	movw	r10, r22
     99a:	6a 01       	movw	r12, r20
	u8 state[16] = { 0x00 };
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	8e 01       	movw	r16, r28
     9a0:	0f 5f       	subi	r16, 0xFF	; 255
     9a2:	1f 4f       	sbci	r17, 0xFF	; 255
     9a4:	d8 01       	movw	r26, r16
     9a6:	e8 2f       	mov	r30, r24
     9a8:	1d 92       	st	X+, r1
     9aa:	ea 95       	dec	r30
     9ac:	e9 f7       	brne	.-6      	; 0x9a8 <Make_LUT_Face_Light+0x3a>
	u8 roundkey[16] = {0x00};
     9ae:	fe 01       	movw	r30, r28
     9b0:	71 96       	adiw	r30, 0x11	; 17
     9b2:	df 01       	movw	r26, r30
     9b4:	1d 92       	st	X+, r1
     9b6:	8a 95       	dec	r24
     9b8:	e9 f7       	brne	.-6      	; 0x9b4 <Make_LUT_Face_Light+0x46>
	volatile u8 round = 0;
     9ba:	19 a2       	std	Y+33, r1	; 0x21
	volatile u8 cnt_j = 0;
     9bc:	1a a2       	std	Y+34, r1	; 0x22
	volatile temp = 0;
     9be:	1c a2       	std	Y+36, r1	; 0x24
     9c0:	1b a2       	std	Y+35, r1	; 0x23


	reset_count(count);
     9c2:	ca 01       	movw	r24, r20
     9c4:	ca de       	rcall	.-620    	; 0x75a <reset_count>
	state_copy(state, count);
     9c6:	b6 01       	movw	r22, r12
     9c8:	c8 01       	movw	r24, r16
     9ca:	ce de       	rcall	.-612    	; 0x768 <state_copy>


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
     9cc:	18 a6       	std	Y+40, r1	; 0x28
     9ce:	1f a2       	std	Y+39, r1	; 0x27
     9d0:	8f a1       	ldd	r24, Y+39	; 0x27
     9d2:	98 a5       	ldd	r25, Y+40	; 0x28
     9d4:	04 97       	sbiw	r24, 0x04	; 4
     9d6:	0c f0       	brlt	.+2      	; 0x9da <Make_LUT_Face_Light+0x6c>
     9d8:	a6 c0       	rjmp	.+332    	; 0xb26 <Make_LUT_Face_Light+0x1b8>
		for (volatile int16_t cnt_i = 0; cnt_i < 5 ; cnt_i++)                      //! check BLOCKSIZE 블록size가 256넘어가면 그냥 256이라 써주면된다.
		{
			
			round = 0x00;
			state_copy(roundkey, userkey);
			AddRoundKey(state, roundkey);
     9da:	80 2e       	mov	r8, r16
     9dc:	91 2e       	mov	r9, r17
	state_copy(state, count);


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
	{
		for (volatile int16_t cnt_i = 0; cnt_i < 5 ; cnt_i++)                      //! check BLOCKSIZE 블록size가 256넘어가면 그냥 256이라 써주면된다.
     9de:	1e a2       	std	Y+38, r1	; 0x26
     9e0:	1d a2       	std	Y+37, r1	; 0x25
     9e2:	8d a1       	ldd	r24, Y+37	; 0x25
     9e4:	9e a1       	ldd	r25, Y+38	; 0x26
     9e6:	05 97       	sbiw	r24, 0x05	; 5
     9e8:	0c f0       	brlt	.+2      	; 0x9ec <Make_LUT_Face_Light+0x7e>
     9ea:	8e c0       	rjmp	.+284    	; 0xb08 <Make_LUT_Face_Light+0x19a>
		{
			
			round = 0x00;
     9ec:	19 a2       	std	Y+33, r1	; 0x21
			state_copy(roundkey, userkey);
     9ee:	b5 01       	movw	r22, r10
     9f0:	ce 01       	movw	r24, r28
     9f2:	41 96       	adiw	r24, 0x11	; 17
     9f4:	b9 de       	rcall	.-654    	; 0x768 <state_copy>
			AddRoundKey(state, roundkey);
     9f6:	be 01       	movw	r22, r28
     9f8:	6f 5e       	subi	r22, 0xEF	; 239
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	88 2d       	mov	r24, r8
     9fe:	99 2d       	mov	r25, r9
     a00:	e3 dd       	rcall	.-1082   	; 0x5c8 <AddRoundKey>
			keyScheduling(roundkey,&round);
     a02:	be 01       	movw	r22, r28
     a04:	6f 5d       	subi	r22, 0xDF	; 223
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	ce 01       	movw	r24, r28
     a0a:	41 96       	adiw	r24, 0x11	; 17
			

			Subbyte_ShiftRows_asm(state);
     a0c:	ea dd       	rcall	.-1068   	; 0x5e2 <keyScheduling>
     a0e:	88 2d       	mov	r24, r8
     a10:	99 2d       	mov	r25, r9
			MixColumns_asm_Progm(state);
     a12:	53 dd       	rcall	.-1370   	; 0x4ba <Subbyte_ShiftRows_asm>
     a14:	88 2d       	mov	r24, r8
     a16:	99 2d       	mov	r25, r9
			AddRoundKey(state,roundkey);
     a18:	09 dd       	rcall	.-1518   	; 0x42c <MixColumns_asm_Progm>
     a1a:	be 01       	movw	r22, r28
     a1c:	6f 5e       	subi	r22, 0xEF	; 239
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	88 2d       	mov	r24, r8
     a22:	99 2d       	mov	r25, r9
			keyScheduling(roundkey,&round);
     a24:	d1 dd       	rcall	.-1118   	; 0x5c8 <AddRoundKey>
     a26:	be 01       	movw	r22, r28
     a28:	6f 5d       	subi	r22, 0xDF	; 223
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	ce 01       	movw	r24, r28
     a2e:	41 96       	adiw	r24, 0x11	; 17
			
			SubByte(state);
     a30:	d8 dd       	rcall	.-1104   	; 0x5e2 <keyScheduling>
     a32:	88 2d       	mov	r24, r8
     a34:	99 2d       	mov	r25, r9
     a36:	a2 dd       	rcall	.-1212   	; 0x57c <SubByte>
			for (cnt_j = 0; cnt_j < 4; cnt_j++)
     a38:	1a a2       	std	Y+34, r1	; 0x22
     a3a:	8a a1       	ldd	r24, Y+34	; 0x22
     a3c:	84 30       	cpi	r24, 0x04	; 4
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <Make_LUT_Face_Light+0xd4>
     a40:	50 c0       	rjmp	.+160    	; 0xae2 <Make_LUT_Face_Light+0x174>
			{
				if (cnt_k != 3){
     a42:	8f a1       	ldd	r24, Y+39	; 0x27
     a44:	98 a5       	ldd	r25, Y+40	; 0x28
     a46:	03 97       	sbiw	r24, 0x03	; 3
     a48:	39 f1       	breq	.+78     	; 0xa98 <Make_LUT_Face_Light+0x12a>
					temp = state[((cnt_k + 1) * 4) + cnt_j];
     a4a:	ef a1       	ldd	r30, Y+39	; 0x27
     a4c:	f8 a5       	ldd	r31, Y+40	; 0x28
     a4e:	8a a1       	ldd	r24, Y+34	; 0x22
     a50:	31 96       	adiw	r30, 0x01	; 1
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	e0 0f       	add	r30, r16
     a5c:	f1 1f       	adc	r31, r17
     a5e:	e8 0f       	add	r30, r24
     a60:	f1 1d       	adc	r31, r1
     a62:	80 81       	ld	r24, Z
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	9c a3       	std	Y+36, r25	; 0x24
     a68:	8b a3       	std	Y+35, r24	; 0x23
					eeprom_update_byte(&LUT_FL[cnt_k][cnt_j][cnt_i],temp);
     a6a:	6b a1       	ldd	r22, Y+35	; 0x23
     a6c:	7c a1       	ldd	r23, Y+36	; 0x24
     a6e:	2f a1       	ldd	r18, Y+39	; 0x27
     a70:	38 a5       	ldd	r19, Y+40	; 0x28
     a72:	9a a1       	ldd	r25, Y+34	; 0x22
     a74:	4d a1       	ldd	r20, Y+37	; 0x25
     a76:	5e a1       	ldd	r21, Y+38	; 0x26
     a78:	32 2f       	mov	r19, r18
     a7a:	22 27       	eor	r18, r18
     a7c:	33 0f       	add	r19, r19
     a7e:	33 0f       	add	r19, r19
     a80:	2e 0d       	add	r18, r14
     a82:	3f 1d       	adc	r19, r15
     a84:	89 2f       	mov	r24, r25
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	98 2f       	mov	r25, r24
     a8a:	88 27       	eor	r24, r24
     a8c:	84 0f       	add	r24, r20
     a8e:	95 1f       	adc	r25, r21
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	a6 d2       	rcall	.+1356   	; 0xfe2 <eeprom_update_byte>
     a96:	1e c0       	rjmp	.+60     	; 0xad4 <Make_LUT_Face_Light+0x166>
				}
				else{
					temp = state[cnt_j];
     a98:	8a a1       	ldd	r24, Y+34	; 0x22
     a9a:	f8 01       	movw	r30, r16
     a9c:	e8 0f       	add	r30, r24
     a9e:	f1 1d       	adc	r31, r1
     aa0:	80 81       	ld	r24, Z
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9c a3       	std	Y+36, r25	; 0x24
     aa6:	8b a3       	std	Y+35, r24	; 0x23
					eeprom_update_byte(&LUT_FL[cnt_k][cnt_j][cnt_i],temp);
     aa8:	6b a1       	ldd	r22, Y+35	; 0x23
     aaa:	7c a1       	ldd	r23, Y+36	; 0x24
     aac:	2f a1       	ldd	r18, Y+39	; 0x27
     aae:	38 a5       	ldd	r19, Y+40	; 0x28
     ab0:	9a a1       	ldd	r25, Y+34	; 0x22
     ab2:	4d a1       	ldd	r20, Y+37	; 0x25
     ab4:	5e a1       	ldd	r21, Y+38	; 0x26
     ab6:	32 2f       	mov	r19, r18
     ab8:	22 27       	eor	r18, r18
     aba:	33 0f       	add	r19, r19
     abc:	33 0f       	add	r19, r19
     abe:	2e 0d       	add	r18, r14
     ac0:	3f 1d       	adc	r19, r15
     ac2:	89 2f       	mov	r24, r25
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	98 2f       	mov	r25, r24
     ac8:	88 27       	eor	r24, r24
     aca:	84 0f       	add	r24, r20
     acc:	95 1f       	adc	r25, r21
     ace:	82 0f       	add	r24, r18
     ad0:	93 1f       	adc	r25, r19
     ad2:	87 d2       	rcall	.+1294   	; 0xfe2 <eeprom_update_byte>
			MixColumns_asm_Progm(state);
			AddRoundKey(state,roundkey);
			keyScheduling(roundkey,&round);
			
			SubByte(state);
			for (cnt_j = 0; cnt_j < 4; cnt_j++)
     ad4:	8a a1       	ldd	r24, Y+34	; 0x22
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	8a a3       	std	Y+34, r24	; 0x22
     ada:	8a a1       	ldd	r24, Y+34	; 0x22
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	08 f4       	brcc	.+2      	; 0xae2 <Make_LUT_Face_Light+0x174>
					temp = state[cnt_j];
					eeprom_update_byte(&LUT_FL[cnt_k][cnt_j][cnt_i],temp);
				}
				
			}
			Count_Add_for_LUT(count, &cnt_k);
     ae0:	b0 cf       	rjmp	.-160    	; 0xa42 <Make_LUT_Face_Light+0xd4>
     ae2:	be 01       	movw	r22, r28
     ae4:	69 5d       	subi	r22, 0xD9	; 217
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	c6 01       	movw	r24, r12
     aea:	49 de       	rcall	.-878    	; 0x77e <Count_Add_for_LUT>
			state_copy(state, count);
     aec:	b6 01       	movw	r22, r12
     aee:	88 2d       	mov	r24, r8
     af0:	99 2d       	mov	r25, r9
     af2:	3a de       	rcall	.-908    	; 0x768 <state_copy>
	state_copy(state, count);


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
	{
		for (volatile int16_t cnt_i = 0; cnt_i < 5 ; cnt_i++)                      //! check BLOCKSIZE 블록size가 256넘어가면 그냥 256이라 써주면된다.
     af4:	8d a1       	ldd	r24, Y+37	; 0x25
     af6:	9e a1       	ldd	r25, Y+38	; 0x26
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	9e a3       	std	Y+38, r25	; 0x26
     afc:	8d a3       	std	Y+37, r24	; 0x25
     afe:	8d a1       	ldd	r24, Y+37	; 0x25
     b00:	9e a1       	ldd	r25, Y+38	; 0x26
     b02:	05 97       	sbiw	r24, 0x05	; 5
     b04:	0c f4       	brge	.+2      	; 0xb08 <Make_LUT_Face_Light+0x19a>
			}
			Count_Add_for_LUT(count, &cnt_k);
			state_copy(state, count);

		}
		reset_count(state);
     b06:	72 cf       	rjmp	.-284    	; 0x9ec <Make_LUT_Face_Light+0x7e>
     b08:	88 2d       	mov	r24, r8
     b0a:	99 2d       	mov	r25, r9
     b0c:	26 de       	rcall	.-948    	; 0x75a <reset_count>
		reset_count(count);
     b0e:	c6 01       	movw	r24, r12
     b10:	24 de       	rcall	.-952    	; 0x75a <reset_count>
     b12:	8f a1       	ldd	r24, Y+39	; 0x27

	reset_count(count);
	state_copy(state, count);


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
     b14:	98 a5       	ldd	r25, Y+40	; 0x28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	98 a7       	std	Y+40, r25	; 0x28
     b1a:	8f a3       	std	Y+39, r24	; 0x27
     b1c:	8f a1       	ldd	r24, Y+39	; 0x27
     b1e:	98 a5       	ldd	r25, Y+40	; 0x28
     b20:	04 97       	sbiw	r24, 0x04	; 4
     b22:	0c f4       	brge	.+2      	; 0xb26 <Make_LUT_Face_Light+0x1b8>
     b24:	5c cf       	rjmp	.-328    	; 0x9de <Make_LUT_Face_Light+0x70>
     b26:	a8 96       	adiw	r28, 0x28	; 40

		}
		reset_count(state);
		reset_count(count);
	}
}
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	bf 90       	pop	r11
     b44:	af 90       	pop	r10
     b46:	9f 90       	pop	r9
     b48:	8f 90       	pop	r8
     b4a:	08 95       	ret

00000b4c <AES_encrypt_FACE_Light>:
     b4c:	2f 92       	push	r2

void AES_encrypt_FACE_Light(u8 *inp,u8 LUT_FL[4][4][256], u8 *out, u8 *usrkey)//AES encryption of FACE mode
{
     b4e:	3f 92       	push	r3
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	a4 97       	sbiw	r28, 0x24	; 36
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	fc 01       	movw	r30, r24
     b82:	4b a3       	std	Y+35, r20	; 0x23
     b84:	5c a3       	std	Y+36, r21	; 0x24
	u8 state[16] = {0x00};
     b86:	80 e1       	ldi	r24, 0x10	; 16
     b88:	ae 01       	movw	r20, r28
     b8a:	4f 5f       	subi	r20, 0xFF	; 255
     b8c:	5f 4f       	sbci	r21, 0xFF	; 255
     b8e:	da 01       	movw	r26, r20
     b90:	98 2f       	mov	r25, r24
     b92:	1d 92       	st	X+, r1
     b94:	9a 95       	dec	r25
     b96:	e9 f7       	brne	.-6      	; 0xb92 <AES_encrypt_FACE_Light+0x46>
	u8 cnt_i;
	u8 round = 0;
     b98:	19 8a       	std	Y+17, r1	; 0x11
	u8 roundkey[16] = {0x00};
     b9a:	6e 01       	movw	r12, r28
     b9c:	a2 e1       	ldi	r26, 0x12	; 18
     b9e:	ca 0e       	add	r12, r26
     ba0:	d1 1c       	adc	r13, r1
     ba2:	d6 01       	movw	r26, r12
     ba4:	1d 92       	st	X+, r1
     ba6:	8a 95       	dec	r24
     ba8:	e9 f7       	brne	.-6      	; 0xba4 <AES_encrypt_FACE_Light+0x58>
     baa:	80 80       	ld	r8, Z
     bac:	91 2c       	mov	r9, r1
     bae:	b4 ef       	ldi	r27, 0xF4	; 244
     bb0:	9b 1a       	sub	r9, r27
     bb2:	86 0e       	add	r8, r22
     bb4:	97 1e       	adc	r9, r23
     bb6:	8a 01       	movw	r16, r20
     bb8:	83 81       	ldd	r24, Z+3	; 0x03
     bba:	1b 01       	movw	r2, r22
     bbc:	28 0e       	add	r2, r24
     bbe:	31 1c       	adc	r3, r1
     bc0:	62 80       	ldd	r6, Z+2	; 0x02
     bc2:	71 2c       	mov	r7, r1
     bc4:	8c ef       	ldi	r24, 0xFC	; 252
     bc6:	78 1a       	sub	r7, r24
     bc8:	66 0e       	add	r6, r22
     bca:	77 1e       	adc	r7, r23
     bcc:	41 80       	ldd	r4, Z+1	; 0x01
     bce:	51 2c       	mov	r5, r1
     bd0:	98 ef       	ldi	r25, 0xF8	; 248
     bd2:	59 1a       	sub	r5, r25
     bd4:	46 0e       	add	r4, r22
     bd6:	57 1e       	adc	r5, r23
     bd8:	a2 2e       	mov	r10, r18
     bda:	b3 2e       	mov	r11, r19
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
	{
		state[cnt_i] = eeprom_read_byte(&LUT_FL[3][cnt_i][inp[0]]);
		state[cnt_i + 4] = eeprom_read_byte(&LUT_FL[0][cnt_i][inp[3]]);
		state[cnt_i + 8] =  eeprom_read_byte(&LUT_FL[1][cnt_i][inp[2]]);
		state[cnt_i + 12] =  eeprom_read_byte(&LUT_FL[2][cnt_i][inp[1]]);
     bdc:	7a 01       	movw	r14, r20
     bde:	a4 e0       	ldi	r26, 0x04	; 4
     be0:	aa a3       	std	Y+34, r26	; 0x22
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	for (cnt_i = 0; cnt_i < 4; cnt_i++)
	{
		state[cnt_i] = eeprom_read_byte(&LUT_FL[3][cnt_i][inp[0]]);
     be2:	c4 01       	movw	r24, r8
     be4:	f6 d1       	rcall	.+1004   	; 0xfd2 <eeprom_read_byte>
     be6:	f7 01       	movw	r30, r14
     be8:	80 83       	st	Z, r24
		state[cnt_i + 4] = eeprom_read_byte(&LUT_FL[0][cnt_i][inp[3]]);
     bea:	c1 01       	movw	r24, r2
     bec:	f2 d1       	rcall	.+996    	; 0xfd2 <eeprom_read_byte>
     bee:	d7 01       	movw	r26, r14
     bf0:	14 96       	adiw	r26, 0x04	; 4
     bf2:	8c 93       	st	X, r24
		state[cnt_i + 8] =  eeprom_read_byte(&LUT_FL[1][cnt_i][inp[2]]);
     bf4:	c3 01       	movw	r24, r6
     bf6:	ed d1       	rcall	.+986    	; 0xfd2 <eeprom_read_byte>
     bf8:	f7 01       	movw	r30, r14
     bfa:	80 87       	std	Z+8, r24	; 0x08
		state[cnt_i + 12] =  eeprom_read_byte(&LUT_FL[2][cnt_i][inp[1]]);
     bfc:	c2 01       	movw	r24, r4
     bfe:	e9 d1       	rcall	.+978    	; 0xfd2 <eeprom_read_byte>
     c00:	d7 01       	movw	r26, r14
     c02:	1c 96       	adiw	r26, 0x0c	; 12
     c04:	8c 93       	st	X, r24
     c06:	f5 01       	movw	r30, r10
		roundkey[cnt_i] = usrkey[cnt_i];
     c08:	80 81       	ld	r24, Z
     c0a:	d6 01       	movw	r26, r12
     c0c:	8c 93       	st	X, r24
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
		roundkey[cnt_i+4] = usrkey[cnt_i+4];
     c10:	14 96       	adiw	r26, 0x04	; 4
     c12:	8c 93       	st	X, r24
     c14:	14 97       	sbiw	r26, 0x04	; 4
     c16:	80 85       	ldd	r24, Z+8	; 0x08
		roundkey[cnt_i+8] = usrkey[cnt_i+8];
     c18:	18 96       	adiw	r26, 0x08	; 8
     c1a:	8c 93       	st	X, r24
     c1c:	18 97       	sbiw	r26, 0x08	; 8
     c1e:	84 85       	ldd	r24, Z+12	; 0x0c
		roundkey[cnt_i+12] = usrkey[cnt_i+12];
     c20:	1c 96       	adiw	r26, 0x0c	; 12
     c22:	8c 93       	st	X, r24
     c24:	ba a1       	ldd	r27, Y+34	; 0x22
     c26:	b1 50       	subi	r27, 0x01	; 1
     c28:	ba a3       	std	Y+34, r27	; 0x22
     c2a:	93 94       	inc	r9
     c2c:	ff ef       	ldi	r31, 0xFF	; 255
     c2e:	ef 1a       	sub	r14, r31
     c30:	ff 0a       	sbc	r15, r31
     c32:	33 94       	inc	r3
     c34:	73 94       	inc	r7
     c36:	53 94       	inc	r5
     c38:	bf ef       	ldi	r27, 0xFF	; 255
     c3a:	ab 1a       	sub	r10, r27
     c3c:	bb 0a       	sbc	r11, r27
     c3e:	ef ef       	ldi	r30, 0xFF	; 255
     c40:	ce 1a       	sub	r12, r30
     c42:	de 0a       	sbc	r13, r30
     c44:	fa a1       	ldd	r31, Y+34	; 0x22
	u8 state[16] = {0x00};
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	for (cnt_i = 0; cnt_i < 4; cnt_i++)
     c46:	f1 11       	cpse	r31, r1
     c48:	cc cf       	rjmp	.-104    	; 0xbe2 <AES_encrypt_FACE_Light+0x96>
     c4a:	be 01       	movw	r22, r28
		roundkey[cnt_i] = usrkey[cnt_i];
		roundkey[cnt_i+4] = usrkey[cnt_i+4];
		roundkey[cnt_i+8] = usrkey[cnt_i+8];
		roundkey[cnt_i+12] = usrkey[cnt_i+12];
	}
	keyScheduling(roundkey,&round);
     c4c:	6f 5e       	subi	r22, 0xEF	; 239
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	ce 01       	movw	r24, r28
     c52:	42 96       	adiw	r24, 0x12	; 18
     c54:	c6 dc       	rcall	.-1652   	; 0x5e2 <keyScheduling>
     c56:	be 01       	movw	r22, r28
	keyScheduling(roundkey,&round);
     c58:	6f 5e       	subi	r22, 0xEF	; 239
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	ce 01       	movw	r24, r28
     c5e:	42 96       	adiw	r24, 0x12	; 18
     c60:	c0 dc       	rcall	.-1664   	; 0x5e2 <keyScheduling>

	ShiftRow(state);
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	96 dc       	rcall	.-1748   	; 0x594 <ShiftRow>
     c68:	ce 01       	movw	r24, r28
	MixColumns_asm_Progm(state);
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	df db       	rcall	.-2114   	; 0x42c <MixColumns_asm_Progm>
     c6e:	be 01       	movw	r22, r28
	AddRoundKey(state, roundkey);
     c70:	6e 5e       	subi	r22, 0xEE	; 238
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	a7 dc       	rcall	.-1714   	; 0x5c8 <AddRoundKey>
     c7a:	be 01       	movw	r22, r28
	keyScheduling(roundkey,&round);
     c7c:	6f 5e       	subi	r22, 0xEF	; 239
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	ce 01       	movw	r24, r28
     c82:	42 96       	adiw	r24, 0x12	; 18
     c84:	ae dc       	rcall	.-1700   	; 0x5e2 <keyScheduling>
     c86:	0f 2e       	mov	r0, r31
     c88:	f7 e0       	ldi	r31, 0x07	; 7
     c8a:	ff 2e       	mov	r15, r31
     c8c:	f0 2d       	mov	r31, r0

	for (cnt_i = 3; cnt_i < AES_MAXNR; cnt_i++)
	{
		Subbyte_ShiftRows_asm(state);
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	13 dc       	rcall	.-2010   	; 0x4ba <Subbyte_ShiftRows_asm>
		MixColumns_asm_Progm(state);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	c9 db       	rcall	.-2158   	; 0x42c <MixColumns_asm_Progm>
		AddRoundKey(state, roundkey);
     c9a:	be 01       	movw	r22, r28
     c9c:	6e 5e       	subi	r22, 0xEE	; 238
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	91 dc       	rcall	.-1758   	; 0x5c8 <AddRoundKey>
		keyScheduling(roundkey,&round);
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5e       	subi	r22, 0xEF	; 239
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	ce 01       	movw	r24, r28
     cae:	42 96       	adiw	r24, 0x12	; 18
     cb0:	98 dc       	rcall	.-1744   	; 0x5e2 <keyScheduling>
     cb2:	fa 94       	dec	r15
	ShiftRow(state);
	MixColumns_asm_Progm(state);
	AddRoundKey(state, roundkey);
	keyScheduling(roundkey,&round);

	for (cnt_i = 3; cnt_i < AES_MAXNR; cnt_i++)
     cb4:	f1 10       	cpse	r15, r1
     cb6:	eb cf       	rjmp	.-42     	; 0xc8e <AES_encrypt_FACE_Light+0x142>
		AddRoundKey(state, roundkey);
		keyScheduling(roundkey,&round);

	}
	
	Subbyte_ShiftRows_asm(state);
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	fe db       	rcall	.-2052   	; 0x4ba <Subbyte_ShiftRows_asm>
     cbe:	be 01       	movw	r22, r28
	AddRoundKey(state, roundkey);
     cc0:	6e 5e       	subi	r22, 0xEE	; 238
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	ce 01       	movw	r24, r28
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	7f dc       	rcall	.-1794   	; 0x5c8 <AddRoundKey>
     cca:	eb a1       	ldd	r30, Y+35	; 0x23
     ccc:	fc a1       	ldd	r31, Y+36	; 0x24
     cce:	9e 01       	movw	r18, r28
     cd0:	2f 5e       	subi	r18, 0xEF	; 239
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	d8 01       	movw	r26, r16
     cd6:	8d 91       	ld	r24, X+

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
     cd8:	8d 01       	movw	r16, r26
     cda:	81 93       	st	Z+, r24
     cdc:	a2 17       	cp	r26, r18
     cde:	b3 07       	cpc	r27, r19
	}
	
	Subbyte_ShiftRows_asm(state);
	AddRoundKey(state, roundkey);

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
     ce0:	c9 f7       	brne	.-14     	; 0xcd4 <AES_encrypt_FACE_Light+0x188>
     ce2:	a4 96       	adiw	r28, 0x24	; 36
     ce4:	0f b6       	in	r0, 0x3f	; 63
	{
		out[cnt_i] = state[cnt_i];
	}
}
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	3f 90       	pop	r3
     d10:	2f 90       	pop	r2
     d12:	08 95       	ret

00000d14 <CRYPTO_ctr128_encrypt_FACE_Light>:
     d14:	2f 92       	push	r2
     d16:	3f 92       	push	r3

void CRYPTO_ctr128_encrypt_FACE_Light(u8* inp, u8* out, u8 LUT_FL[4][4][256],u8 length , u8* usrkey, u8* count) //AES CTR Mode of FACE_Light ver
{
     d18:	4f 92       	push	r4
     d1a:	5f 92       	push	r5
     d1c:	6f 92       	push	r6
     d1e:	7f 92       	push	r7
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	c2 5c       	subi	r28, 0xC2	; 194
     d3e:	d1 09       	sbc	r29, r1
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	6c 01       	movw	r12, r24
     d4c:	cf 53       	subi	r28, 0x3F	; 63
     d4e:	df 4f       	sbci	r29, 0xFF	; 255
     d50:	68 83       	st	Y, r22
     d52:	c1 5c       	subi	r28, 0xC1	; 193
     d54:	d0 40       	sbci	r29, 0x00	; 0
     d56:	ce 53       	subi	r28, 0x3E	; 62
     d58:	df 4f       	sbci	r29, 0xFF	; 255
     d5a:	78 83       	st	Y, r23
     d5c:	c2 5c       	subi	r28, 0xC2	; 194
     d5e:	d0 40       	sbci	r29, 0x00	; 0
     d60:	2a 01       	movw	r4, r20
     d62:	18 01       	movw	r2, r16
	u8 cnt_i, cnt_j;
	u8 paddingcnt = length % 16;
     d64:	12 2f       	mov	r17, r18
     d66:	1f 70       	andi	r17, 0x0F	; 15
	u8 PT[BLOCKSIZE][16] = { {0x00} };
     d68:	80 e5       	ldi	r24, 0x50	; 80
     d6a:	9e 01       	movw	r18, r28
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	59 01       	movw	r10, r18
     d72:	d9 01       	movw	r26, r18
     d74:	e8 2f       	mov	r30, r24
     d76:	1d 92       	st	X+, r1
     d78:	ea 95       	dec	r30
     d7a:	e9 f7       	brne	.-6      	; 0xd76 <CRYPTO_ctr128_encrypt_FACE_Light+0x62>
	u8 CT[BLOCKSIZE][16] = { {0x00} };
     d7c:	fe 01       	movw	r30, r28
     d7e:	ef 5a       	subi	r30, 0xAF	; 175
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	df 01       	movw	r26, r30
     d84:	1d 92       	st	X+, r1
     d86:	8a 95       	dec	r24
     d88:	e9 f7       	brne	.-6      	; 0xd84 <CRYPTO_ctr128_encrypt_FACE_Light+0x70>
	u8 iparray[16];
	u8 oparray[16];
	
	reset_count(count);
     d8a:	8e 2d       	mov	r24, r14
     d8c:	9f 2d       	mov	r25, r15
     d8e:	e5 dc       	rcall	.-1590   	; 0x75a <reset_count>
     d90:	f6 01       	movw	r30, r12
     d92:	45 01       	movw	r8, r10
     d94:	9e 01       	movw	r18, r28
     d96:	2f 5b       	subi	r18, 0xBF	; 191
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	a5 01       	movw	r20, r10
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <CRYPTO_ctr128_encrypt_FACE_Light+0xa0>

	for (cnt_i = 0; cnt_i < BLOCKSIZE - 1; cnt_i++)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
     d9e:	61 91       	ld	r22, Z+
     da0:	6d 93       	st	X+, r22
	
	reset_count(count);

	for (cnt_i = 0; cnt_i < BLOCKSIZE - 1; cnt_i++)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
     da2:	e8 17       	cp	r30, r24
     da4:	f9 07       	cpc	r31, r25
     da6:	d9 f7       	brne	.-10     	; 0xd9e <CRYPTO_ctr128_encrypt_FACE_Light+0x8a>
     da8:	40 5f       	subi	r20, 0xF0	; 240
     daa:	5f 4f       	sbci	r21, 0xFF	; 255
     dac:	fc 01       	movw	r30, r24
	u8 iparray[16];
	u8 oparray[16];
	
	reset_count(count);

	for (cnt_i = 0; cnt_i < BLOCKSIZE - 1; cnt_i++)
     dae:	42 17       	cp	r20, r18
     db0:	53 07       	cpc	r21, r19
     db2:	21 f0       	breq	.+8      	; 0xdbc <CRYPTO_ctr128_encrypt_FACE_Light+0xa8>
     db4:	cf 01       	movw	r24, r30
     db6:	40 96       	adiw	r24, 0x10	; 16
		out[cnt_i] = state[cnt_i];
	}
}

void CRYPTO_ctr128_encrypt_FACE_Light(u8* inp, u8* out, u8 LUT_FL[4][4][256],u8 length , u8* usrkey, u8* count) //AES CTR Mode of FACE_Light ver
{
     db8:	da 01       	movw	r26, r20
     dba:	f1 cf       	rjmp	.-30     	; 0xd9e <CRYPTO_ctr128_encrypt_FACE_Light+0x8a>
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
     dbc:	11 11       	cpse	r17, r1
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <CRYPTO_ctr128_encrypt_FACE_Light+0xc8>
     dc0:	f6 01       	movw	r30, r12
     dc2:	e0 5c       	subi	r30, 0xC0	; 192
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	ae 01       	movw	r20, r28
     dc8:	4f 5a       	subi	r20, 0xAF	; 175
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
     dcc:	81 91       	ld	r24, Z+
     dce:	d9 01       	movw	r26, r18
     dd0:	8d 93       	st	X+, r24
     dd2:	9d 01       	movw	r18, r26
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
     dd4:	a4 17       	cp	r26, r20
     dd6:	b5 07       	cpc	r27, r21
     dd8:	c9 f7       	brne	.-14     	; 0xdcc <CRYPTO_ctr128_encrypt_FACE_Light+0xb8>
     dda:	1e c0       	rjmp	.+60     	; 0xe18 <CRYPTO_ctr128_encrypt_FACE_Light+0x104>
     ddc:	f6 01       	movw	r30, r12
     dde:	e0 5c       	subi	r30, 0xC0	; 192
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	81 0f       	add	r24, r17
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	8f 5b       	subi	r24, 0xBF	; 191
     dea:	9f 4f       	sbci	r25, 0xFF	; 255
     dec:	c8 0e       	add	r12, r24
     dee:	d9 1e       	adc	r13, r25

	if (paddingcnt != 0) // 패딩 함수.
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
     df0:	81 91       	ld	r24, Z+
     df2:	d9 01       	movw	r26, r18
     df4:	8d 93       	st	X+, r24
     df6:	9d 01       	movw	r18, r26
		}
	}

	if (paddingcnt != 0) // 패딩 함수.
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
     df8:	ec 15       	cp	r30, r12
     dfa:	fd 05       	cpc	r31, r13
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <CRYPTO_ctr128_encrypt_FACE_Light+0xdc>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
     dfe:	81 2f       	mov	r24, r17
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
     e00:	90 e1       	ldi	r25, 0x10	; 16
     e02:	91 1b       	sub	r25, r17
     e04:	e1 e4       	ldi	r30, 0x41	; 65
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ec 0f       	add	r30, r28
     e0a:	fd 1f       	adc	r31, r29
     e0c:	e8 0f       	add	r30, r24
     e0e:	f1 1d       	adc	r31, r1
     e10:	90 83       	st	Z, r25
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	80 31       	cpi	r24, 0x10	; 16
     e16:	b1 f7       	brne	.-20     	; 0xe04 <CRYPTO_ctr128_encrypt_FACE_Light+0xf0>
     e18:	5e 01       	movw	r10, r28
     e1a:	b1 e5       	ldi	r27, 0x51	; 81
     e1c:	ab 0e       	add	r10, r27
     e1e:	b1 1c       	adc	r11, r1

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey);
     e20:	35 01       	movw	r6, r10
     e22:	10 e0       	ldi	r17, 0x00	; 0
     e24:	0f 2e       	mov	r0, r31
     e26:	f1 eb       	ldi	r31, 0xB1	; 177
     e28:	cf 2e       	mov	r12, r31
     e2a:	d1 2c       	mov	r13, r1
     e2c:	f0 2d       	mov	r31, r0
     e2e:	cc 0e       	add	r12, r28
     e30:	dd 1e       	adc	r13, r29
     e32:	e0 e1       	ldi	r30, 0x10	; 16
     e34:	ce 0e       	add	r12, r30
     e36:	d1 1c       	adc	r13, r1
     e38:	4d c0       	rjmp	.+154    	; 0xed4 <CRYPTO_ctr128_encrypt_FACE_Light+0x1c0>
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
	{
		if (cnt_i != 0)
     e3a:	11 23       	and	r17, r17
     e3c:	09 f4       	brne	.+2      	; 0xe40 <CRYPTO_ctr128_encrypt_FACE_Light+0x12c>
     e3e:	44 c0       	rjmp	.+136    	; 0xec8 <CRYPTO_ctr128_encrypt_FACE_Light+0x1b4>
		Count_Add_for_FACE_LIGHT(count);
     e40:	8e 2d       	mov	r24, r14
     e42:	9f 2d       	mov	r25, r15
     e44:	43 dd       	rcall	.-1402   	; 0x8cc <Count_Add_for_FACE_LIGHT>
     e46:	40 c0       	rjmp	.+128    	; 0xec8 <CRYPTO_ctr128_encrypt_FACE_Light+0x1b4>

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			iparray[cnt_j] = count[cnt_j];
     e48:	8d 91       	ld	r24, X+
     e4a:	81 93       	st	Z+, r24
	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
	{
		if (cnt_i != 0)
		Count_Add_for_FACE_LIGHT(count);

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
     e4c:	2e 17       	cp	r18, r30
     e4e:	3f 07       	cpc	r19, r31
     e50:	d9 f7       	brne	.-10     	; 0xe48 <CRYPTO_ctr128_encrypt_FACE_Light+0x134>
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey);
     e52:	91 01       	movw	r18, r2
     e54:	ae 01       	movw	r20, r28
     e56:	4f 54       	subi	r20, 0x4F	; 79
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	b2 01       	movw	r22, r4
     e5c:	ce 01       	movw	r24, r28
     e5e:	8f 55       	subi	r24, 0x5F	; 95
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	74 de       	rcall	.-792    	; 0xb4c <AES_encrypt_FACE_Light>
     e64:	fe 01       	movw	r30, r28
     e66:	ef 54       	subi	r30, 0x4F	; 79
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	93 01       	movw	r18, r6
     e6c:	a4 01       	movw	r20, r8
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
     e6e:	91 91       	ld	r25, Z+
     e70:	da 01       	movw	r26, r20
     e72:	8d 91       	ld	r24, X+
     e74:	ad 01       	movw	r20, r26
     e76:	89 27       	eor	r24, r25
     e78:	d9 01       	movw	r26, r18
     e7a:	8d 93       	st	X+, r24
     e7c:	9d 01       	movw	r18, r26
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey);
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
     e7e:	ce 16       	cp	r12, r30
     e80:	df 06       	cpc	r13, r31
     e82:	a9 f7       	brne	.-22     	; 0xe6e <CRYPTO_ctr128_encrypt_FACE_Light+0x15a>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
     e84:	1f 5f       	subi	r17, 0xFF	; 255
     e86:	15 30       	cpi	r17, 0x05	; 5
     e88:	c1 f6       	brne	.-80     	; 0xe3a <CRYPTO_ctr128_encrypt_FACE_Light+0x126>
     e8a:	cf 53       	subi	r28, 0x3F	; 63
     e8c:	df 4f       	sbci	r29, 0xFF	; 255
     e8e:	e8 81       	ld	r30, Y
     e90:	c1 5c       	subi	r28, 0xC1	; 193
     e92:	d0 40       	sbci	r29, 0x00	; 0
     e94:	ce 53       	subi	r28, 0x3E	; 62
     e96:	df 4f       	sbci	r29, 0xFF	; 255
     e98:	f8 81       	ld	r31, Y
     e9a:	c2 5c       	subi	r28, 0xC2	; 194
     e9c:	d0 40       	sbci	r29, 0x00	; 0
     e9e:	ae 01       	movw	r20, r28
     ea0:	4f 55       	subi	r20, 0x5F	; 95
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <CRYPTO_ctr128_encrypt_FACE_Light+0x1aa>

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
     ea6:	8d 91       	ld	r24, X+
     ea8:	81 93       	st	Z+, r24
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
     eaa:	2e 17       	cp	r18, r30
     eac:	3f 07       	cpc	r19, r31
     eae:	d9 f7       	brne	.-10     	; 0xea6 <CRYPTO_ctr128_encrypt_FACE_Light+0x192>
     eb0:	b0 e1       	ldi	r27, 0x10	; 16
     eb2:	ab 0e       	add	r10, r27
     eb4:	b1 1c       	adc	r11, r1
     eb6:	f9 01       	movw	r30, r18
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
     eb8:	4a 15       	cp	r20, r10
     eba:	5b 05       	cpc	r21, r11
     ebc:	a1 f0       	breq	.+40     	; 0xee6 <CRYPTO_ctr128_encrypt_FACE_Light+0x1d2>
     ebe:	9f 01       	movw	r18, r30
     ec0:	20 5f       	subi	r18, 0xF0	; 240
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey);
     ec4:	d5 01       	movw	r26, r10
     ec6:	ef cf       	rjmp	.-34     	; 0xea6 <CRYPTO_ctr128_encrypt_FACE_Light+0x192>
     ec8:	e0 e1       	ldi	r30, 0x10	; 16
     eca:	8e 0e       	add	r8, r30
     ecc:	91 1c       	adc	r9, r1
     ece:	f0 e1       	ldi	r31, 0x10	; 16
     ed0:	6f 0e       	add	r6, r31
     ed2:	71 1c       	adc	r7, r1
     ed4:	ae 2d       	mov	r26, r14
     ed6:	bf 2d       	mov	r27, r15
     ed8:	fe 01       	movw	r30, r28
     eda:	ef 55       	subi	r30, 0x5F	; 95
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	9f 01       	movw	r18, r30
     ee0:	20 5f       	subi	r18, 0xF0	; 240
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	b1 cf       	rjmp	.-158    	; 0xe48 <CRYPTO_ctr128_encrypt_FACE_Light+0x134>
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
		}
	}
}
     ee6:	ce 53       	subi	r28, 0x3E	; 62
     ee8:	df 4f       	sbci	r29, 0xFF	; 255
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	bf 90       	pop	r11
     f06:	af 90       	pop	r10
     f08:	9f 90       	pop	r9
     f0a:	8f 90       	pop	r8
     f0c:	7f 90       	pop	r7
     f0e:	6f 90       	pop	r6
     f10:	5f 90       	pop	r5
     f12:	4f 90       	pop	r4
     f14:	3f 90       	pop	r3
     f16:	2f 90       	pop	r2
     f18:	08 95       	ret

00000f1a <main>:
#include "header.h"

EEMEM  u8 LUT_FL[4][4][256]  = {{{0x00}}};

int main(void)
{
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	c0 5c       	subi	r28, 0xC0	; 192
     f34:	d1 09       	sbc	r29, r1
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
	
 	 //u8 inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
 	 //u8 userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};

	 u8 inp[16 * BLOCKSIZE] ={0x00};
     f40:	80 e5       	ldi	r24, 0x50	; 80
     f42:	9e 01       	movw	r18, r28
     f44:	2f 5f       	subi	r18, 0xFF	; 255
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	69 01       	movw	r12, r18
     f4a:	f9 01       	movw	r30, r18
     f4c:	28 2f       	mov	r18, r24
     f4e:	11 92       	st	Z+, r1
     f50:	2a 95       	dec	r18
     f52:	e9 f7       	brne	.-6      	; 0xf4e <main+0x34>
	 u8 out[16 * BLOCKSIZE] = {0x00};
     f54:	5e 01       	movw	r10, r28
     f56:	31 e5       	ldi	r19, 0x51	; 81
     f58:	a3 0e       	add	r10, r19
     f5a:	b1 1c       	adc	r11, r1
     f5c:	f5 01       	movw	r30, r10
     f5e:	11 92       	st	Z+, r1
     f60:	8a 95       	dec	r24
     f62:	e9 f7       	brne	.-6      	; 0xf5e <main+0x44>
	 u8 userkey[16] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
     f64:	80 e1       	ldi	r24, 0x10	; 16
     f66:	e0 e0       	ldi	r30, 0x00	; 0
     f68:	f1 e0       	ldi	r31, 0x01	; 1
     f6a:	de 01       	movw	r26, r28
     f6c:	af 55       	subi	r26, 0x5F	; 95
     f6e:	bf 4f       	sbci	r27, 0xFF	; 255
     f70:	01 90       	ld	r0, Z+
     f72:	0d 92       	st	X+, r0
     f74:	8a 95       	dec	r24
     f76:	e1 f7       	brne	.-8      	; 0xf70 <main+0x56>
	 u8 count[16] = {0x00};
     f78:	7e 01       	movw	r14, r28
     f7a:	f1 eb       	ldi	r31, 0xB1	; 177
     f7c:	ef 0e       	add	r14, r31
     f7e:	f1 1c       	adc	r15, r1
     f80:	80 e1       	ldi	r24, 0x10	; 16
     f82:	f7 01       	movw	r30, r14
     f84:	11 92       	st	Z+, r1
     f86:	8a 95       	dec	r24
     f88:	e9 f7       	brne	.-6      	; 0xf84 <main+0x6a>
	
	Make_LUT_Face_Light(LUT_FL,userkey,count);
     f8a:	a7 01       	movw	r20, r14
     f8c:	be 01       	movw	r22, r28
     f8e:	6f 55       	subi	r22, 0x5F	; 95
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	eb dc       	rcall	.-1578   	; 0x96e <Make_LUT_Face_Light>
	CRYPTO_ctr128_encrypt_FACE_Light(inp,out,LUT_FL,AES_KEY_BIT,userkey,count);
     f98:	8e 01       	movw	r16, r28
     f9a:	0f 55       	subi	r16, 0x5F	; 95
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	20 e8       	ldi	r18, 0x80	; 128
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	b5 01       	movw	r22, r10
     fa6:	c6 01       	movw	r24, r12
     fa8:	b5 de       	rcall	.-662    	; 0xd14 <CRYPTO_ctr128_encrypt_FACE_Light>




	
}
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	c0 54       	subi	r28, 0x40	; 64
     fb0:	df 4f       	sbci	r29, 0xFF	; 255
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	08 95       	ret

00000fd2 <eeprom_read_byte>:
     fd2:	e1 99       	sbic	0x1c, 1	; 28
     fd4:	fe cf       	rjmp	.-4      	; 0xfd2 <eeprom_read_byte>
     fd6:	9f bb       	out	0x1f, r25	; 31
     fd8:	8e bb       	out	0x1e, r24	; 30
     fda:	e0 9a       	sbi	0x1c, 0	; 28
     fdc:	99 27       	eor	r25, r25
     fde:	8d b3       	in	r24, 0x1d	; 29
     fe0:	08 95       	ret

00000fe2 <eeprom_update_byte>:
     fe2:	26 2f       	mov	r18, r22

00000fe4 <eeprom_update_r18>:
     fe4:	e1 99       	sbic	0x1c, 1	; 28
     fe6:	fe cf       	rjmp	.-4      	; 0xfe4 <eeprom_update_r18>
     fe8:	9f bb       	out	0x1f, r25	; 31
     fea:	8e bb       	out	0x1e, r24	; 30
     fec:	e0 9a       	sbi	0x1c, 0	; 28
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	0d b2       	in	r0, 0x1d	; 29
     ff2:	02 16       	cp	r0, r18
     ff4:	31 f0       	breq	.+12     	; 0x1002 <eeprom_update_r18+0x1e>
     ff6:	2d bb       	out	0x1d, r18	; 29
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	e2 9a       	sbi	0x1c, 2	; 28
     ffe:	e1 9a       	sbi	0x1c, 1	; 28
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	08 95       	ret

00001004 <_exit>:
    1004:	f8 94       	cli

00001006 <__stop_program>:
    1006:	ff cf       	rjmp	.-2      	; 0x1006 <__stop_program>
