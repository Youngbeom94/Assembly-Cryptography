
AES_8bit Asm_fast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000310  00800100  00000350  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000740  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b1  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fe  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000705  00000000  00000000  0000194f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e7  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00002473  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	14 e0       	ldi	r17, 0x04	; 4
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	21 d1       	rcall	.+578    	; 0x2f6 <main>
  b4:	4b c1       	rjmp	.+662    	; 0x34c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <aes256_enc>:
 * param b: r22
 * param reducer: r0
 */
.global aes256_enc
aes256_enc:
	ldi r20, 14
  b8:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <aes_encrypt_core>

000000bc <aes192_enc>:

.global aes192_enc
aes192_enc:
	ldi r20, 12
  bc:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core
  be:	01 c0       	rjmp	.+2      	; 0xc2 <aes_encrypt_core>

000000c0 <aes128_enc>:

.global aes128_enc
aes128_enc:
	ldi r20, 10
  c0:	4a e0       	ldi	r20, 0x0A	; 10

000000c2 <aes_encrypt_core>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_encrypt_core
aes_encrypt_core:
	push_range 0, 19
  c2:	0f 92       	push	r0
  c4:	1f 92       	push	r1
  c6:	2f 92       	push	r2
  c8:	3f 92       	push	r3
  ca:	4f 92       	push	r4
  cc:	5f 92       	push	r5
  ce:	6f 92       	push	r6
  d0:	7f 92       	push	r7
  d2:	8f 92       	push	r8
  d4:	9f 92       	push	r9
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
	push r28
  ea:	cf 93       	push	r28
	push r29
  ec:	df 93       	push	r29
	push r24
  ee:	8f 93       	push	r24
	push r25
  f0:	9f 93       	push	r25
	movw r26, r22
  f2:	db 01       	movw	r26, r22
	movw r30, r24
  f4:	fc 01       	movw	r30, r24
	mov  CTR, r20
  f6:	84 2f       	mov	r24, r20
	clt
  f8:	e8 94       	clt
	
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld ST\row\col, Z+
		.endr
	.endr
  fa:	41 91       	ld	r20, Z+
  fc:	11 90       	ld	r1, Z+
  fe:	21 90       	ld	r2, Z+
 100:	31 90       	ld	r3, Z+
 102:	41 90       	ld	r4, Z+
 104:	51 90       	ld	r5, Z+
 106:	61 90       	ld	r6, Z+
 108:	71 90       	ld	r7, Z+
 10a:	81 90       	ld	r8, Z+
 10c:	91 90       	ld	r9, Z+
 10e:	a1 90       	ld	r10, Z+
 110:	b1 90       	ld	r11, Z+
 112:	c1 90       	ld	r12, Z+
 114:	d1 90       	ld	r13, Z+
 116:	e1 90       	ld	r14, Z+
 118:	f1 90       	ld	r15, Z+
	
	ldi r31, hi8(SBOX_TABLE)	
 11a:	f1 e0       	ldi	r31, 0x01	; 1
	ldi r29, hi8(MIX2_TABLE)
 11c:	d2 e0       	ldi	r29, 0x02	; 2
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld r0, X+
			eor ST\row\col, r0
		.endr
	.endr
 11e:	0d 90       	ld	r0, X+
 120:	40 25       	eor	r20, r0
 122:	0d 90       	ld	r0, X+
 124:	10 24       	eor	r1, r0
 126:	0d 90       	ld	r0, X+
 128:	20 24       	eor	r2, r0
 12a:	0d 90       	ld	r0, X+
 12c:	30 24       	eor	r3, r0
 12e:	0d 90       	ld	r0, X+
 130:	40 24       	eor	r4, r0
 132:	0d 90       	ld	r0, X+
 134:	50 24       	eor	r5, r0
 136:	0d 90       	ld	r0, X+
 138:	60 24       	eor	r6, r0
 13a:	0d 90       	ld	r0, X+
 13c:	70 24       	eor	r7, r0
 13e:	0d 90       	ld	r0, X+
 140:	80 24       	eor	r8, r0
 142:	0d 90       	ld	r0, X+
 144:	90 24       	eor	r9, r0
 146:	0d 90       	ld	r0, X+
 148:	a0 24       	eor	r10, r0
 14a:	0d 90       	ld	r0, X+
 14c:	b0 24       	eor	r11, r0
 14e:	0d 90       	ld	r0, X+
 150:	c0 24       	eor	r12, r0
 152:	0d 90       	ld	r0, X+
 154:	d0 24       	eor	r13, r0
 156:	0d 90       	ld	r0, X+
 158:	e0 24       	eor	r14, r0
 15a:	0d 90       	ld	r0, X+
 15c:	f0 24       	eor	r15, r0
	
	brtc 2f
 15e:	4e f5       	brtc	.+82     	; 0x1b2 <exit+0x52>

00000160 <exit>:

exit:
	pop r31
 160:	ff 91       	pop	r31
	pop r30
 162:	ef 91       	pop	r30
	.irp row, 0, 1, 2, 3
			.irp col, 0, 1, 2, 3
			st Z+, ST\row\col
		.endr
	.endr
 164:	41 93       	st	Z+, r20
 166:	11 92       	st	Z+, r1
 168:	21 92       	st	Z+, r2
 16a:	31 92       	st	Z+, r3
 16c:	41 92       	st	Z+, r4
 16e:	51 92       	st	Z+, r5
 170:	61 92       	st	Z+, r6
 172:	71 92       	st	Z+, r7
 174:	81 92       	st	Z+, r8
 176:	91 92       	st	Z+, r9
 178:	a1 92       	st	Z+, r10
 17a:	b1 92       	st	Z+, r11
 17c:	c1 92       	st	Z+, r12
 17e:	d1 92       	st	Z+, r13
 180:	e1 92       	st	Z+, r14
 182:	f1 92       	st	Z+, r15
	pop r29
 184:	df 91       	pop	r29
	pop r28
 186:	cf 91       	pop	r28
	pop_range 0, 19
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	bf 90       	pop	r11
 19a:	af 90       	pop	r10
 19c:	9f 90       	pop	r9
 19e:	8f 90       	pop	r8
 1a0:	7f 90       	pop	r7
 1a2:	6f 90       	pop	r6
 1a4:	5f 90       	pop	r5
 1a6:	4f 90       	pop	r4
 1a8:	3f 90       	pop	r3
 1aa:	2f 90       	pop	r2
 1ac:	1f 90       	pop	r1
 1ae:	0f 90       	pop	r0
	ret
 1b0:	08 95       	ret

2:	dec CTR
 1b2:	8a 95       	dec	r24
	brne 3f
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <exit+0x58>
	breq 4f
 1b6:	89 f0       	breq	.+34     	; 0x1da <exit+0x7a>
	/* encryption loop */ 
	/* Shift Row and Subbyte , Mixcolumns */

3:
	//Shift Row	
	mov T0, ST01                    
 1b8:	01 2d       	mov	r16, r1
	mov ST01, ST11
 1ba:	15 2c       	mov	r1, r5
	mov ST11, ST21
 1bc:	59 2c       	mov	r5, r9
	mov ST21, ST31
 1be:	9d 2c       	mov	r9, r13
	mov ST31, T0
 1c0:	d0 2e       	mov	r13, r16

	mov T0, ST02
 1c2:	02 2d       	mov	r16, r2
	mov T1, ST12                    
 1c4:	16 2d       	mov	r17, r6
	mov ST02, ST22
 1c6:	2a 2c       	mov	r2, r10
	mov ST12, ST32
 1c8:	6e 2c       	mov	r6, r14
	mov ST22, T0
 1ca:	a0 2e       	mov	r10, r16
	mov ST32, T1
 1cc:	e1 2e       	mov	r14, r17

	mov T0, ST33                    
 1ce:	0f 2d       	mov	r16, r15
	mov ST33, ST23
 1d0:	fb 2c       	mov	r15, r11
	mov ST23, ST13
 1d2:	b7 2c       	mov	r11, r7
	mov ST13, ST03
 1d4:	73 2c       	mov	r7, r3
	mov ST03, T0
 1d6:	30 2e       	mov	r3, r16
	mov ST\row\()3, T3
.endr
*/
	/* Shift Row and Subbyte Mixcolumns(rows) done */
	/* add key*/
	rjmp 1b
 1d8:	a2 cf       	rjmp	.-188    	; 0x11e <aes_encrypt_core+0x5c>
	
4:
	mov r30, ST00
 1da:	e4 2f       	mov	r30, r20
	ld ST00, Z
 1dc:	40 81       	ld	r20, Z
	mov r30, ST10
 1de:	e4 2d       	mov	r30, r4
	ld ST10, Z
 1e0:	40 80       	ld	r4, Z
	mov r30, ST20
 1e2:	e8 2d       	mov	r30, r8
	ld ST20, Z
 1e4:	80 80       	ld	r8, Z
	mov r30, ST30
 1e6:	ec 2d       	mov	r30, r12
	ld ST30, Z
 1e8:	c0 80       	ld	r12, Z

	mov r30, ST01
 1ea:	e1 2d       	mov	r30, r1
	ld T0, Z
 1ec:	00 81       	ld	r16, Z
	mov r30, ST11
 1ee:	e5 2d       	mov	r30, r5
	ld ST01, Z
 1f0:	10 80       	ld	r1, Z
	mov r30, ST21
 1f2:	e9 2d       	mov	r30, r9
	ld ST11, Z
 1f4:	50 80       	ld	r5, Z
	mov r30, ST31
 1f6:	ed 2d       	mov	r30, r13
	ld ST21, Z
 1f8:	90 80       	ld	r9, Z
	mov ST31, T0
 1fa:	d0 2e       	mov	r13, r16

	mov r30, ST02
 1fc:	e2 2d       	mov	r30, r2
	ld T0, Z
 1fe:	00 81       	ld	r16, Z
	mov r30, ST12
 200:	e6 2d       	mov	r30, r6
	ld T1, Z
 202:	10 81       	ld	r17, Z
	mov r30, ST22
 204:	ea 2d       	mov	r30, r10
	ld ST02, Z
 206:	20 80       	ld	r2, Z
	mov r30, ST32
 208:	ee 2d       	mov	r30, r14
	ld ST12, Z
 20a:	60 80       	ld	r6, Z
	mov ST22, T0
 20c:	a0 2e       	mov	r10, r16
	mov ST32, T1
 20e:	e1 2e       	mov	r14, r17

	mov r30, ST03
 210:	e3 2d       	mov	r30, r3
	ld T0, Z
 212:	00 81       	ld	r16, Z
	mov r30, ST33
 214:	ef 2d       	mov	r30, r15
	ld  ST03, Z
 216:	30 80       	ld	r3, Z
	mov r30, ST23
 218:	eb 2d       	mov	r30, r11
	ld ST33, Z
 21a:	f0 80       	ld	r15, Z
	mov r30, ST13
 21c:	e7 2d       	mov	r30, r7
	ld ST23, Z
 21e:	b0 80       	ld	r11, Z
	mov ST13, T0
 220:	70 2e       	mov	r7, r16
		
	set
 222:	68 94       	set
	/* mixcols (or rows in our case) */
	rjmp 1b
 224:	7c cf       	rjmp	.-264    	; 0x11e <aes_encrypt_core+0x5c>

00000226 <aes256_init>:

.text

.global aes256_init
aes256_init:
	movw r20, r22
 226:	ab 01       	movw	r20, r22
	ldi r23, hi8(256)
 228:	71 e0       	ldi	r23, 0x01	; 1
	ldi r22, lo8(256)
 22a:	60 e0       	ldi	r22, 0x00	; 0
	rjmp aes_init
 22c:	07 c0       	rjmp	.+14     	; 0x23c <aes_init>

0000022e <aes192_init>:
	
.global aes192_init
aes192_init:
	movw r20, r22
 22e:	ab 01       	movw	r20, r22
	ldi r23, hi8(192)
 230:	70 e0       	ldi	r23, 0x00	; 0
	ldi r22, lo8(192)
 232:	60 ec       	ldi	r22, 0xC0	; 192
	rjmp aes_init
 234:	03 c0       	rjmp	.+6      	; 0x23c <aes_init>

00000236 <aes128_init>:
	
.global aes128_init
aes128_init:
	movw r20, r22
 236:	ab 01       	movw	r20, r22
	clr r23
 238:	77 27       	eor	r23, r23
	ldi r22, 128
 23a:	60 e8       	ldi	r22, 0x80	; 128

0000023c <aes_init>:
 * param keysize_b: r22:r23
 * param ctx:       r20:r21
 */
.global aes_init
aes_init:
	push_range 14, 17
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
	push r28
 244:	cf 93       	push	r28
	push r29
 246:	df 93       	push	r29
	movw r30, r20
 248:	fa 01       	movw	r30, r20
	movw r28, r20
 24a:	ea 01       	movw	r28, r20
	movw r26, r24
 24c:	dc 01       	movw	r26, r24
	lsr r23
 24e:	76 95       	lsr	r23
	ror r22
 250:	67 95       	ror	r22
	lsr r22
 252:	66 95       	lsr	r22
	lsr r22 /* r22 contains keysize_b/8 */
 254:	66 95       	lsr	r22
	mov C1, r22
 256:	26 2f       	mov	r18, r22

1:	/* copy key to ctx */ 
	ld r0, X+
 258:	0d 90       	ld	r0, X+
	st Z+, r0
 25a:	01 92       	st	Z+, r0
	dec C1
 25c:	2a 95       	dec	r18
	brne 1b
 25e:	e1 f7       	brne	.-8      	; 0x258 <aes_init+0x1c>
	
	lsr NK
 260:	66 95       	lsr	r22
	lsr NK
 262:	66 95       	lsr	r22
	bst NK,3 /* set T if NK==8 */
 264:	63 fb       	bst	r22, 3
	mov NEXT_NK, NK
 266:	36 2f       	mov	r19, r22
	mov HI, NK
 268:	76 2f       	mov	r23, r22
	subi HI, -7
 26a:	79 5f       	subi	r23, 0xF9	; 249
	lsl HI
 26c:	77 0f       	add	r23, r23
	lsl HI
 26e:	77 0f       	add	r23, r23
	movw r26, r30
 270:	df 01       	movw	r26, r30
	sbiw r26, 4
 272:	14 97       	sbiw	r26, 0x04	; 4
	mov C1, NK
 274:	26 2f       	mov	r18, r22
	ldi r31, hi8(SBOX_TABLE)
 276:	f3 e0       	ldi	r31, 0x03	; 3
	movw SBOX_SAVE0, r30
 278:	7f 01       	movw	r14, r30
	ldi XRC, 1
 27a:	11 e0       	ldi	r17, 0x01	; 1
1:	
	ld T0, X+
 27c:	4d 91       	ld	r20, X+
	ld T1, X+
 27e:	5d 91       	ld	r21, X+
	ld T2, X+
 280:	8d 91       	ld	r24, X+
	ld T3, X+
 282:	9d 91       	ld	r25, X+
	cp NEXT_NK, C1
 284:	32 17       	cp	r19, r18
	breq 2f 
 286:	79 f0       	breq	.+30     	; 0x2a6 <aes_init+0x6a>
	brtc 5f
 288:	ee f4       	brtc	.+58     	; 0x2c4 <aes_init+0x88>
	mov r16, C1
 28a:	02 2f       	mov	r16, r18
	andi r16, 0x07
 28c:	07 70       	andi	r16, 0x07	; 7
	cpi r16, 0x04
 28e:	04 30       	cpi	r16, 0x04	; 4
	brne 5f
 290:	c9 f4       	brne	.+50     	; 0x2c4 <aes_init+0x88>
	movw r30, SBOX_SAVE0
 292:	f7 01       	movw	r30, r14
	mov r30, T0
 294:	e4 2f       	mov	r30, r20
	ld T0, Z
 296:	40 81       	ld	r20, Z

	mov r30, T1
 298:	e5 2f       	mov	r30, r21
	ld T1, Z
 29a:	50 81       	ld	r21, Z

	mov r30, T2
 29c:	e8 2f       	mov	r30, r24
	ld T2, Z
 29e:	80 81       	ld	r24, Z

	mov r30, T3
 2a0:	e9 2f       	mov	r30, r25
	ld T3, Z
 2a2:	90 81       	ld	r25, Z

	rjmp 5f
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <aes_init+0x88>
2:
	add NEXT_NK, NK
 2a6:	36 0f       	add	r19, r22
	movw r30, SBOX_SAVE0
 2a8:	f7 01       	movw	r30, r14
	mov r30, T0
 2aa:	e4 2f       	mov	r30, r20
	ld r16, Z
 2ac:	00 81       	ld	r16, Z

	mov r30, T1
 2ae:	e5 2f       	mov	r30, r21
	ld T0, Z
 2b0:	40 81       	ld	r20, Z

	mov r30, T2
 2b2:	e8 2f       	mov	r30, r24
	ld T1, Z
 2b4:	50 81       	ld	r21, Z

	mov r30, T3
 2b6:	e9 2f       	mov	r30, r25
	ld T2, Z
 2b8:	80 81       	ld	r24, Z

	mov T3, r16
 2ba:	90 2f       	mov	r25, r16
	eor T0, XRC
 2bc:	41 27       	eor	r20, r17
	lsl XRC
 2be:	11 0f       	add	r17, r17
	brcc 3f
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <aes_init+0x88>
	ldi XRC, 0x1b
 2c2:	1b e1       	ldi	r17, 0x1B	; 27
3:
5:	
	movw r30, r26
 2c4:	fd 01       	movw	r30, r26

	ld r0, Y+
 2c6:	09 90       	ld	r0, Y+
	eor r0, T0
 2c8:	04 26       	eor	r0, r20
	st Z+, r0 
 2ca:	01 92       	st	Z+, r0
	ld r0, Y+
 2cc:	09 90       	ld	r0, Y+
	eor r0 ,T1
 2ce:	05 26       	eor	r0, r21
	st Z+, r0
 2d0:	01 92       	st	Z+, r0
	ld r0, Y+
 2d2:	09 90       	ld	r0, Y+
	eor r0, T2
 2d4:	08 26       	eor	r0, r24
	st Z+, r0
 2d6:	01 92       	st	Z+, r0
	ld r0, Y+
 2d8:	09 90       	ld	r0, Y+
	eor r0, T3
 2da:	09 26       	eor	r0, r25
	st Z+, r0
 2dc:	01 92       	st	Z+, r0
	
	inc C1
 2de:	23 95       	inc	r18
	cp C1, HI
 2e0:	27 17       	cp	r18, r23
	breq 6f
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <aes_init+0xaa>
	rjmp 1b
 2e4:	cb cf       	rjmp	.-106    	; 0x27c <aes_init+0x40>
6:	
	clt
 2e6:	e8 94       	clt
	pop r29
 2e8:	df 91       	pop	r29
	pop r28
 2ea:	cf 91       	pop	r28
	pop_range 14, 17
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	08 95       	ret

000002f6 <main>:

#include <avr/io.h>
#include "aes_types.h"

int main(void)
{
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	c0 5d       	subi	r28, 0xD0	; 208
 300:	d1 09       	sbc	r29, r1
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    while (1) 
    {
		u8 key[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
 30c:	20 e1       	ldi	r18, 0x10	; 16
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	f4 e0       	ldi	r31, 0x04	; 4
 312:	ce 01       	movw	r24, r28
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	dc 01       	movw	r26, r24
 318:	01 90       	ld	r0, Z+
 31a:	0d 92       	st	X+, r0
 31c:	2a 95       	dec	r18
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x22>
		u8 IV[16] = {0,};
 320:	20 e1       	ldi	r18, 0x10	; 16
 322:	ce 01       	movw	r24, r28
 324:	41 96       	adiw	r24, 0x11	; 17
 326:	fc 01       	movw	r30, r24
 328:	32 2f       	mov	r19, r18
 32a:	11 92       	st	Z+, r1
 32c:	3a 95       	dec	r19
 32e:	e9 f7       	brne	.-6      	; 0x32a <main+0x34>
		aes128_ctx_t aes_test;
		aes128_init(key, &aes_test);
 330:	ce 01       	movw	r24, r28
 332:	81 96       	adiw	r24, 0x21	; 33
 334:	bc 01       	movw	r22, r24
 336:	ce 01       	movw	r24, r28
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	7d df       	rcall	.-262    	; 0x236 <aes128_init>
		aes128_enc(IV,&aes_test);
 33c:	9e 01       	movw	r18, r28
 33e:	2f 5d       	subi	r18, 0xDF	; 223
 340:	3f 4f       	sbci	r19, 0xFF	; 255
 342:	ce 01       	movw	r24, r28
 344:	41 96       	adiw	r24, 0x11	; 17
 346:	b9 01       	movw	r22, r18
 348:	bb de       	rcall	.-650    	; 0xc0 <aes128_enc>
    }
 34a:	e0 cf       	rjmp	.-64     	; 0x30c <main+0x16>

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
