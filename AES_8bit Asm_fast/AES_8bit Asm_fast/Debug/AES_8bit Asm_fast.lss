
AES_8bit Asm_fast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000310  00800100  000007a4  000008a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a4  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1f  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000809  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf6  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  00002ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e7  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00002edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	14 e0       	ldi	r17, 0x04	; 4
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	39 d3       	rcall	.+1650   	; 0x726 <main>
  b4:	75 c3       	rjmp	.+1770   	; 0x7a0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <aes256_enc>:
 * param b: r22
 * param reducer: r0
 */
.global aes256_enc
aes256_enc:
	ldi r20, 14
  b8:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <aes_encrypt_core>

000000bc <aes192_enc>:

.global aes192_enc
aes192_enc:
	ldi r20, 12
  bc:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core
  be:	01 c0       	rjmp	.+2      	; 0xc2 <aes_encrypt_core>

000000c0 <aes128_enc>:

.global aes128_enc
aes128_enc:
	ldi r20, 10
  c0:	4a e0       	ldi	r20, 0x0A	; 10

000000c2 <aes_encrypt_core>:
 * param rounds: r20   
 */
.global aes_encrypt_core
aes_encrypt_core:
	//push_range 0, 15
	push r28
  c2:	cf 93       	push	r28
	push r29
  c4:	df 93       	push	r29
	push r24
  c6:	8f 93       	push	r24
	push r25
  c8:	9f 93       	push	r25
	movw r26, r22
  ca:	db 01       	movw	r26, r22
	movw r30, r24
  cc:	fc 01       	movw	r30, r24
	mov  CTR, r20
  ce:	84 2f       	mov	r24, r20
	clt
  d0:	e8 94       	clt
	
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld ST\row\col, Z+
		.endr
	.endr
  d2:	01 90       	ld	r0, Z+
  d4:	11 90       	ld	r1, Z+
  d6:	21 90       	ld	r2, Z+
  d8:	31 90       	ld	r3, Z+
  da:	41 90       	ld	r4, Z+
  dc:	51 90       	ld	r5, Z+
  de:	61 90       	ld	r6, Z+
  e0:	71 90       	ld	r7, Z+
  e2:	81 90       	ld	r8, Z+
  e4:	91 90       	ld	r9, Z+
  e6:	a1 90       	ld	r10, Z+
  e8:	b1 90       	ld	r11, Z+
  ea:	c1 90       	ld	r12, Z+
  ec:	d1 90       	ld	r13, Z+
  ee:	e1 90       	ld	r14, Z+
  f0:	f1 90       	ld	r15, Z+
	

	ldi r31, hi8(SBOX_TABLE)	
  f2:	f1 e0       	ldi	r31, 0x01	; 1
	ldi r29, hi8(MIX2_TABLE)
  f4:	d2 e0       	ldi	r29, 0x02	; 2
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld r16, X+
			eor ST\row\col, r16
		.endr
	.endr
  f6:	0d 91       	ld	r16, X+
  f8:	00 26       	eor	r0, r16
  fa:	0d 91       	ld	r16, X+
  fc:	10 26       	eor	r1, r16
  fe:	0d 91       	ld	r16, X+
 100:	20 26       	eor	r2, r16
 102:	0d 91       	ld	r16, X+
 104:	30 26       	eor	r3, r16
 106:	0d 91       	ld	r16, X+
 108:	40 26       	eor	r4, r16
 10a:	0d 91       	ld	r16, X+
 10c:	50 26       	eor	r5, r16
 10e:	0d 91       	ld	r16, X+
 110:	60 26       	eor	r6, r16
 112:	0d 91       	ld	r16, X+
 114:	70 26       	eor	r7, r16
 116:	0d 91       	ld	r16, X+
 118:	80 26       	eor	r8, r16
 11a:	0d 91       	ld	r16, X+
 11c:	90 26       	eor	r9, r16
 11e:	0d 91       	ld	r16, X+
 120:	a0 26       	eor	r10, r16
 122:	0d 91       	ld	r16, X+
 124:	b0 26       	eor	r11, r16
 126:	0d 91       	ld	r16, X+
 128:	c0 26       	eor	r12, r16
 12a:	0d 91       	ld	r16, X+
 12c:	d0 26       	eor	r13, r16
 12e:	0d 91       	ld	r16, X+
 130:	e0 26       	eor	r14, r16
 132:	0d 91       	ld	r16, X+
 134:	f0 26       	eor	r15, r16
	
	brtc 2f
 136:	ae f4       	brtc	.+42     	; 0x162 <exit+0x2a>

00000138 <exit>:

exit:
	pop r31
 138:	ff 91       	pop	r31
	pop r30
 13a:	ef 91       	pop	r30
	.irp row, 0, 1, 2, 3
			.irp col, 0, 1, 2, 3
			st Z+, ST\row\col
		.endr
	.endr
 13c:	01 92       	st	Z+, r0
 13e:	11 92       	st	Z+, r1
 140:	21 92       	st	Z+, r2
 142:	31 92       	st	Z+, r3
 144:	41 92       	st	Z+, r4
 146:	51 92       	st	Z+, r5
 148:	61 92       	st	Z+, r6
 14a:	71 92       	st	Z+, r7
 14c:	81 92       	st	Z+, r8
 14e:	91 92       	st	Z+, r9
 150:	a1 92       	st	Z+, r10
 152:	b1 92       	st	Z+, r11
 154:	c1 92       	st	Z+, r12
 156:	d1 92       	st	Z+, r13
 158:	e1 92       	st	Z+, r14
 15a:	f1 92       	st	Z+, r15
	pop r29
 15c:	df 91       	pop	r29
	pop r28
 15e:	cf 91       	pop	r28
	//pop_range 0, 15
	ret
 160:	08 95       	ret

2:	
	dec CTR
 162:	8a 95       	dec	r24
	brne 3f
 164:	39 f5       	brne	.+78     	; 0x1b4 <exit+0x7c>
	breq 4f
 166:	01 f0       	breq	.+0      	; 0x168 <exit+0x30>

	/* encryption loop */ 
	/* Shift Row and Subbyte , Mixcolumns */
4:
	mov r30, ST00
 168:	e0 2d       	mov	r30, r0
	ld ST00, Z
 16a:	00 80       	ld	r0, Z
	mov r30, ST10
 16c:	e4 2d       	mov	r30, r4
	ld ST10, Z
 16e:	40 80       	ld	r4, Z
	mov r30, ST20
 170:	e8 2d       	mov	r30, r8
	ld ST20, Z
 172:	80 80       	ld	r8, Z
	mov r30, ST30
 174:	ec 2d       	mov	r30, r12
	ld ST30, Z
 176:	c0 80       	ld	r12, Z

	mov r30, ST01
 178:	e1 2d       	mov	r30, r1
	ld T0, Z
 17a:	40 81       	ld	r20, Z
	mov r30, ST11
 17c:	e5 2d       	mov	r30, r5
	ld ST01, Z
 17e:	10 80       	ld	r1, Z
	mov r30, ST21
 180:	e9 2d       	mov	r30, r9
	ld ST11, Z
 182:	50 80       	ld	r5, Z
	mov r30, ST31
 184:	ed 2d       	mov	r30, r13
	ld ST21, Z
 186:	90 80       	ld	r9, Z
	mov ST31, T0
 188:	d4 2e       	mov	r13, r20

	mov r30, ST02
 18a:	e2 2d       	mov	r30, r2
	ld T0, Z
 18c:	40 81       	ld	r20, Z
	mov r30, ST12
 18e:	e6 2d       	mov	r30, r6
	ld T1, Z
 190:	50 81       	ld	r21, Z
	mov r30, ST22
 192:	ea 2d       	mov	r30, r10
	ld ST02, Z
 194:	20 80       	ld	r2, Z
	mov r30, ST32
 196:	ee 2d       	mov	r30, r14
	ld ST12, Z
 198:	60 80       	ld	r6, Z
	mov ST22, T0
 19a:	a4 2e       	mov	r10, r20
	mov ST32, T1
 19c:	e5 2e       	mov	r14, r21

	mov r30, ST03
 19e:	e3 2d       	mov	r30, r3
	ld T0, Z
 1a0:	40 81       	ld	r20, Z
	mov r30, ST33
 1a2:	ef 2d       	mov	r30, r15
	ld  ST03, Z
 1a4:	30 80       	ld	r3, Z
	mov r30, ST23
 1a6:	eb 2d       	mov	r30, r11
	ld ST33, Z
 1a8:	f0 80       	ld	r15, Z
	mov r30, ST13
 1aa:	e7 2d       	mov	r30, r7
	ld ST23, Z
 1ac:	b0 80       	ld	r11, Z
	mov ST13, T0
 1ae:	74 2e       	mov	r7, r20
		
	set
 1b0:	68 94       	set
	/* mixcols (or rows in our case) */
	rjmp 1b
 1b2:	a1 cf       	rjmp	.-190    	; 0xf6 <aes_encrypt_core+0x34>

3:
	
	//! 1번째 열 시작
	mov r30, ST00 
 1b4:	e0 2d       	mov	r30, r0
	ld	M1, Z 
 1b6:	10 81       	ld	r17, Z
	mov M2, M1
 1b8:	21 2f       	mov	r18, r17
	mov M3, M2 ; 1옮겨주기 subbyte 상태로
 1ba:	32 2f       	mov	r19, r18
	mov r28, ST00
 1bc:	c0 2d       	mov	r28, r0
	ld  M0, Y
 1be:	08 81       	ld	r16, Y
	eor M3, M0 ; 2, 1, 1, 3 완료
 1c0:	30 27       	eor	r19, r16

	mov r30, ST11
 1c2:	e5 2d       	mov	r30, r5
	ld	T0, Z
 1c4:	40 81       	ld	r20, Z
	eor M0, T0
 1c6:	04 27       	eor	r16, r20
	eor M2, T0
 1c8:	24 27       	eor	r18, r20
	eor M3, T0 ;  1옮겨주기 subbyte 상태로
 1ca:	34 27       	eor	r19, r20
	mov r28, ST11
 1cc:	c5 2d       	mov	r28, r5
	ld  T0, Y
 1ce:	48 81       	ld	r20, Y
	eor M0, T0
 1d0:	04 27       	eor	r16, r20
	eor M1, T0 ;3, 2, 2, 1 완료
 1d2:	14 27       	eor	r17, r20

	mov r30, ST22
 1d4:	ea 2d       	mov	r30, r10
	ld	T0, Z
 1d6:	40 81       	ld	r20, Z
	eor M0, T0
 1d8:	04 27       	eor	r16, r20
	eor M1, T0
 1da:	14 27       	eor	r17, r20
	eor M3, T0 ;  1옮겨주기 subbyte 상태로
 1dc:	34 27       	eor	r19, r20
	mov r28, ST22
 1de:	ca 2d       	mov	r28, r10
	ld  T0, Y
 1e0:	48 81       	ld	r20, Y
	eor M1, T0
 1e2:	14 27       	eor	r17, r20
	eor M2, T0 ;1, 3, 2, 1 완료
 1e4:	24 27       	eor	r18, r20

	mov r30, ST33
 1e6:	ef 2d       	mov	r30, r15
	ld	T0, Z
 1e8:	40 81       	ld	r20, Z
	eor M0, T0
 1ea:	04 27       	eor	r16, r20
	eor M1, T0
 1ec:	14 27       	eor	r17, r20
	eor M2, T0 ;  1옮겨주기 subbyte 상태로
 1ee:	24 27       	eor	r18, r20
	mov r28, ST33
 1f0:	cf 2d       	mov	r28, r15
	ld  T0, Y
 1f2:	48 81       	ld	r20, Y
	eor M2, T0
 1f4:	24 27       	eor	r18, r20
	eor M3, T0 ;1, 1, 3, 2 완료
 1f6:	34 27       	eor	r19, r20

	mov ST00, M0
 1f8:	00 2e       	mov	r0, r16
	//! 1번째 열 완료

	//! 2번째 열 시작
	mov r30, ST10 
 1fa:	e4 2d       	mov	r30, r4
	ld	T1, Z 
 1fc:	50 81       	ld	r21, Z
	mov T2, T1
 1fe:	65 2f       	mov	r22, r21
	mov T3, T2 ; 1옮겨주기 subbyte 상태로
 200:	76 2f       	mov	r23, r22
	mov r28, ST10
 202:	c4 2d       	mov	r28, r4
	ld  T0, Y
 204:	48 81       	ld	r20, Y
	eor T3, T0 ; 2, 1, 1, 3 완료
 206:	74 27       	eor	r23, r20

	mov r30, ST21
 208:	e9 2d       	mov	r30, r9
	ld	M0, Z
 20a:	00 81       	ld	r16, Z
	eor T0, M0
 20c:	40 27       	eor	r20, r16
	eor T2, M0
 20e:	60 27       	eor	r22, r16
	eor T3, M0 ;  1옮겨주기 subbyte 상태로
 210:	70 27       	eor	r23, r16
	mov r28, ST21
 212:	c9 2d       	mov	r28, r9
	ld  M0, Y
 214:	08 81       	ld	r16, Y
	eor T0, M0
 216:	40 27       	eor	r20, r16
	eor T1, M0 ;3, 2, 2, 1 완료
 218:	50 27       	eor	r21, r16

	mov r30, ST32
 21a:	ee 2d       	mov	r30, r14
	ld	M0, Z
 21c:	00 81       	ld	r16, Z
	eor T0, M0
 21e:	40 27       	eor	r20, r16
	eor T1, M0
 220:	50 27       	eor	r21, r16
	eor T3, M0 ;  1옮겨주기 subbyte 상태로
 222:	70 27       	eor	r23, r16
	mov r28, ST32
 224:	ce 2d       	mov	r28, r14
	ld  M0, Y
 226:	08 81       	ld	r16, Y
	eor T1, M0
 228:	50 27       	eor	r21, r16
	eor T2, M0 ;1, 3, 2, 1 완료
 22a:	60 27       	eor	r22, r16

	mov r30, ST03
 22c:	e3 2d       	mov	r30, r3
	ld	M0, Z
 22e:	00 81       	ld	r16, Z
	eor T0, M0
 230:	40 27       	eor	r20, r16
	eor T1, M0
 232:	50 27       	eor	r21, r16
	eor T2, M0 ;  1옮겨주기 subbyte 상태로
 234:	60 27       	eor	r22, r16
	mov r28, ST03
 236:	c3 2d       	mov	r28, r3
	ld  M0, Y
 238:	08 81       	ld	r16, Y
	eor T2, M0
 23a:	60 27       	eor	r22, r16
	eor T3, M0 ;1, 1, 3, 2 완료
 23c:	70 27       	eor	r23, r16

	mov ST10, T0
 23e:	44 2e       	mov	r4, r20
	mov ST11, T1
 240:	55 2e       	mov	r5, r21
	mov ST03, M3
 242:	33 2e       	mov	r3, r19
	//! 2번째 열 완료

	//! 3번째 열 시작
	mov r30, ST20 
 244:	e8 2d       	mov	r30, r8
	ld	T0, Z 
 246:	40 81       	ld	r20, Z
	mov T1, T0
 248:	54 2f       	mov	r21, r20
	mov M3, T1 ; 1옮겨주기 subbyte 상태로
 24a:	35 2f       	mov	r19, r21
	mov r28, ST20
 24c:	c8 2d       	mov	r28, r8
	ld  M0, Y
 24e:	08 81       	ld	r16, Y
	eor M3, M0 ; 2, 1, 1, 3 완료
 250:	30 27       	eor	r19, r16

	mov r30, ST31
 252:	ed 2d       	mov	r30, r13
	ld	r25, Z
 254:	90 81       	ld	r25, Z
	eor M0, r25
 256:	09 27       	eor	r16, r25
	eor T1, r25
 258:	59 27       	eor	r21, r25
	eor M3, r25 ;  1옮겨주기 subbyte 상태로
 25a:	39 27       	eor	r19, r25
	mov r28, ST31
 25c:	cd 2d       	mov	r28, r13
	ld  r25, Y
 25e:	98 81       	ld	r25, Y
	eor M0, r25
 260:	09 27       	eor	r16, r25
	eor T0, r25 ;3, 2, 2, 1 완료
 262:	49 27       	eor	r20, r25

	mov r30, ST02
 264:	e2 2d       	mov	r30, r2
	ld	r25, Z
 266:	90 81       	ld	r25, Z
	eor M0, r25
 268:	09 27       	eor	r16, r25
	eor T0, r25
 26a:	49 27       	eor	r20, r25
	eor M3, r25;  1옮겨주기 subbyte 상태로
 26c:	39 27       	eor	r19, r25
	mov r28, ST02
 26e:	c2 2d       	mov	r28, r2
	ld  r25, Y
 270:	98 81       	ld	r25, Y
	eor T0, r25
 272:	49 27       	eor	r20, r25
	eor T1, r25;1, 3, 2, 1 완료
 274:	59 27       	eor	r21, r25

	mov r30, ST13
 276:	e7 2d       	mov	r30, r7
	ld	r25, Z
 278:	90 81       	ld	r25, Z
	eor M0, r25
 27a:	09 27       	eor	r16, r25
	eor T0, r25
 27c:	49 27       	eor	r20, r25
	eor T1, r25 ;  1옮겨주기 subbyte 상태로
 27e:	59 27       	eor	r21, r25
	mov r28, ST13
 280:	c7 2d       	mov	r28, r7
	ld  r25, Y
 282:	98 81       	ld	r25, Y
	eor T1, r25
 284:	59 27       	eor	r21, r25
	eor M3, r25 ;1, 1, 3, 2 완료
 286:	39 27       	eor	r19, r25

	mov ST20, M0
 288:	80 2e       	mov	r8, r16
	mov ST21, T0
 28a:	94 2e       	mov	r9, r20
	mov ST22, T1
 28c:	a5 2e       	mov	r10, r21
	mov ST13, T3
 28e:	77 2e       	mov	r7, r23
	//! 3번째 열 완료



	//! 4번째 열 시작
	mov r30, ST30 
 290:	ec 2d       	mov	r30, r12
	ld	T1, Z 
 292:	50 81       	ld	r21, Z
	mov T3, T1
 294:	75 2f       	mov	r23, r21
	mov r25, T3 ; 1옮겨주기 subbyte 상태로
 296:	97 2f       	mov	r25, r23
	mov r28, ST30
 298:	cc 2d       	mov	r28, r12
	ld  T0, Y
 29a:	48 81       	ld	r20, Y
	eor r25, T0 ; 2, 1, 1, 3 완료
 29c:	94 27       	eor	r25, r20

	mov r30, ST01
 29e:	e1 2d       	mov	r30, r1
	ld	M0, Z
 2a0:	00 81       	ld	r16, Z
	eor T0, M0
 2a2:	40 27       	eor	r20, r16
	eor T3, M0
 2a4:	70 27       	eor	r23, r16
	eor r25, M0 ;  1옮겨주기 subbyte 상태로
 2a6:	90 27       	eor	r25, r16
	mov r28, ST01
 2a8:	c1 2d       	mov	r28, r1
	ld  M0, Y
 2aa:	08 81       	ld	r16, Y
	eor T0, M0
 2ac:	40 27       	eor	r20, r16
	eor T1, M0 ;3, 2, 2, 1 완료
 2ae:	50 27       	eor	r21, r16

	mov r30, ST12
 2b0:	e6 2d       	mov	r30, r6
	ld	M0, Z
 2b2:	00 81       	ld	r16, Z
	eor T0, M0
 2b4:	40 27       	eor	r20, r16
	eor T1, M0
 2b6:	50 27       	eor	r21, r16
	eor r25, M0 ;  1옮겨주기 subbyte 상태로
 2b8:	90 27       	eor	r25, r16
	mov r28, ST12
 2ba:	c6 2d       	mov	r28, r6
	ld  M0, Y
 2bc:	08 81       	ld	r16, Y
	eor T1, M0
 2be:	50 27       	eor	r21, r16
	eor T3, M0 ;1, 3, 2, 1 완료
 2c0:	70 27       	eor	r23, r16

	mov r30, ST23
 2c2:	eb 2d       	mov	r30, r11
	ld	M0, Z
 2c4:	00 81       	ld	r16, Z
	eor T0, M0
 2c6:	40 27       	eor	r20, r16
	eor T1, M0
 2c8:	50 27       	eor	r21, r16
	eor T3, M0 ;  1옮겨주기 subbyte 상태로
 2ca:	70 27       	eor	r23, r16
	mov r28, ST23
 2cc:	cb 2d       	mov	r28, r11
	ld  M0, Y
 2ce:	08 81       	ld	r16, Y
	eor T3, M0
 2d0:	70 27       	eor	r23, r16
	eor r25, M0 ;1, 1, 3, 2 완료
 2d2:	90 27       	eor	r25, r16

	mov ST30, T0
 2d4:	c4 2e       	mov	r12, r20
	mov ST31, T1
 2d6:	d5 2e       	mov	r13, r21
	mov ST32, T3
 2d8:	e7 2e       	mov	r14, r23
	mov ST33, r25
 2da:	f9 2e       	mov	r15, r25
	mov ST01, M1
 2dc:	11 2e       	mov	r1, r17
	mov ST02, M2
 2de:	22 2e       	mov	r2, r18
	mov ST12, T2
 2e0:	66 2e       	mov	r6, r22
	mov ST23, M3
 2e2:	b3 2e       	mov	r11, r19
	//! 4번째 열 완료

	/* add key*/
	rjmp 1b
 2e4:	08 cf       	rjmp	.-496    	; 0xf6 <aes_encrypt_core+0x34>

000002e6 <aes256_init>:

.text

.global aes256_init
aes256_init:
	movw r20, r22
 2e6:	ab 01       	movw	r20, r22
	ldi r23, hi8(256)
 2e8:	71 e0       	ldi	r23, 0x01	; 1
	ldi r22, lo8(256)
 2ea:	60 e0       	ldi	r22, 0x00	; 0
	rjmp aes_init
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <aes_init>

000002ee <aes192_init>:
	
.global aes192_init
aes192_init:
	movw r20, r22
 2ee:	ab 01       	movw	r20, r22
	ldi r23, hi8(192)
 2f0:	70 e0       	ldi	r23, 0x00	; 0
	ldi r22, lo8(192)
 2f2:	60 ec       	ldi	r22, 0xC0	; 192
	rjmp aes_init
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <aes_init>

000002f6 <aes128_init>:
	
.global aes128_init
aes128_init:
	movw r20, r22
 2f6:	ab 01       	movw	r20, r22
	clr r23
 2f8:	77 27       	eor	r23, r23
	ldi r22, 128
 2fa:	60 e8       	ldi	r22, 0x80	; 128

000002fc <aes_init>:
 * param keysize_b: r22:r23
 * param ctx:       r20:r21
 */
.global aes_init
aes_init:
	push_range 14, 17
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
	push r28
 304:	cf 93       	push	r28
	push r29
 306:	df 93       	push	r29
	movw r30, r20
 308:	fa 01       	movw	r30, r20
	movw r28, r20
 30a:	ea 01       	movw	r28, r20
	movw r26, r24
 30c:	dc 01       	movw	r26, r24
	lsr r23
 30e:	76 95       	lsr	r23
	ror r22
 310:	67 95       	ror	r22
	lsr r22
 312:	66 95       	lsr	r22
	lsr r22 /* r22 contains keysize_b/8 */
 314:	66 95       	lsr	r22
	mov C1, r22
 316:	26 2f       	mov	r18, r22

1:	/* copy key to ctx */ 
	ld r0, X+
 318:	0d 90       	ld	r0, X+
	st Z+, r0
 31a:	01 92       	st	Z+, r0
	dec C1
 31c:	2a 95       	dec	r18
	brne 1b
 31e:	e1 f7       	brne	.-8      	; 0x318 <aes_init+0x1c>
	
	lsr NK
 320:	66 95       	lsr	r22
	lsr NK
 322:	66 95       	lsr	r22
	bst NK,3 /* set T if NK==8 */
 324:	63 fb       	bst	r22, 3
	mov NEXT_NK, NK
 326:	36 2f       	mov	r19, r22
	mov HI, NK
 328:	76 2f       	mov	r23, r22
	subi HI, -7
 32a:	79 5f       	subi	r23, 0xF9	; 249
	lsl HI
 32c:	77 0f       	add	r23, r23
	lsl HI
 32e:	77 0f       	add	r23, r23
	movw r26, r30
 330:	df 01       	movw	r26, r30
	sbiw r26, 4
 332:	14 97       	sbiw	r26, 0x04	; 4
	mov C1, NK
 334:	26 2f       	mov	r18, r22
	ldi r31, hi8(SBOX_TABLE)
 336:	f3 e0       	ldi	r31, 0x03	; 3
	movw SBOX_SAVE0, r30
 338:	7f 01       	movw	r14, r30
	ldi XRC, 1
 33a:	11 e0       	ldi	r17, 0x01	; 1
1:	
	ld T0, X+
 33c:	4d 91       	ld	r20, X+
	ld T1, X+
 33e:	5d 91       	ld	r21, X+
	ld T2, X+
 340:	8d 91       	ld	r24, X+
	ld T3, X+
 342:	9d 91       	ld	r25, X+
	cp NEXT_NK, C1
 344:	32 17       	cp	r19, r18
	breq 2f 
 346:	79 f0       	breq	.+30     	; 0x366 <aes_init+0x6a>
	brtc 5f
 348:	ee f4       	brtc	.+58     	; 0x384 <aes_init+0x88>
	mov r16, C1
 34a:	02 2f       	mov	r16, r18
	andi r16, 0x07
 34c:	07 70       	andi	r16, 0x07	; 7
	cpi r16, 0x04
 34e:	04 30       	cpi	r16, 0x04	; 4
	brne 5f
 350:	c9 f4       	brne	.+50     	; 0x384 <aes_init+0x88>
	movw r30, SBOX_SAVE0
 352:	f7 01       	movw	r30, r14
	mov r30, T0
 354:	e4 2f       	mov	r30, r20
	ld T0, Z
 356:	40 81       	ld	r20, Z

	mov r30, T1
 358:	e5 2f       	mov	r30, r21
	ld T1, Z
 35a:	50 81       	ld	r21, Z

	mov r30, T2
 35c:	e8 2f       	mov	r30, r24
	ld T2, Z
 35e:	80 81       	ld	r24, Z

	mov r30, T3
 360:	e9 2f       	mov	r30, r25
	ld T3, Z
 362:	90 81       	ld	r25, Z

	rjmp 5f
 364:	0f c0       	rjmp	.+30     	; 0x384 <aes_init+0x88>
2:
	add NEXT_NK, NK
 366:	36 0f       	add	r19, r22
	movw r30, SBOX_SAVE0
 368:	f7 01       	movw	r30, r14
	mov r30, T0
 36a:	e4 2f       	mov	r30, r20
	ld r16, Z
 36c:	00 81       	ld	r16, Z

	mov r30, T1
 36e:	e5 2f       	mov	r30, r21
	ld T0, Z
 370:	40 81       	ld	r20, Z

	mov r30, T2
 372:	e8 2f       	mov	r30, r24
	ld T1, Z
 374:	50 81       	ld	r21, Z

	mov r30, T3
 376:	e9 2f       	mov	r30, r25
	ld T2, Z
 378:	80 81       	ld	r24, Z

	mov T3, r16
 37a:	90 2f       	mov	r25, r16
	eor T0, XRC
 37c:	41 27       	eor	r20, r17
	lsl XRC
 37e:	11 0f       	add	r17, r17
	brcc 3f
 380:	08 f4       	brcc	.+2      	; 0x384 <aes_init+0x88>
	ldi XRC, 0x1b
 382:	1b e1       	ldi	r17, 0x1B	; 27
3:
5:	
	movw r30, r26
 384:	fd 01       	movw	r30, r26

	ld r0, Y+
 386:	09 90       	ld	r0, Y+
	eor r0, T0
 388:	04 26       	eor	r0, r20
	st Z+, r0 
 38a:	01 92       	st	Z+, r0
	ld r0, Y+
 38c:	09 90       	ld	r0, Y+
	eor r0 ,T1
 38e:	05 26       	eor	r0, r21
	st Z+, r0
 390:	01 92       	st	Z+, r0
	ld r0, Y+
 392:	09 90       	ld	r0, Y+
	eor r0, T2
 394:	08 26       	eor	r0, r24
	st Z+, r0
 396:	01 92       	st	Z+, r0
	ld r0, Y+
 398:	09 90       	ld	r0, Y+
	eor r0, T3
 39a:	09 26       	eor	r0, r25
	st Z+, r0
 39c:	01 92       	st	Z+, r0
	
	inc C1
 39e:	23 95       	inc	r18
	cp C1, HI
 3a0:	27 17       	cp	r18, r23
	breq 6f
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <aes_init+0xaa>
	rjmp 1b
 3a4:	cb cf       	rjmp	.-106    	; 0x33c <aes_init+0x40>
6:	
	clt
 3a6:	e8 94       	clt
	pop r29
 3a8:	df 91       	pop	r29
	pop r28
 3aa:	cf 91       	pop	r28
	pop_range 14, 17
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	08 95       	ret
	...

00000400 <aes_sbox>:
 400:	63 7c       	andi	r22, 0xC3	; 195
 402:	77 7b       	andi	r23, 0xB7	; 183
 404:	f2 6b       	ori	r31, 0xB2	; 178
 406:	6f c5       	rjmp	.+2782   	; 0xee6 <__data_load_end+0x432>
 408:	30 01       	movw	r6, r0
 40a:	67 2b       	or	r22, r23
 40c:	fe d7       	rcall	.+4092   	; 0x140a <__stack+0x30b>
 40e:	ab 76       	andi	r26, 0x6B	; 107
 410:	ca 82       	std	Y+2, r12	; 0x02
 412:	c9 7d       	andi	r28, 0xD9	; 217
 414:	fa 59       	subi	r31, 0x9A	; 154
 416:	47 f0       	brie	.+16     	; 0x428 <aes_sbox+0x28>
 418:	ad d4       	rcall	.+2394   	; 0xd74 <__data_load_end+0x2c0>
 41a:	a2 af       	std	Z+58, r26	; 0x3a
 41c:	9c a4       	ldd	r9, Y+44	; 0x2c
 41e:	72 c0       	rjmp	.+228    	; 0x504 <aes192_enc_origin>
 420:	b7 fd       	sbrc	r27, 7
 422:	93 26       	eor	r9, r19
 424:	36 3f       	cpi	r19, 0xF6	; 246
 426:	f7 cc       	rjmp	.-1554   	; 0xfffffe16 <__eeprom_end+0xff7efe16>
 428:	34 a5       	ldd	r19, Z+44	; 0x2c
 42a:	e5 f1       	brhs	.+120    	; 0x4a4 <aes_sbox+0xa4>
 42c:	71 d8       	rcall	.-3870   	; 0xfffff510 <__eeprom_end+0xff7ef510>
 42e:	31 15       	cp	r19, r1
 430:	04 c7       	rjmp	.+3592   	; 0x123a <__stack+0x13b>
 432:	23 c3       	rjmp	.+1606   	; 0xa7a <_etext+0x2d6>
 434:	18 96       	adiw	r26, 0x08	; 8
 436:	05 9a       	sbi	0x00, 5	; 0
 438:	07 12       	cpse	r0, r23
 43a:	80 e2       	ldi	r24, 0x20	; 32
 43c:	eb 27       	eor	r30, r27
 43e:	b2 75       	andi	r27, 0x52	; 82
 440:	09 83       	std	Y+1, r16	; 0x01
 442:	2c 1a       	sub	r2, r28
 444:	1b 6e       	ori	r17, 0xEB	; 235
 446:	5a a0       	ldd	r5, Y+34	; 0x22
 448:	52 3b       	cpi	r21, 0xB2	; 178
 44a:	d6 b3       	in	r29, 0x16	; 22
 44c:	29 e3       	ldi	r18, 0x39	; 57
 44e:	2f 84       	ldd	r2, Y+15	; 0x0f
 450:	53 d1       	rcall	.+678    	; 0x6f8 <exit+0x158>
 452:	00 ed       	ldi	r16, 0xD0	; 208
 454:	20 fc       	sbrc	r2, 0
 456:	b1 5b       	subi	r27, 0xB1	; 177
 458:	6a cb       	rjmp	.-2348   	; 0xfffffb2e <__eeprom_end+0xff7efb2e>
 45a:	be 39       	cpi	r27, 0x9E	; 158
 45c:	4a 4c       	sbci	r20, 0xCA	; 202
 45e:	58 cf       	rjmp	.-336    	; 0x310 <aes_init+0x14>
 460:	d0 ef       	ldi	r29, 0xF0	; 240
 462:	aa fb       	.word	0xfbaa	; ????
 464:	43 4d       	sbci	r20, 0xD3	; 211
 466:	33 85       	ldd	r19, Z+11	; 0x0b
 468:	45 f9       	bld	r20, 5
 46a:	02 7f       	andi	r16, 0xF2	; 242
 46c:	50 3c       	cpi	r21, 0xC0	; 192
 46e:	9f a8       	ldd	r9, Y+55	; 0x37
 470:	51 a3       	std	Z+33, r21	; 0x21
 472:	40 8f       	std	Z+24, r20	; 0x18
 474:	92 9d       	mul	r25, r2
 476:	38 f5       	brcc	.+78     	; 0x4c6 <aes_sbox+0xc6>
 478:	bc b6       	in	r11, 0x3c	; 60
 47a:	da 21       	and	r29, r10
 47c:	10 ff       	sbrs	r17, 0
 47e:	f3 d2       	rcall	.+1510   	; 0xa66 <_etext+0x2c2>
 480:	cd 0c       	add	r12, r13
 482:	13 ec       	ldi	r17, 0xC3	; 195
 484:	5f 97       	sbiw	r26, 0x1f	; 31
 486:	44 17       	cp	r20, r20
 488:	c4 a7       	std	Z+44, r28	; 0x2c
 48a:	7e 3d       	cpi	r23, 0xDE	; 222
 48c:	64 5d       	subi	r22, 0xD4	; 212
 48e:	19 73       	andi	r17, 0x39	; 57
 490:	60 81       	ld	r22, Z
 492:	4f dc       	rcall	.-1890   	; 0xfffffd32 <__eeprom_end+0xff7efd32>
 494:	22 2a       	or	r2, r18
 496:	90 88       	ldd	r9, Z+16	; 0x10
 498:	46 ee       	ldi	r20, 0xE6	; 230
 49a:	b8 14       	cp	r11, r8
 49c:	de 5e       	subi	r29, 0xEE	; 238
 49e:	0b db       	rcall	.-2538   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 4a0:	e0 32       	cpi	r30, 0x20	; 32
 4a2:	3a 0a       	sbc	r3, r26
 4a4:	49 06       	cpc	r4, r25
 4a6:	24 5c       	subi	r18, 0xC4	; 196
 4a8:	c2 d3       	rcall	.+1924   	; 0xc2e <__data_load_end+0x17a>
 4aa:	ac 62       	ori	r26, 0x2C	; 44
 4ac:	91 95       	neg	r25
 4ae:	e4 79       	andi	r30, 0x94	; 148
 4b0:	e7 c8       	rjmp	.-3634   	; 0xfffff680 <__eeprom_end+0xff7ef680>
 4b2:	37 6d       	ori	r19, 0xD7	; 215
 4b4:	8d d5       	rcall	.+2842   	; 0xfd0 <__data_load_end+0x51c>
 4b6:	4e a9       	ldd	r20, Y+54	; 0x36
 4b8:	6c 56       	subi	r22, 0x6C	; 108
 4ba:	f4 ea       	ldi	r31, 0xA4	; 164
 4bc:	65 7a       	andi	r22, 0xA5	; 165
 4be:	ae 08       	sbc	r10, r14
 4c0:	ba 78       	andi	r27, 0x8A	; 138
 4c2:	25 2e       	mov	r2, r21
 4c4:	1c a6       	std	Y+44, r1	; 0x2c
 4c6:	b4 c6       	rjmp	.+3432   	; 0x1230 <__stack+0x131>
 4c8:	e8 dd       	rcall	.-1072   	; 0x9a <__do_copy_data+0x2>
 4ca:	74 1f       	adc	r23, r20
 4cc:	4b bd       	out	0x2b, r20	; 43
 4ce:	8b 8a       	std	Y+19, r8	; 0x13
 4d0:	70 3e       	cpi	r23, 0xE0	; 224
 4d2:	b5 66       	ori	r27, 0x65	; 101
 4d4:	48 03       	fmul	r20, r16
 4d6:	f6 0e       	add	r15, r22
 4d8:	61 35       	cpi	r22, 0x51	; 81
 4da:	57 b9       	out	0x07, r21	; 7
 4dc:	86 c1       	rjmp	.+780    	; 0x7ea <_etext+0x46>
 4de:	1d 9e       	mul	r1, r29
 4e0:	e1 f8       	bld	r14, 1
 4e2:	98 11       	cpse	r25, r8
 4e4:	69 d9       	rcall	.-3374   	; 0xfffff7b8 <__eeprom_end+0xff7ef7b8>
 4e6:	8e 94 9b 1e 	call	0x203d36	; 0x203d36 <__TEXT_REGION_LENGTH__+0x1e3d36>
 4ea:	87 e9       	ldi	r24, 0x97	; 151
 4ec:	ce 55       	subi	r28, 0x5E	; 94
 4ee:	28 df       	rcall	.-432    	; 0x340 <aes_init+0x44>
 4f0:	8c a1       	ldd	r24, Y+36	; 0x24
 4f2:	89 0d       	add	r24, r9
 4f4:	bf e6       	ldi	r27, 0x6F	; 111
 4f6:	42 68       	ori	r20, 0x82	; 130
 4f8:	41 99       	sbic	0x08, 1	; 8
 4fa:	2d 0f       	add	r18, r29
 4fc:	b0 54       	subi	r27, 0x40	; 64
 4fe:	bb 16       	cp	r11, r27

00000500 <aes256_enc_origin>:
P = 0
xREDUCER = 25

.global aes256_enc_origin
aes256_enc_origin:
	ldi r20, 14
 500:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core_origin
 502:	03 c0       	rjmp	.+6      	; 0x50a <aes_encrypt_core_origin>

00000504 <aes192_enc_origin>:

.global aes192_enc_origin
aes192_enc_origin:
	ldi r20, 12
 504:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core_origin
 506:	01 c0       	rjmp	.+2      	; 0x50a <aes_encrypt_core_origin>

00000508 <aes128_enc_origin>:

.global aes128_enc_origin
aes128_enc_origin:
	ldi r20, 10
 508:	4a e0       	ldi	r20, 0x0A	; 10

0000050a <aes_encrypt_core_origin>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_encrypt_core_origin
aes_encrypt_core_origin:
	push_range 2, 17
 50a:	2f 92       	push	r2
 50c:	3f 92       	push	r3
 50e:	4f 92       	push	r4
 510:	5f 92       	push	r5
 512:	6f 92       	push	r6
 514:	7f 92       	push	r7
 516:	8f 92       	push	r8
 518:	9f 92       	push	r9
 51a:	af 92       	push	r10
 51c:	bf 92       	push	r11
 51e:	cf 92       	push	r12
 520:	df 92       	push	r13
 522:	ef 92       	push	r14
 524:	ff 92       	push	r15
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
	push r28
 52a:	cf 93       	push	r28
	push r29
 52c:	df 93       	push	r29
	push r24
 52e:	8f 93       	push	r24
	push r25
 530:	9f 93       	push	r25
	movw r26, r22
 532:	db 01       	movw	r26, r22
	movw r30, r24
 534:	fc 01       	movw	r30, r24
	mov  CTR, r20
 536:	84 2f       	mov	r24, r20
	clt
 538:	e8 94       	clt
	
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld ST\row\col, Z+
		.endr
	.endr
 53a:	81 90       	ld	r8, Z+
 53c:	91 90       	ld	r9, Z+
 53e:	a1 90       	ld	r10, Z+
 540:	b1 90       	ld	r11, Z+
 542:	c1 90       	ld	r12, Z+
 544:	d1 90       	ld	r13, Z+
 546:	e1 90       	ld	r14, Z+
 548:	f1 90       	ld	r15, Z+
 54a:	01 91       	ld	r16, Z+
 54c:	11 91       	ld	r17, Z+
 54e:	21 91       	ld	r18, Z+
 550:	31 91       	ld	r19, Z+
 552:	41 91       	ld	r20, Z+
 554:	51 91       	ld	r21, Z+
 556:	61 91       	ld	r22, Z+
 558:	71 91       	ld	r23, Z+
	
	ldi xREDUCER, 0x1b /* load reducer */
 55a:	9b e1       	ldi	r25, 0x1B	; 27
	ldi r31, hi8(aes_sbox)
 55c:	f4 e0       	ldi	r31, 0x04	; 4
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld r0, X+
			eor ST\row\col, r0
		.endr
	.endr
 55e:	0d 90       	ld	r0, X+
 560:	80 24       	eor	r8, r0
 562:	0d 90       	ld	r0, X+
 564:	90 24       	eor	r9, r0
 566:	0d 90       	ld	r0, X+
 568:	a0 24       	eor	r10, r0
 56a:	0d 90       	ld	r0, X+
 56c:	b0 24       	eor	r11, r0
 56e:	0d 90       	ld	r0, X+
 570:	c0 24       	eor	r12, r0
 572:	0d 90       	ld	r0, X+
 574:	d0 24       	eor	r13, r0
 576:	0d 90       	ld	r0, X+
 578:	e0 24       	eor	r14, r0
 57a:	0d 90       	ld	r0, X+
 57c:	f0 24       	eor	r15, r0
 57e:	0d 90       	ld	r0, X+
 580:	00 25       	eor	r16, r0
 582:	0d 90       	ld	r0, X+
 584:	10 25       	eor	r17, r0
 586:	0d 90       	ld	r0, X+
 588:	20 25       	eor	r18, r0
 58a:	0d 90       	ld	r0, X+
 58c:	30 25       	eor	r19, r0
 58e:	0d 90       	ld	r0, X+
 590:	40 25       	eor	r20, r0
 592:	0d 90       	ld	r0, X+
 594:	50 25       	eor	r21, r0
 596:	0d 90       	ld	r0, X+
 598:	60 25       	eor	r22, r0
 59a:	0d 90       	ld	r0, X+
 59c:	70 25       	eor	r23, r0
	
	brtc 2f
 59e:	2e f5       	brtc	.+74     	; 0x5ea <exit+0x4a>

000005a0 <exit>:
exit:
	pop r31
 5a0:	ff 91       	pop	r31
	pop r30
 5a2:	ef 91       	pop	r30
	.irp row, 0, 1, 2, 3
			.irp col, 0, 1, 2, 3
			st Z+, ST\row\col
		.endr
	.endr
 5a4:	81 92       	st	Z+, r8
 5a6:	91 92       	st	Z+, r9
 5a8:	a1 92       	st	Z+, r10
 5aa:	b1 92       	st	Z+, r11
 5ac:	c1 92       	st	Z+, r12
 5ae:	d1 92       	st	Z+, r13
 5b0:	e1 92       	st	Z+, r14
 5b2:	f1 92       	st	Z+, r15
 5b4:	01 93       	st	Z+, r16
 5b6:	11 93       	st	Z+, r17
 5b8:	21 93       	st	Z+, r18
 5ba:	31 93       	st	Z+, r19
 5bc:	41 93       	st	Z+, r20
 5be:	51 93       	st	Z+, r21
 5c0:	61 93       	st	Z+, r22
 5c2:	71 93       	st	Z+, r23
	pop r29
 5c4:	df 91       	pop	r29
	pop r28
 5c6:	cf 91       	pop	r28
	pop_range 2, 17
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	ff 90       	pop	r15
 5ce:	ef 90       	pop	r14
 5d0:	df 90       	pop	r13
 5d2:	cf 90       	pop	r12
 5d4:	bf 90       	pop	r11
 5d6:	af 90       	pop	r10
 5d8:	9f 90       	pop	r9
 5da:	8f 90       	pop	r8
 5dc:	7f 90       	pop	r7
 5de:	6f 90       	pop	r6
 5e0:	5f 90       	pop	r5
 5e2:	4f 90       	pop	r4
 5e4:	3f 90       	pop	r3
 5e6:	2f 90       	pop	r2
	ret
 5e8:	08 95       	ret

2:	dec CTR
 5ea:	8a 95       	dec	r24
	brne 3f
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <exit+0x50>
	set
 5ee:	68 94       	set
3:

	/* encryption loop */ 

	/* SBOX substitution and shifting */
	mov r30, ST00
 5f0:	e8 2d       	mov	r30, r8
	lpm ST00, Z
 5f2:	84 90       	lpm	r8, Z
	mov r30, ST10
 5f4:	ec 2d       	mov	r30, r12
	lpm ST10, Z
 5f6:	c4 90       	lpm	r12, Z
	mov r30, ST20
 5f8:	e0 2f       	mov	r30, r16
	lpm ST20, Z
 5fa:	04 91       	lpm	r16, Z
	mov r30, ST30
 5fc:	e4 2f       	mov	r30, r20
	lpm ST30, Z
 5fe:	44 91       	lpm	r20, Z

	mov r30, ST01
 600:	e9 2d       	mov	r30, r9
	lpm T0, Z
 602:	24 90       	lpm	r2, Z
	mov r30, ST11
 604:	ed 2d       	mov	r30, r13
	lpm ST01, Z
 606:	94 90       	lpm	r9, Z
	mov r30, ST21
 608:	e1 2f       	mov	r30, r17
	lpm ST11, Z
 60a:	d4 90       	lpm	r13, Z
	mov r30, ST31
 60c:	e5 2f       	mov	r30, r21
	lpm ST21, Z
 60e:	14 91       	lpm	r17, Z
	mov ST31, T0
 610:	52 2d       	mov	r21, r2

	mov r30, ST02
 612:	ea 2d       	mov	r30, r10
	lpm T0, Z
 614:	24 90       	lpm	r2, Z
	mov r30, ST12
 616:	ee 2d       	mov	r30, r14
	lpm T1, Z
 618:	34 90       	lpm	r3, Z
	mov r30, ST22
 61a:	e2 2f       	mov	r30, r18
	lpm ST02, Z
 61c:	a4 90       	lpm	r10, Z
	mov r30, ST32
 61e:	e6 2f       	mov	r30, r22
	lpm ST12, Z
 620:	e4 90       	lpm	r14, Z
	mov ST22, T0
 622:	22 2d       	mov	r18, r2
	mov ST32, T1
 624:	63 2d       	mov	r22, r3

	mov r30, ST03
 626:	eb 2d       	mov	r30, r11
	lpm T0, Z
 628:	24 90       	lpm	r2, Z
	mov r30, ST33
 62a:	e7 2f       	mov	r30, r23
	lpm ST03, Z
 62c:	b4 90       	lpm	r11, Z
	mov r30, ST23
 62e:	e3 2f       	mov	r30, r19
	lpm ST33, Z
 630:	74 91       	lpm	r23, Z
	mov r30, ST13
 632:	ef 2d       	mov	r30, r15
	lpm ST23, Z
 634:	34 91       	lpm	r19, Z
	mov ST13, T0
 636:	f2 2c       	mov	r15, r2
		
	/* mixcols (or rows in our case) */
	brtc 2f
 638:	0e f4       	brtc	.+2      	; 0x63c <exit+0x9c>
	rjmp 1b
 63a:	91 cf       	rjmp	.-222    	; 0x55e <aes_encrypt_core_origin+0x54>
	brcc 3f
	eor T0, xREDUCER
3:	eor T0, r0
	eor ST\row\()3, T0

.endr
 63c:	0a 2c       	mov	r0, r10
 63e:	0b 24       	eor	r0, r11
 640:	40 2c       	mov	r4, r0
 642:	28 2c       	mov	r2, r8
 644:	89 24       	eor	r8, r9
 646:	08 24       	eor	r0, r8
 648:	88 0c       	add	r8, r8
 64a:	08 f4       	brcc	.+2      	; 0x64e <exit+0xae>
 64c:	89 26       	eor	r8, r25
 64e:	80 24       	eor	r8, r0
 650:	82 24       	eor	r8, r2
 652:	39 2c       	mov	r3, r9
 654:	3a 24       	eor	r3, r10
 656:	33 0c       	add	r3, r3
 658:	08 f4       	brcc	.+2      	; 0x65c <exit+0xbc>
 65a:	39 26       	eor	r3, r25
 65c:	30 24       	eor	r3, r0
 65e:	93 24       	eor	r9, r3
 660:	44 0c       	add	r4, r4
 662:	08 f4       	brcc	.+2      	; 0x666 <exit+0xc6>
 664:	49 26       	eor	r4, r25
 666:	40 24       	eor	r4, r0
 668:	a4 24       	eor	r10, r4
 66a:	2b 24       	eor	r2, r11
 66c:	22 0c       	add	r2, r2
 66e:	08 f4       	brcc	.+2      	; 0x672 <exit+0xd2>
 670:	29 26       	eor	r2, r25
 672:	20 24       	eor	r2, r0
 674:	b2 24       	eor	r11, r2
 676:	0e 2c       	mov	r0, r14
 678:	0f 24       	eor	r0, r15
 67a:	40 2c       	mov	r4, r0
 67c:	2c 2c       	mov	r2, r12
 67e:	cd 24       	eor	r12, r13
 680:	0c 24       	eor	r0, r12
 682:	cc 0c       	add	r12, r12
 684:	08 f4       	brcc	.+2      	; 0x688 <exit+0xe8>
 686:	c9 26       	eor	r12, r25
 688:	c0 24       	eor	r12, r0
 68a:	c2 24       	eor	r12, r2
 68c:	3d 2c       	mov	r3, r13
 68e:	3e 24       	eor	r3, r14
 690:	33 0c       	add	r3, r3
 692:	08 f4       	brcc	.+2      	; 0x696 <exit+0xf6>
 694:	39 26       	eor	r3, r25
 696:	30 24       	eor	r3, r0
 698:	d3 24       	eor	r13, r3
 69a:	44 0c       	add	r4, r4
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <exit+0x100>
 69e:	49 26       	eor	r4, r25
 6a0:	40 24       	eor	r4, r0
 6a2:	e4 24       	eor	r14, r4
 6a4:	2f 24       	eor	r2, r15
 6a6:	22 0c       	add	r2, r2
 6a8:	08 f4       	brcc	.+2      	; 0x6ac <exit+0x10c>
 6aa:	29 26       	eor	r2, r25
 6ac:	20 24       	eor	r2, r0
 6ae:	f2 24       	eor	r15, r2
 6b0:	02 2e       	mov	r0, r18
 6b2:	03 26       	eor	r0, r19
 6b4:	40 2c       	mov	r4, r0
 6b6:	20 2e       	mov	r2, r16
 6b8:	01 27       	eor	r16, r17
 6ba:	00 26       	eor	r0, r16
 6bc:	00 0f       	add	r16, r16
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <exit+0x122>
 6c0:	09 27       	eor	r16, r25
 6c2:	00 25       	eor	r16, r0
 6c4:	02 25       	eor	r16, r2
 6c6:	31 2e       	mov	r3, r17
 6c8:	32 26       	eor	r3, r18
 6ca:	33 0c       	add	r3, r3
 6cc:	08 f4       	brcc	.+2      	; 0x6d0 <exit+0x130>
 6ce:	39 26       	eor	r3, r25
 6d0:	30 24       	eor	r3, r0
 6d2:	13 25       	eor	r17, r3
 6d4:	44 0c       	add	r4, r4
 6d6:	08 f4       	brcc	.+2      	; 0x6da <exit+0x13a>
 6d8:	49 26       	eor	r4, r25
 6da:	40 24       	eor	r4, r0
 6dc:	24 25       	eor	r18, r4
 6de:	23 26       	eor	r2, r19
 6e0:	22 0c       	add	r2, r2
 6e2:	08 f4       	brcc	.+2      	; 0x6e6 <exit+0x146>
 6e4:	29 26       	eor	r2, r25
 6e6:	20 24       	eor	r2, r0
 6e8:	32 25       	eor	r19, r2
 6ea:	06 2e       	mov	r0, r22
 6ec:	07 26       	eor	r0, r23
 6ee:	40 2c       	mov	r4, r0
 6f0:	24 2e       	mov	r2, r20
 6f2:	45 27       	eor	r20, r21
 6f4:	04 26       	eor	r0, r20
 6f6:	44 0f       	add	r20, r20
 6f8:	08 f4       	brcc	.+2      	; 0x6fc <exit+0x15c>
 6fa:	49 27       	eor	r20, r25
 6fc:	40 25       	eor	r20, r0
 6fe:	42 25       	eor	r20, r2
 700:	35 2e       	mov	r3, r21
 702:	36 26       	eor	r3, r22
 704:	33 0c       	add	r3, r3
 706:	08 f4       	brcc	.+2      	; 0x70a <exit+0x16a>
 708:	39 26       	eor	r3, r25
 70a:	30 24       	eor	r3, r0
 70c:	53 25       	eor	r21, r3
 70e:	44 0c       	add	r4, r4
 710:	08 f4       	brcc	.+2      	; 0x714 <exit+0x174>
 712:	49 26       	eor	r4, r25
 714:	40 24       	eor	r4, r0
 716:	64 25       	eor	r22, r4
 718:	27 26       	eor	r2, r23
 71a:	22 0c       	add	r2, r2
 71c:	08 f4       	brcc	.+2      	; 0x720 <exit+0x180>
 71e:	29 26       	eor	r2, r25
 720:	20 24       	eor	r2, r0
 722:	72 25       	eor	r23, r2
	/* mix colums (rows) done */

	/* add key*/
 724:	1c cf       	rjmp	.-456    	; 0x55e <aes_encrypt_core_origin+0x54>

00000726 <main>:
void aes128_enc_origin(void *buffer, aes128_ctx_t *ctx);
void aes192_enc_origin(void *buffer, aes192_ctx_t *ctx);
void aes256_enc_origin(void *buffer, aes128_ctx_t *ctx);

int main(void)
{
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	c0 5d       	subi	r28, 0xD0	; 208
 730:	d1 09       	sbc	r29, r1
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */

	u8 key[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
 73c:	20 e1       	ldi	r18, 0x10	; 16
 73e:	e0 e0       	ldi	r30, 0x00	; 0
 740:	f4 e0       	ldi	r31, 0x04	; 4
 742:	ce 01       	movw	r24, r28
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	dc 01       	movw	r26, r24
 748:	01 90       	ld	r0, Z+
 74a:	0d 92       	st	X+, r0
 74c:	2a 95       	dec	r18
 74e:	e1 f7       	brne	.-8      	; 0x748 <main+0x22>
	u8 IV[16] = {0,};
 750:	20 e1       	ldi	r18, 0x10	; 16
 752:	ce 01       	movw	r24, r28
 754:	41 96       	adiw	r24, 0x11	; 17
 756:	fc 01       	movw	r30, r24
 758:	32 2f       	mov	r19, r18
 75a:	11 92       	st	Z+, r1
 75c:	3a 95       	dec	r19
 75e:	e9 f7       	brne	.-6      	; 0x75a <main+0x34>
	//u8 key[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	//u8 IV[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
	aes128_ctx_t aes_test;
	aes128_init(key, &aes_test);
 760:	ce 01       	movw	r24, r28
 762:	81 96       	adiw	r24, 0x21	; 33
 764:	bc 01       	movw	r22, r24
 766:	ce 01       	movw	r24, r28
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	c5 dd       	rcall	.-1142   	; 0x2f6 <aes128_init>
	aes128_enc(IV,&aes_test);
 76c:	9e 01       	movw	r18, r28
 76e:	2f 5d       	subi	r18, 0xDF	; 223
 770:	3f 4f       	sbci	r19, 0xFF	; 255
 772:	ce 01       	movw	r24, r28
 774:	41 96       	adiw	r24, 0x11	; 17
 776:	b9 01       	movw	r22, r18
 778:	a3 dc       	rcall	.-1722   	; 0xc0 <aes128_enc>
	aes128_enc_origin(IV,&aes_test);
 77a:	9e 01       	movw	r18, r28
 77c:	2f 5d       	subi	r18, 0xDF	; 223
 77e:	3f 4f       	sbci	r19, 0xFF	; 255
 780:	ce 01       	movw	r24, r28
 782:	41 96       	adiw	r24, 0x11	; 17
 784:	b9 01       	movw	r22, r18
 786:	c0 de       	rcall	.-640    	; 0x508 <aes128_enc_origin>
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0

	
}
 78c:	c0 53       	subi	r28, 0x30	; 48
 78e:	df 4f       	sbci	r29, 0xFF	; 255
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	08 95       	ret

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
