
AES_8bit Asm_fast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000520  00800100  000003ac  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000009b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a18  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000830  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000715  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  00002370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000027a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000027ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	16 e0       	ldi	r17, 0x06	; 6
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4c d1       	rcall	.+664    	; 0x34c <main>
  b4:	79 c1       	rjmp	.+754    	; 0x3a8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <aes256_enc>:
 * param b: r22
 * param reducer: r0
 */
.global aes256_enc
aes256_enc:
	ldi r20, 14
  b8:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <aes_encrypt_core>

000000bc <aes192_enc>:

.global aes192_enc
aes192_enc:
	ldi r20, 12
  bc:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core
  be:	01 c0       	rjmp	.+2      	; 0xc2 <aes_encrypt_core>

000000c0 <aes128_enc>:

.global aes128_enc
aes128_enc:
	ldi r20, 10
  c0:	4a e0       	ldi	r20, 0x0A	; 10

000000c2 <aes_encrypt_core>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_encrypt_core
aes_encrypt_core:
	push_range 0, 17
  c2:	0f 92       	push	r0
  c4:	1f 92       	push	r1
  c6:	2f 92       	push	r2
  c8:	3f 92       	push	r3
  ca:	4f 92       	push	r4
  cc:	5f 92       	push	r5
  ce:	6f 92       	push	r6
  d0:	7f 92       	push	r7
  d2:	8f 92       	push	r8
  d4:	9f 92       	push	r9
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
	push r28
  e6:	cf 93       	push	r28
	push r29
  e8:	df 93       	push	r29
	push r24
  ea:	8f 93       	push	r24
	push r25
  ec:	9f 93       	push	r25
	movw r26, r22
  ee:	db 01       	movw	r26, r22
	movw r30, r24
  f0:	fc 01       	movw	r30, r24
	mov  CTR, r20
  f2:	84 2f       	mov	r24, r20
	clt
  f4:	e8 94       	clt
	
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld ST\row\col, Z+
		.endr
	.endr
  f6:	01 90       	ld	r0, Z+
  f8:	11 90       	ld	r1, Z+
  fa:	21 90       	ld	r2, Z+
  fc:	31 90       	ld	r3, Z+
  fe:	41 90       	ld	r4, Z+
 100:	51 90       	ld	r5, Z+
 102:	61 90       	ld	r6, Z+
 104:	71 90       	ld	r7, Z+
 106:	81 90       	ld	r8, Z+
 108:	91 90       	ld	r9, Z+
 10a:	a1 90       	ld	r10, Z+
 10c:	b1 90       	ld	r11, Z+
 10e:	c1 90       	ld	r12, Z+
 110:	d1 90       	ld	r13, Z+
 112:	e1 90       	ld	r14, Z+
 114:	f1 90       	ld	r15, Z+
	

	ldi r31, hi8(SBOX_TABLE)	
 116:	f1 e0       	ldi	r31, 0x01	; 1
	ldi r29, hi8(MIX2_TABLE)
 118:	d2 e0       	ldi	r29, 0x02	; 2
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld r16, X+
			eor ST\row\col, r16
		.endr
	.endr
 11a:	0d 91       	ld	r16, X+
 11c:	00 26       	eor	r0, r16
 11e:	0d 91       	ld	r16, X+
 120:	10 26       	eor	r1, r16
 122:	0d 91       	ld	r16, X+
 124:	20 26       	eor	r2, r16
 126:	0d 91       	ld	r16, X+
 128:	30 26       	eor	r3, r16
 12a:	0d 91       	ld	r16, X+
 12c:	40 26       	eor	r4, r16
 12e:	0d 91       	ld	r16, X+
 130:	50 26       	eor	r5, r16
 132:	0d 91       	ld	r16, X+
 134:	60 26       	eor	r6, r16
 136:	0d 91       	ld	r16, X+
 138:	70 26       	eor	r7, r16
 13a:	0d 91       	ld	r16, X+
 13c:	80 26       	eor	r8, r16
 13e:	0d 91       	ld	r16, X+
 140:	90 26       	eor	r9, r16
 142:	0d 91       	ld	r16, X+
 144:	a0 26       	eor	r10, r16
 146:	0d 91       	ld	r16, X+
 148:	b0 26       	eor	r11, r16
 14a:	0d 91       	ld	r16, X+
 14c:	c0 26       	eor	r12, r16
 14e:	0d 91       	ld	r16, X+
 150:	d0 26       	eor	r13, r16
 152:	0d 91       	ld	r16, X+
 154:	e0 26       	eor	r14, r16
 156:	0d 91       	ld	r16, X+
 158:	f0 26       	eor	r15, r16
	
	brtc 2f
 15a:	3e f5       	brtc	.+78     	; 0x1aa <exit+0x4e>

0000015c <exit>:

exit:
	pop r31
 15c:	ff 91       	pop	r31
	pop r30
 15e:	ef 91       	pop	r30
	.irp row, 0, 1, 2, 3
			.irp col, 0, 1, 2, 3
			st Z+, ST\row\col
		.endr
	.endr
 160:	01 92       	st	Z+, r0
 162:	11 92       	st	Z+, r1
 164:	21 92       	st	Z+, r2
 166:	31 92       	st	Z+, r3
 168:	41 92       	st	Z+, r4
 16a:	51 92       	st	Z+, r5
 16c:	61 92       	st	Z+, r6
 16e:	71 92       	st	Z+, r7
 170:	81 92       	st	Z+, r8
 172:	91 92       	st	Z+, r9
 174:	a1 92       	st	Z+, r10
 176:	b1 92       	st	Z+, r11
 178:	c1 92       	st	Z+, r12
 17a:	d1 92       	st	Z+, r13
 17c:	e1 92       	st	Z+, r14
 17e:	f1 92       	st	Z+, r15
	pop r29
 180:	df 91       	pop	r29
	pop r28
 182:	cf 91       	pop	r28
	pop_range 0, 17
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	bf 90       	pop	r11
 192:	af 90       	pop	r10
 194:	9f 90       	pop	r9
 196:	8f 90       	pop	r8
 198:	7f 90       	pop	r7
 19a:	6f 90       	pop	r6
 19c:	5f 90       	pop	r5
 19e:	4f 90       	pop	r4
 1a0:	3f 90       	pop	r3
 1a2:	2f 90       	pop	r2
 1a4:	1f 90       	pop	r1
 1a6:	0f 90       	pop	r0
	ret
 1a8:	08 95       	ret

2:	
	dec CTR
 1aa:	8a 95       	dec	r24
	brne 3f
 1ac:	39 f5       	brne	.+78     	; 0x1fc <exit+0xa0>
	breq 4f
 1ae:	01 f0       	breq	.+0      	; 0x1b0 <exit+0x54>

	/* encryption loop */ 
	/* Shift Row and Subbyte , Mixcolumns */
4:
	mov r30, ST00
 1b0:	e0 2d       	mov	r30, r0
	ld ST00, Z
 1b2:	00 80       	ld	r0, Z
	mov r30, ST10
 1b4:	e4 2d       	mov	r30, r4
	ld ST10, Z
 1b6:	40 80       	ld	r4, Z
	mov r30, ST20
 1b8:	e8 2d       	mov	r30, r8
	ld ST20, Z
 1ba:	80 80       	ld	r8, Z
	mov r30, ST30
 1bc:	ec 2d       	mov	r30, r12
	ld ST30, Z
 1be:	c0 80       	ld	r12, Z

	mov r30, ST01
 1c0:	e1 2d       	mov	r30, r1
	ld T0, Z
 1c2:	00 81       	ld	r16, Z
	mov r30, ST11
 1c4:	e5 2d       	mov	r30, r5
	ld ST01, Z
 1c6:	10 80       	ld	r1, Z
	mov r30, ST21
 1c8:	e9 2d       	mov	r30, r9
	ld ST11, Z
 1ca:	50 80       	ld	r5, Z
	mov r30, ST31
 1cc:	ed 2d       	mov	r30, r13
	ld ST21, Z
 1ce:	90 80       	ld	r9, Z
	mov ST31, T0
 1d0:	d0 2e       	mov	r13, r16

	mov r30, ST02
 1d2:	e2 2d       	mov	r30, r2
	ld T0, Z
 1d4:	00 81       	ld	r16, Z
	mov r30, ST12
 1d6:	e6 2d       	mov	r30, r6
	ld T1, Z
 1d8:	10 81       	ld	r17, Z
	mov r30, ST22
 1da:	ea 2d       	mov	r30, r10
	ld ST02, Z
 1dc:	20 80       	ld	r2, Z
	mov r30, ST32
 1de:	ee 2d       	mov	r30, r14
	ld ST12, Z
 1e0:	60 80       	ld	r6, Z
	mov ST22, T0
 1e2:	a0 2e       	mov	r10, r16
	mov ST32, T1
 1e4:	e1 2e       	mov	r14, r17

	mov r30, ST03
 1e6:	e3 2d       	mov	r30, r3
	ld T0, Z
 1e8:	00 81       	ld	r16, Z
	mov r30, ST33
 1ea:	ef 2d       	mov	r30, r15
	ld  ST03, Z
 1ec:	30 80       	ld	r3, Z
	mov r30, ST23
 1ee:	eb 2d       	mov	r30, r11
	ld ST33, Z
 1f0:	f0 80       	ld	r15, Z
	mov r30, ST13
 1f2:	e7 2d       	mov	r30, r7
	ld ST23, Z
 1f4:	b0 80       	ld	r11, Z
	mov ST13, T0
 1f6:	70 2e       	mov	r7, r16
		
	set
 1f8:	68 94       	set
	/* mixcols (or rows in our case) */
	rjmp 1b
 1fa:	8f cf       	rjmp	.-226    	; 0x11a <aes_encrypt_core+0x58>

3:
	movw KS_SAVE0, r26
 1fc:	bd 01       	movw	r22, r26
	ldi r27, hi8(MIX3_TABLE)	
 1fe:	b3 e0       	ldi	r27, 0x03	; 3

	//Shift Row	
	mov T0, ST01                    
 200:	01 2d       	mov	r16, r1
	mov ST01, ST11
 202:	15 2c       	mov	r1, r5
	mov ST11, ST21
 204:	59 2c       	mov	r5, r9
	mov ST21, ST31
 206:	9d 2c       	mov	r9, r13
	mov ST31, T0
 208:	d0 2e       	mov	r13, r16

	mov T0, ST02
 20a:	02 2d       	mov	r16, r2
	mov T1, ST12                    
 20c:	16 2d       	mov	r17, r6
	mov ST02, ST22
 20e:	2a 2c       	mov	r2, r10
	mov ST12, ST32
 210:	6e 2c       	mov	r6, r14
	mov ST22, T0
 212:	a0 2e       	mov	r10, r16
	mov ST32, T1
 214:	e1 2e       	mov	r14, r17

	mov T0, ST33                    
 216:	0f 2d       	mov	r16, r15
	mov ST33, ST23
 218:	fb 2c       	mov	r15, r11
	mov ST23, ST13
 21a:	b7 2c       	mov	r11, r7
	mov ST13, ST03
 21c:	73 2c       	mov	r7, r3
	mov ST03, T0
 21e:	30 2e       	mov	r3, r16
	mov ST\row\()2, T2
	mov ST\row\()3, T3
	*/


.endr
 220:	c0 2d       	mov	r28, r0
 222:	a1 2d       	mov	r26, r1
 224:	08 81       	ld	r16, Y
 226:	4c 91       	ld	r20, X
 228:	04 27       	eor	r16, r20
 22a:	e2 2d       	mov	r30, r2
 22c:	40 81       	ld	r20, Z
 22e:	04 27       	eor	r16, r20
 230:	e3 2d       	mov	r30, r3
 232:	40 81       	ld	r20, Z
 234:	04 27       	eor	r16, r20
 236:	c4 2d       	mov	r28, r4
 238:	a5 2d       	mov	r26, r5
 23a:	08 81       	ld	r16, Y
 23c:	4c 91       	ld	r20, X
 23e:	04 27       	eor	r16, r20
 240:	e6 2d       	mov	r30, r6
 242:	40 81       	ld	r20, Z
 244:	04 27       	eor	r16, r20
 246:	e7 2d       	mov	r30, r7
 248:	40 81       	ld	r20, Z
 24a:	04 27       	eor	r16, r20
 24c:	c8 2d       	mov	r28, r8
 24e:	a9 2d       	mov	r26, r9
 250:	08 81       	ld	r16, Y
 252:	4c 91       	ld	r20, X
 254:	04 27       	eor	r16, r20
 256:	ea 2d       	mov	r30, r10
 258:	40 81       	ld	r20, Z
 25a:	04 27       	eor	r16, r20
 25c:	eb 2d       	mov	r30, r11
 25e:	40 81       	ld	r20, Z
 260:	04 27       	eor	r16, r20
 262:	cc 2d       	mov	r28, r12
 264:	ad 2d       	mov	r26, r13
 266:	08 81       	ld	r16, Y
 268:	4c 91       	ld	r20, X
 26a:	04 27       	eor	r16, r20
 26c:	ee 2d       	mov	r30, r14
 26e:	40 81       	ld	r20, Z
 270:	04 27       	eor	r16, r20
 272:	ef 2d       	mov	r30, r15
 274:	40 81       	ld	r20, Z
 276:	04 27       	eor	r16, r20
	movw r26,	KS_SAVE0
 278:	db 01       	movw	r26, r22
	/* Shift Row and Subbyte Mixcolumns(rows) done */
	/* add key*/
	rjmp 1b
 27a:	4f cf       	rjmp	.-354    	; 0x11a <aes_encrypt_core+0x58>

0000027c <aes256_init>:

.text

.global aes256_init
aes256_init:
	movw r20, r22
 27c:	ab 01       	movw	r20, r22
	ldi r23, hi8(256)
 27e:	71 e0       	ldi	r23, 0x01	; 1
	ldi r22, lo8(256)
 280:	60 e0       	ldi	r22, 0x00	; 0
	rjmp aes_init
 282:	07 c0       	rjmp	.+14     	; 0x292 <aes_init>

00000284 <aes192_init>:
	
.global aes192_init
aes192_init:
	movw r20, r22
 284:	ab 01       	movw	r20, r22
	ldi r23, hi8(192)
 286:	70 e0       	ldi	r23, 0x00	; 0
	ldi r22, lo8(192)
 288:	60 ec       	ldi	r22, 0xC0	; 192
	rjmp aes_init
 28a:	03 c0       	rjmp	.+6      	; 0x292 <aes_init>

0000028c <aes128_init>:
	
.global aes128_init
aes128_init:
	movw r20, r22
 28c:	ab 01       	movw	r20, r22
	clr r23
 28e:	77 27       	eor	r23, r23
	ldi r22, 128
 290:	60 e8       	ldi	r22, 0x80	; 128

00000292 <aes_init>:
 * param keysize_b: r22:r23
 * param ctx:       r20:r21
 */
.global aes_init
aes_init:
	push_range 14, 17
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
	push r28
 29a:	cf 93       	push	r28
	push r29
 29c:	df 93       	push	r29
	movw r30, r20
 29e:	fa 01       	movw	r30, r20
	movw r28, r20
 2a0:	ea 01       	movw	r28, r20
	movw r26, r24
 2a2:	dc 01       	movw	r26, r24
	lsr r23
 2a4:	76 95       	lsr	r23
	ror r22
 2a6:	67 95       	ror	r22
	lsr r22
 2a8:	66 95       	lsr	r22
	lsr r22 /* r22 contains keysize_b/8 */
 2aa:	66 95       	lsr	r22
	mov C1, r22
 2ac:	26 2f       	mov	r18, r22

1:	/* copy key to ctx */ 
	ld r0, X+
 2ae:	0d 90       	ld	r0, X+
	st Z+, r0
 2b0:	01 92       	st	Z+, r0
	dec C1
 2b2:	2a 95       	dec	r18
	brne 1b
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <aes_init+0x1c>
	
	lsr NK
 2b6:	66 95       	lsr	r22
	lsr NK
 2b8:	66 95       	lsr	r22
	bst NK,3 /* set T if NK==8 */
 2ba:	63 fb       	bst	r22, 3
	mov NEXT_NK, NK
 2bc:	36 2f       	mov	r19, r22
	mov HI, NK
 2be:	76 2f       	mov	r23, r22
	subi HI, -7
 2c0:	79 5f       	subi	r23, 0xF9	; 249
	lsl HI
 2c2:	77 0f       	add	r23, r23
	lsl HI
 2c4:	77 0f       	add	r23, r23
	movw r26, r30
 2c6:	df 01       	movw	r26, r30
	sbiw r26, 4
 2c8:	14 97       	sbiw	r26, 0x04	; 4
	mov C1, NK
 2ca:	26 2f       	mov	r18, r22
	ldi r31, hi8(SBOX_TABLE)
 2cc:	f5 e0       	ldi	r31, 0x05	; 5
	movw SBOX_SAVE0, r30
 2ce:	7f 01       	movw	r14, r30
	ldi XRC, 1
 2d0:	11 e0       	ldi	r17, 0x01	; 1
1:	
	ld T0, X+
 2d2:	4d 91       	ld	r20, X+
	ld T1, X+
 2d4:	5d 91       	ld	r21, X+
	ld T2, X+
 2d6:	8d 91       	ld	r24, X+
	ld T3, X+
 2d8:	9d 91       	ld	r25, X+
	cp NEXT_NK, C1
 2da:	32 17       	cp	r19, r18
	breq 2f 
 2dc:	79 f0       	breq	.+30     	; 0x2fc <aes_init+0x6a>
	brtc 5f
 2de:	ee f4       	brtc	.+58     	; 0x31a <aes_init+0x88>
	mov r16, C1
 2e0:	02 2f       	mov	r16, r18
	andi r16, 0x07
 2e2:	07 70       	andi	r16, 0x07	; 7
	cpi r16, 0x04
 2e4:	04 30       	cpi	r16, 0x04	; 4
	brne 5f
 2e6:	c9 f4       	brne	.+50     	; 0x31a <aes_init+0x88>
	movw r30, SBOX_SAVE0
 2e8:	f7 01       	movw	r30, r14
	mov r30, T0
 2ea:	e4 2f       	mov	r30, r20
	ld T0, Z
 2ec:	40 81       	ld	r20, Z

	mov r30, T1
 2ee:	e5 2f       	mov	r30, r21
	ld T1, Z
 2f0:	50 81       	ld	r21, Z

	mov r30, T2
 2f2:	e8 2f       	mov	r30, r24
	ld T2, Z
 2f4:	80 81       	ld	r24, Z

	mov r30, T3
 2f6:	e9 2f       	mov	r30, r25
	ld T3, Z
 2f8:	90 81       	ld	r25, Z

	rjmp 5f
 2fa:	0f c0       	rjmp	.+30     	; 0x31a <aes_init+0x88>
2:
	add NEXT_NK, NK
 2fc:	36 0f       	add	r19, r22
	movw r30, SBOX_SAVE0
 2fe:	f7 01       	movw	r30, r14
	mov r30, T0
 300:	e4 2f       	mov	r30, r20
	ld r16, Z
 302:	00 81       	ld	r16, Z

	mov r30, T1
 304:	e5 2f       	mov	r30, r21
	ld T0, Z
 306:	40 81       	ld	r20, Z

	mov r30, T2
 308:	e8 2f       	mov	r30, r24
	ld T1, Z
 30a:	50 81       	ld	r21, Z

	mov r30, T3
 30c:	e9 2f       	mov	r30, r25
	ld T2, Z
 30e:	80 81       	ld	r24, Z

	mov T3, r16
 310:	90 2f       	mov	r25, r16
	eor T0, XRC
 312:	41 27       	eor	r20, r17
	lsl XRC
 314:	11 0f       	add	r17, r17
	brcc 3f
 316:	08 f4       	brcc	.+2      	; 0x31a <aes_init+0x88>
	ldi XRC, 0x1b
 318:	1b e1       	ldi	r17, 0x1B	; 27
3:
5:	
	movw r30, r26
 31a:	fd 01       	movw	r30, r26

	ld r0, Y+
 31c:	09 90       	ld	r0, Y+
	eor r0, T0
 31e:	04 26       	eor	r0, r20
	st Z+, r0 
 320:	01 92       	st	Z+, r0
	ld r0, Y+
 322:	09 90       	ld	r0, Y+
	eor r0 ,T1
 324:	05 26       	eor	r0, r21
	st Z+, r0
 326:	01 92       	st	Z+, r0
	ld r0, Y+
 328:	09 90       	ld	r0, Y+
	eor r0, T2
 32a:	08 26       	eor	r0, r24
	st Z+, r0
 32c:	01 92       	st	Z+, r0
	ld r0, Y+
 32e:	09 90       	ld	r0, Y+
	eor r0, T3
 330:	09 26       	eor	r0, r25
	st Z+, r0
 332:	01 92       	st	Z+, r0
	
	inc C1
 334:	23 95       	inc	r18
	cp C1, HI
 336:	27 17       	cp	r18, r23
	breq 6f
 338:	09 f0       	breq	.+2      	; 0x33c <aes_init+0xaa>
	rjmp 1b
 33a:	cb cf       	rjmp	.-106    	; 0x2d2 <aes_init+0x40>
6:	
	clt
 33c:	e8 94       	clt
	pop r29
 33e:	df 91       	pop	r29
	pop r28
 340:	cf 91       	pop	r28
	pop_range 14, 17
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	08 95       	ret

0000034c <main>:

#include <avr/io.h>
#include "aes_types.h"

int main(void)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	c0 5d       	subi	r28, 0xD0	; 208
 356:	d1 09       	sbc	r29, r1
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    while (1) 
    {
		//u8 key[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
		//u8 IV[16] = {0,};
		u8 key[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	e0 e0       	ldi	r30, 0x00	; 0
 366:	f6 e0       	ldi	r31, 0x06	; 6
 368:	de 01       	movw	r26, r28
 36a:	af 53       	subi	r26, 0x3F	; 63
 36c:	bf 4f       	sbci	r27, 0xFF	; 255
 36e:	01 90       	ld	r0, Z+
 370:	0d 92       	st	X+, r0
 372:	8a 95       	dec	r24
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x22>
		u8 IV[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
 376:	80 e1       	ldi	r24, 0x10	; 16
 378:	e0 e1       	ldi	r30, 0x10	; 16
 37a:	f6 e0       	ldi	r31, 0x06	; 6
 37c:	de 01       	movw	r26, r28
 37e:	af 54       	subi	r26, 0x4F	; 79
 380:	bf 4f       	sbci	r27, 0xFF	; 255
 382:	01 90       	ld	r0, Z+
 384:	0d 92       	st	X+, r0
 386:	8a 95       	dec	r24
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x36>
		aes128_ctx_t aes_test;
		aes128_init(key, &aes_test);
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	ce 01       	movw	r24, r28
 392:	8f 53       	subi	r24, 0x3F	; 63
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	7a df       	rcall	.-268    	; 0x28c <aes128_init>
		aes128_enc(IV,&aes_test);
 398:	be 01       	movw	r22, r28
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	ce 01       	movw	r24, r28
 3a0:	8f 54       	subi	r24, 0x4F	; 79
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	8d de       	rcall	.-742    	; 0xc0 <aes128_enc>
 3a6:	dd cf       	rjmp	.-70     	; 0x362 <main+0x16>

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
