
AES_8bit_asm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001762  00001862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001762  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eeprom       00001000  00810000  00810000  00001872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000028e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b6  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  000040de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a6  00000000  00000000  00004a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00005f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000603  00000000  00000000  0000677b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00006d7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ff c1       	rjmp	.+1022   	; 0x400 <__ctors_end>
       2:	00 00       	nop
       4:	14 c2       	rjmp	.+1064   	; 0x42e <__bad_interrupt>
       6:	00 00       	nop
       8:	12 c2       	rjmp	.+1060   	; 0x42e <__bad_interrupt>
       a:	00 00       	nop
       c:	10 c2       	rjmp	.+1056   	; 0x42e <__bad_interrupt>
       e:	00 00       	nop
      10:	0e c2       	rjmp	.+1052   	; 0x42e <__bad_interrupt>
      12:	00 00       	nop
      14:	0c c2       	rjmp	.+1048   	; 0x42e <__bad_interrupt>
      16:	00 00       	nop
      18:	0a c2       	rjmp	.+1044   	; 0x42e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	08 c2       	rjmp	.+1040   	; 0x42e <__bad_interrupt>
      1e:	00 00       	nop
      20:	06 c2       	rjmp	.+1036   	; 0x42e <__bad_interrupt>
      22:	00 00       	nop
      24:	04 c2       	rjmp	.+1032   	; 0x42e <__bad_interrupt>
      26:	00 00       	nop
      28:	02 c2       	rjmp	.+1028   	; 0x42e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	00 c2       	rjmp	.+1024   	; 0x42e <__bad_interrupt>
      2e:	00 00       	nop
      30:	fe c1       	rjmp	.+1020   	; 0x42e <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c1       	rjmp	.+1016   	; 0x42e <__bad_interrupt>
      36:	00 00       	nop
      38:	fa c1       	rjmp	.+1012   	; 0x42e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f8 c1       	rjmp	.+1008   	; 0x42e <__bad_interrupt>
      3e:	00 00       	nop
      40:	f6 c1       	rjmp	.+1004   	; 0x42e <__bad_interrupt>
      42:	00 00       	nop
      44:	f4 c1       	rjmp	.+1000   	; 0x42e <__bad_interrupt>
      46:	00 00       	nop
      48:	f2 c1       	rjmp	.+996    	; 0x42e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f0 c1       	rjmp	.+992    	; 0x42e <__bad_interrupt>
      4e:	00 00       	nop
      50:	ee c1       	rjmp	.+988    	; 0x42e <__bad_interrupt>
      52:	00 00       	nop
      54:	ec c1       	rjmp	.+984    	; 0x42e <__bad_interrupt>
      56:	00 00       	nop
      58:	ea c1       	rjmp	.+980    	; 0x42e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e8 c1       	rjmp	.+976    	; 0x42e <__bad_interrupt>
      5e:	00 00       	nop
      60:	e6 c1       	rjmp	.+972    	; 0x42e <__bad_interrupt>
      62:	00 00       	nop
      64:	e4 c1       	rjmp	.+968    	; 0x42e <__bad_interrupt>
      66:	00 00       	nop
      68:	e2 c1       	rjmp	.+964    	; 0x42e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e0 c1       	rjmp	.+960    	; 0x42e <__bad_interrupt>
      6e:	00 00       	nop
      70:	de c1       	rjmp	.+956    	; 0x42e <__bad_interrupt>
      72:	00 00       	nop
      74:	dc c1       	rjmp	.+952    	; 0x42e <__bad_interrupt>
      76:	00 00       	nop
      78:	da c1       	rjmp	.+948    	; 0x42e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d8 c1       	rjmp	.+944    	; 0x42e <__bad_interrupt>
      7e:	00 00       	nop
      80:	d6 c1       	rjmp	.+940    	; 0x42e <__bad_interrupt>
      82:	00 00       	nop
      84:	d4 c1       	rjmp	.+936    	; 0x42e <__bad_interrupt>
      86:	00 00       	nop
      88:	d2 c1       	rjmp	.+932    	; 0x42e <__bad_interrupt>
	...

0000008c <__trampolines_end>:
	...

00000100 <Rcon>:
     100:	01 02 04 08 10 20 40 80 1b 36 6c d8 ab 00 00 00     ..... @..6l.....
	...

00000200 <sbox>:
     200:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     210:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     220:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     230:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     240:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     250:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     260:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     270:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     280:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     290:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     2a0:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     2b0:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     2c0:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     2d0:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     2e0:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     2f0:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000300 <sbox2>:
     300:	00 02 04 06 08 0a 0c 0e 10 12 14 16 18 1a 1c 1e     ................
     310:	20 22 24 26 28 2a 2c 2e 30 32 34 36 38 3a 3c 3e      "$&(*,.02468:<>
     320:	40 42 44 46 48 4a 4c 4e 50 52 54 56 58 5a 5c 5e     @BDFHJLNPRTVXZ\^
     330:	60 62 64 66 68 6a 6c 6e 70 72 74 76 78 7a 7c 7e     `bdfhjlnprtvxz|~
     340:	80 82 84 86 88 8a 8c 8e 90 92 94 96 98 9a 9c 9e     ................
     350:	a0 a2 a4 a6 a8 aa ac ae b0 b2 b4 b6 b8 ba bc be     ................
     360:	c0 c2 c4 c6 c8 ca cc ce d0 d2 d4 d6 d8 da dc de     ................
     370:	e0 e2 e4 e6 e8 ea ec ee f0 f2 f4 f6 f8 fa fc fe     ................
     380:	1b 19 1f 1d 13 11 17 15 0b 09 0f 0d 03 01 07 05     ................
     390:	3b 39 3f 3d 33 31 37 35 2b 29 2f 2d 23 21 27 25     ;9?=3175+)/-#!'%
     3a0:	5b 59 5f 5d 53 51 57 55 4b 49 4f 4d 43 41 47 45     [Y_]SQWUKIOMCAGE
     3b0:	7b 79 7f 7d 73 71 77 75 6b 69 6f 6d 63 61 67 65     {y.}sqwukiomcage
     3c0:	9b 99 9f 9d 93 91 97 95 8b 89 8f 8d 83 81 87 85     ................
     3d0:	bb b9 bf bd b3 b1 b7 b5 ab a9 af ad a3 a1 a7 a5     ................
     3e0:	db d9 df dd d3 d1 d7 d5 cb c9 cf cd c3 c1 c7 c5     ................
     3f0:	fb f9 ff fd f3 f1 f7 f5 eb e9 ef ed e3 e1 e7 e5     ................

00000400 <__ctors_end>:
     400:	11 24       	eor	r1, r1
     402:	1f be       	out	0x3f, r1	; 63
     404:	cf ef       	ldi	r28, 0xFF	; 255
     406:	d0 e1       	ldi	r29, 0x10	; 16
     408:	de bf       	out	0x3e, r29	; 62
     40a:	cd bf       	out	0x3d, r28	; 61

0000040c <__do_copy_data>:
     40c:	11 e0       	ldi	r17, 0x01	; 1
     40e:	a0 e0       	ldi	r26, 0x00	; 0
     410:	b1 e0       	ldi	r27, 0x01	; 1
     412:	e2 e6       	ldi	r30, 0x62	; 98
     414:	f7 e1       	ldi	r31, 0x17	; 23
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	0b bf       	out	0x3b, r16	; 59
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__do_copy_data+0x14>
     41c:	07 90       	elpm	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	a0 31       	cpi	r26, 0x10	; 16
     422:	b1 07       	cpc	r27, r17
     424:	d9 f7       	brne	.-10     	; 0x41c <__do_copy_data+0x10>
     426:	0e 94 33 0b 	call	0x1666	; 0x1666 <main>
     42a:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_exit>

0000042e <__bad_interrupt>:
     42e:	e8 cd       	rjmp	.-1072   	; 0x0 <__vectors>

00000430 <MixColumns_asm_Progm>:
 #include "AVR_macro.s"

 .global MixColumns_asm_Progm
MixColumns_asm_Progm:

	regBackupAdd
     430:	0f 92       	push	r0
     432:	3f 92       	push	r3
     434:	4f 92       	push	r4
     436:	5f 92       	push	r5
     438:	6f 92       	push	r6
     43a:	7f 92       	push	r7
     43c:	8f 92       	push	r8
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	movw r26,	r24 ; X
     44a:	dc 01       	movw	r26, r24
	movw r28,	r24 ; Y
     44c:	ec 01       	movw	r28, r24
	ldi	 r16,	4
     44e:	04 e0       	ldi	r16, 0x04	; 4
	ldi  r17,	0x1b
     450:	1b e1       	ldi	r17, 0x1B	; 27

	ldi	r30,	lo8(sbox2);!!!!!!!!!!!!!!!!
     452:	e0 e0       	ldi	r30, 0x00	; 0
	ldi	r31,	hi8(sbox2);!!!!!!!!!!!!!!!!
     454:	f3 e0       	ldi	r31, 0x03	; 3

00000456 <loop>:

loop:
	;2 3 1 1 
	ld r2,		Y+	;3
     456:	29 90       	ld	r2, Y+
	ld r4,		Y+	;1
     458:	49 90       	ld	r4, Y+
	ld r5,		Y+	;1
     45a:	59 90       	ld	r5, Y+
	ld r6,		Y+	;2
     45c:	69 90       	ld	r6, Y+

	mov r0,		r2
     45e:	02 2c       	mov	r0, r2
	eor r0,		r4
     460:	04 24       	eor	r0, r4
	mov r30,	r0
     462:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     464:	04 90       	lpm	r0, Z
	eor	r0,		r4
     466:	04 24       	eor	r0, r4
	eor	r0,		r5
     468:	05 24       	eor	r0, r5
	eor r0,		r6
     46a:	06 24       	eor	r0, r6
	st X+,		r0 ; -------------------[0]
     46c:	0d 92       	st	X+, r0

	; 1 2 3 1 
	mov r0,		r4
     46e:	04 2c       	mov	r0, r4
	eor r0,		r5
     470:	05 24       	eor	r0, r5
	mov r30,	r0
     472:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     474:	04 90       	lpm	r0, Z
	eor	r0,		r2
     476:	02 24       	eor	r0, r2
	eor	r0,		r5
     478:	05 24       	eor	r0, r5
	eor r0,		r6
     47a:	06 24       	eor	r0, r6
	st X+,		r0  ; -------------------[1]
     47c:	0d 92       	st	X+, r0


	; 1 1 2 3 
	mov r0,		r5
     47e:	05 2c       	mov	r0, r5
	eor r0,		r6
     480:	06 24       	eor	r0, r6
	mov r30,	r0
     482:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     484:	04 90       	lpm	r0, Z
	eor	r0,		r2
     486:	02 24       	eor	r0, r2
	eor	r0,		r4
     488:	04 24       	eor	r0, r4
	eor r0,		r6
     48a:	06 24       	eor	r0, r6
	st X+,		r0  ; -------------------[2]
     48c:	0d 92       	st	X+, r0

	; 3 1 1 2 
	mov r0,		r6
     48e:	06 2c       	mov	r0, r6
	eor r0,		r2
     490:	02 24       	eor	r0, r2
	mov r30,	r0
     492:	e0 2d       	mov	r30, r0
	lpm r0,		Z
     494:	04 90       	lpm	r0, Z
	eor	r0,		r2
     496:	02 24       	eor	r0, r2
	eor	r0,		r4
     498:	04 24       	eor	r0, r4
	eor r0,		r5
     49a:	05 24       	eor	r0, r5
	st X+,		r0 ; -------------------[3]
     49c:	0d 92       	st	X+, r0
	dec		r16
     49e:	0a 95       	dec	r16
	brne loop
     4a0:	d1 f6       	brne	.-76     	; 0x456 <loop>

	regRetriveveAdd
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	8f 90       	pop	r8
     4b0:	7f 90       	pop	r7
     4b2:	6f 90       	pop	r6
     4b4:	5f 90       	pop	r5
     4b6:	4f 90       	pop	r4
     4b8:	3f 90       	pop	r3
     4ba:	0f 90       	pop	r0
	ret
     4bc:	08 95       	ret

000004be <Subbyte_ShiftRows_asm>:

 .global Subbyte_ShiftRows_asm

 Subbyte_ShiftRows_asm:

	regBackupAdd2
     4be:	0f 92       	push	r0
     4c0:	1f 92       	push	r1
     4c2:	2f 92       	push	r2
     4c4:	3f 92       	push	r3
     4c6:	4f 92       	push	r4
     4c8:	5f 92       	push	r5
     4ca:	6f 92       	push	r6
     4cc:	7f 92       	push	r7
     4ce:	8f 92       	push	r8
     4d0:	9f 92       	push	r9
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ef 93       	push	r30
     4e8:	ff 93       	push	r31
	movw	r28,	r24 ;Y : state
     4ea:	ec 01       	movw	r28, r24
	movw	r26,	r24 ;X : state
     4ec:	dc 01       	movw	r26, r24
	ldi	r30,	lo8(sbox)
     4ee:	e0 e0       	ldi	r30, 0x00	; 0
	ldi	r31,	hi8(sbox)
     4f0:	f2 e0       	ldi	r31, 0x02	; 2
	
	.irp i,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
		ld r30,		Y+
		lpm	r\i,	Z
	.endr
     4f2:	e9 91       	ld	r30, Y+
     4f4:	04 90       	lpm	r0, Z
     4f6:	e9 91       	ld	r30, Y+
     4f8:	14 90       	lpm	r1, Z
     4fa:	e9 91       	ld	r30, Y+
     4fc:	24 90       	lpm	r2, Z
     4fe:	e9 91       	ld	r30, Y+
     500:	34 90       	lpm	r3, Z
     502:	e9 91       	ld	r30, Y+
     504:	44 90       	lpm	r4, Z
     506:	e9 91       	ld	r30, Y+
     508:	54 90       	lpm	r5, Z
     50a:	e9 91       	ld	r30, Y+
     50c:	64 90       	lpm	r6, Z
     50e:	e9 91       	ld	r30, Y+
     510:	74 90       	lpm	r7, Z
     512:	e9 91       	ld	r30, Y+
     514:	84 90       	lpm	r8, Z
     516:	e9 91       	ld	r30, Y+
     518:	94 90       	lpm	r9, Z
     51a:	e9 91       	ld	r30, Y+
     51c:	a4 90       	lpm	r10, Z
     51e:	e9 91       	ld	r30, Y+
     520:	b4 90       	lpm	r11, Z
     522:	e9 91       	ld	r30, Y+
     524:	c4 90       	lpm	r12, Z
     526:	e9 91       	ld	r30, Y+
     528:	d4 90       	lpm	r13, Z
     52a:	e9 91       	ld	r30, Y+
     52c:	e4 90       	lpm	r14, Z
     52e:	e9 91       	ld	r30, Y+
     530:	f4 90       	lpm	r15, Z

	.irp i,0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11
		st X+,	r\i
	.endr
     532:	0d 92       	st	X+, r0
     534:	5d 92       	st	X+, r5
     536:	ad 92       	st	X+, r10
     538:	fd 92       	st	X+, r15
     53a:	4d 92       	st	X+, r4
     53c:	9d 92       	st	X+, r9
     53e:	ed 92       	st	X+, r14
     540:	3d 92       	st	X+, r3
     542:	8d 92       	st	X+, r8
     544:	dd 92       	st	X+, r13
     546:	2d 92       	st	X+, r2
     548:	7d 92       	st	X+, r7
     54a:	cd 92       	st	X+, r12
     54c:	1d 92       	st	X+, r1
     54e:	6d 92       	st	X+, r6
     550:	bd 92       	st	X+, r11


	regRetriveveAdd2
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	bf 90       	pop	r11
     568:	af 90       	pop	r10
     56a:	9f 90       	pop	r9
     56c:	8f 90       	pop	r8
     56e:	7f 90       	pop	r7
     570:	6f 90       	pop	r6
     572:	5f 90       	pop	r5
     574:	4f 90       	pop	r4
     576:	3f 90       	pop	r3
     578:	2f 90       	pop	r2
     57a:	1f 90       	pop	r1
     57c:	0f 90       	pop	r0
     57e:	08 95       	ret

00000580 <SubByte>:

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
	}
}
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	27 97       	sbiw	r28, 0x07	; 7
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	de bf       	out	0x3e, r29	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	cd bf       	out	0x3d, r28	; 61
     594:	9f 83       	std	Y+7, r25	; 0x07
     596:	8e 83       	std	Y+6, r24	; 0x06
     598:	1a 82       	std	Y+2, r1	; 0x02
     59a:	19 82       	std	Y+1, r1	; 0x01
     59c:	23 c0       	rjmp	.+70     	; 0x5e4 <SubByte+0x64>
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	2e 81       	ldd	r18, Y+6	; 0x06
     5a6:	3f 81       	ldd	r19, Y+7	; 0x07
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	fc 01       	movw	r30, r24
     5ae:	80 81       	ld	r24, Z
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	2e 81       	ldd	r18, Y+6	; 0x06
     5ba:	3f 81       	ldd	r19, Y+7	; 0x07
     5bc:	82 0f       	add	r24, r18
     5be:	93 1f       	adc	r25, r19
     5c0:	2a 81       	ldd	r18, Y+2	; 0x02
     5c2:	22 2f       	mov	r18, r18
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	20 50       	subi	r18, 0x00	; 0
     5c8:	3e 4f       	sbci	r19, 0xFE	; 254
     5ca:	3c 83       	std	Y+4, r19	; 0x04
     5cc:	2b 83       	std	Y+3, r18	; 0x03
     5ce:	2b 81       	ldd	r18, Y+3	; 0x03
     5d0:	3c 81       	ldd	r19, Y+4	; 0x04
     5d2:	f9 01       	movw	r30, r18
     5d4:	24 91       	lpm	r18, Z
     5d6:	2d 83       	std	Y+5, r18	; 0x05
     5d8:	2d 81       	ldd	r18, Y+5	; 0x05
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	89 83       	std	Y+1, r24	; 0x01
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	80 31       	cpi	r24, 0x10	; 16
     5e8:	d0 f2       	brcs	.-76     	; 0x59e <SubByte+0x1e>
     5ea:	00 00       	nop
     5ec:	27 96       	adiw	r28, 0x07	; 7
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <ShiftRow>:
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	00 d0       	rcall	.+0      	; 0x604 <ShiftRow+0x6>
     604:	00 d0       	rcall	.+0      	; 0x606 <ShiftRow+0x8>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	9c 83       	std	Y+4, r25	; 0x04
     60c:	8b 83       	std	Y+3, r24	; 0x03
     60e:	8b 81       	ldd	r24, Y+3	; 0x03
     610:	9c 81       	ldd	r25, Y+4	; 0x04
     612:	fc 01       	movw	r30, r24
     614:	85 85       	ldd	r24, Z+13	; 0x0d
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	9c 81       	ldd	r25, Y+4	; 0x04
     61c:	0d 96       	adiw	r24, 0x0d	; 13
     61e:	2b 81       	ldd	r18, Y+3	; 0x03
     620:	3c 81       	ldd	r19, Y+4	; 0x04
     622:	f9 01       	movw	r30, r18
     624:	21 81       	ldd	r18, Z+1	; 0x01
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	2b 81       	ldd	r18, Y+3	; 0x03
     632:	3c 81       	ldd	r19, Y+4	; 0x04
     634:	f9 01       	movw	r30, r18
     636:	25 81       	ldd	r18, Z+5	; 0x05
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
     63c:	8b 81       	ldd	r24, Y+3	; 0x03
     63e:	9c 81       	ldd	r25, Y+4	; 0x04
     640:	05 96       	adiw	r24, 0x05	; 5
     642:	2b 81       	ldd	r18, Y+3	; 0x03
     644:	3c 81       	ldd	r19, Y+4	; 0x04
     646:	f9 01       	movw	r30, r18
     648:	21 85       	ldd	r18, Z+9	; 0x09
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	9c 81       	ldd	r25, Y+4	; 0x04
     652:	09 96       	adiw	r24, 0x09	; 9
     654:	29 81       	ldd	r18, Y+1	; 0x01
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	9c 81       	ldd	r25, Y+4	; 0x04
     65e:	fc 01       	movw	r30, r24
     660:	82 85       	ldd	r24, Z+10	; 0x0a
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	8b 81       	ldd	r24, Y+3	; 0x03
     666:	9c 81       	ldd	r25, Y+4	; 0x04
     668:	fc 01       	movw	r30, r24
     66a:	86 85       	ldd	r24, Z+14	; 0x0e
     66c:	8a 83       	std	Y+2, r24	; 0x02
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	0a 96       	adiw	r24, 0x0a	; 10
     674:	2b 81       	ldd	r18, Y+3	; 0x03
     676:	3c 81       	ldd	r19, Y+4	; 0x04
     678:	f9 01       	movw	r30, r18
     67a:	22 81       	ldd	r18, Z+2	; 0x02
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	9c 81       	ldd	r25, Y+4	; 0x04
     684:	0e 96       	adiw	r24, 0x0e	; 14
     686:	2b 81       	ldd	r18, Y+3	; 0x03
     688:	3c 81       	ldd	r19, Y+4	; 0x04
     68a:	f9 01       	movw	r30, r18
     68c:	26 81       	ldd	r18, Z+6	; 0x06
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	02 96       	adiw	r24, 0x02	; 2
     698:	29 81       	ldd	r18, Y+1	; 0x01
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	06 96       	adiw	r24, 0x06	; 6
     6a4:	2a 81       	ldd	r18, Y+2	; 0x02
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	fc 01       	movw	r30, r24
     6b0:	87 81       	ldd	r24, Z+7	; 0x07
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	07 96       	adiw	r24, 0x07	; 7
     6ba:	2b 81       	ldd	r18, Y+3	; 0x03
     6bc:	3c 81       	ldd	r19, Y+4	; 0x04
     6be:	f9 01       	movw	r30, r18
     6c0:	23 81       	ldd	r18, Z+3	; 0x03
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	03 96       	adiw	r24, 0x03	; 3
     6cc:	2b 81       	ldd	r18, Y+3	; 0x03
     6ce:	3c 81       	ldd	r19, Y+4	; 0x04
     6d0:	f9 01       	movw	r30, r18
     6d2:	27 85       	ldd	r18, Z+15	; 0x0f
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	0f 96       	adiw	r24, 0x0f	; 15
     6de:	2b 81       	ldd	r18, Y+3	; 0x03
     6e0:	3c 81       	ldd	r19, Y+4	; 0x04
     6e2:	f9 01       	movw	r30, r18
     6e4:	23 85       	ldd	r18, Z+11	; 0x0b
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	0b 96       	adiw	r24, 0x0b	; 11
     6f0:	29 81       	ldd	r18, Y+1	; 0x01
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
     6f6:	00 00       	nop
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <AddRoundKey>:
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	00 d0       	rcall	.+0      	; 0x70c <AddRoundKey+0x6>
     70c:	00 d0       	rcall	.+0      	; 0x70e <AddRoundKey+0x8>
     70e:	00 d0       	rcall	.+0      	; 0x710 <AddRoundKey+0xa>
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	9c 83       	std	Y+4, r25	; 0x04
     716:	8b 83       	std	Y+3, r24	; 0x03
     718:	7e 83       	std	Y+6, r23	; 0x06
     71a:	6d 83       	std	Y+5, r22	; 0x05
     71c:	1a 82       	std	Y+2, r1	; 0x02
     71e:	19 82       	std	Y+1, r1	; 0x01
     720:	1e c0       	rjmp	.+60     	; 0x75e <AddRoundKey+0x58>
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	9a 81       	ldd	r25, Y+2	; 0x02
     726:	2b 81       	ldd	r18, Y+3	; 0x03
     728:	3c 81       	ldd	r19, Y+4	; 0x04
     72a:	82 0f       	add	r24, r18
     72c:	93 1f       	adc	r25, r19
     72e:	29 81       	ldd	r18, Y+1	; 0x01
     730:	3a 81       	ldd	r19, Y+2	; 0x02
     732:	4b 81       	ldd	r20, Y+3	; 0x03
     734:	5c 81       	ldd	r21, Y+4	; 0x04
     736:	24 0f       	add	r18, r20
     738:	35 1f       	adc	r19, r21
     73a:	f9 01       	movw	r30, r18
     73c:	60 81       	ld	r22, Z
     73e:	29 81       	ldd	r18, Y+1	; 0x01
     740:	3a 81       	ldd	r19, Y+2	; 0x02
     742:	4d 81       	ldd	r20, Y+5	; 0x05
     744:	5e 81       	ldd	r21, Y+6	; 0x06
     746:	24 0f       	add	r18, r20
     748:	35 1f       	adc	r19, r21
     74a:	f9 01       	movw	r30, r18
     74c:	20 81       	ld	r18, Z
     74e:	26 27       	eor	r18, r22
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	9a 83       	std	Y+2, r25	; 0x02
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	40 97       	sbiw	r24, 0x10	; 16
     764:	f4 f2       	brlt	.-68     	; 0x722 <AddRoundKey+0x1c>
     766:	00 00       	nop
     768:	26 96       	adiw	r28, 0x06	; 6
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <keyScheduling>:
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	a7 97       	sbiw	r28, 0x27	; 39
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	9d a3       	std	Y+37, r25	; 0x25
     790:	8c a3       	std	Y+36, r24	; 0x24
     792:	7f a3       	std	Y+39, r23	; 0x27
     794:	6e a3       	std	Y+38, r22	; 0x26
     796:	18 8a       	std	Y+16, r1	; 0x10
     798:	20 e1       	ldi	r18, 0x10	; 16
     79a:	ce 01       	movw	r24, r28
     79c:	41 96       	adiw	r24, 0x11	; 17
     79e:	fc 01       	movw	r30, r24
     7a0:	32 2f       	mov	r19, r18
     7a2:	11 92       	st	Z+, r1
     7a4:	3a 95       	dec	r19
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <keyScheduling+0x28>
     7a8:	19 a2       	std	Y+33, r1	; 0x21
     7aa:	1a a2       	std	Y+34, r1	; 0x22
     7ac:	1b a2       	std	Y+35, r1	; 0x23
     7ae:	8c a1       	ldd	r24, Y+36	; 0x24
     7b0:	9d a1       	ldd	r25, Y+37	; 0x25
     7b2:	fc 01       	movw	r30, r24
     7b4:	84 85       	ldd	r24, Z+12	; 0x0c
     7b6:	88 8b       	std	Y+16, r24	; 0x10
     7b8:	8c a1       	ldd	r24, Y+36	; 0x24
     7ba:	9d a1       	ldd	r25, Y+37	; 0x25
     7bc:	fc 01       	movw	r30, r24
     7be:	85 85       	ldd	r24, Z+13	; 0x0d
     7c0:	89 a3       	std	Y+33, r24	; 0x21
     7c2:	8c a1       	ldd	r24, Y+36	; 0x24
     7c4:	9d a1       	ldd	r25, Y+37	; 0x25
     7c6:	fc 01       	movw	r30, r24
     7c8:	86 85       	ldd	r24, Z+14	; 0x0e
     7ca:	8a a3       	std	Y+34, r24	; 0x22
     7cc:	8c a1       	ldd	r24, Y+36	; 0x24
     7ce:	9d a1       	ldd	r25, Y+37	; 0x25
     7d0:	fc 01       	movw	r30, r24
     7d2:	87 85       	ldd	r24, Z+15	; 0x0f
     7d4:	8b a3       	std	Y+35, r24	; 0x23
     7d6:	89 a1       	ldd	r24, Y+33	; 0x21
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	80 50       	subi	r24, 0x00	; 0
     7de:	9e 4f       	sbci	r25, 0xFE	; 254
     7e0:	9a 83       	std	Y+2, r25	; 0x02
     7e2:	89 83       	std	Y+1, r24	; 0x01
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
     7e8:	fc 01       	movw	r30, r24
     7ea:	84 91       	lpm	r24, Z
     7ec:	8b 83       	std	Y+3, r24	; 0x03
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	8d 8f       	std	Y+29, r24	; 0x1d
     7f2:	8a a1       	ldd	r24, Y+34	; 0x22
     7f4:	88 2f       	mov	r24, r24
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	80 50       	subi	r24, 0x00	; 0
     7fa:	9e 4f       	sbci	r25, 0xFE	; 254
     7fc:	9d 83       	std	Y+5, r25	; 0x05
     7fe:	8c 83       	std	Y+4, r24	; 0x04
     800:	8c 81       	ldd	r24, Y+4	; 0x04
     802:	9d 81       	ldd	r25, Y+5	; 0x05
     804:	fc 01       	movw	r30, r24
     806:	84 91       	lpm	r24, Z
     808:	8e 83       	std	Y+6, r24	; 0x06
     80a:	8e 81       	ldd	r24, Y+6	; 0x06
     80c:	8e 8f       	std	Y+30, r24	; 0x1e
     80e:	8b a1       	ldd	r24, Y+35	; 0x23
     810:	88 2f       	mov	r24, r24
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	80 50       	subi	r24, 0x00	; 0
     816:	9e 4f       	sbci	r25, 0xFE	; 254
     818:	98 87       	std	Y+8, r25	; 0x08
     81a:	8f 83       	std	Y+7, r24	; 0x07
     81c:	8f 81       	ldd	r24, Y+7	; 0x07
     81e:	98 85       	ldd	r25, Y+8	; 0x08
     820:	fc 01       	movw	r30, r24
     822:	84 91       	lpm	r24, Z
     824:	89 87       	std	Y+9, r24	; 0x09
     826:	89 85       	ldd	r24, Y+9	; 0x09
     828:	8f 8f       	std	Y+31, r24	; 0x1f
     82a:	88 89       	ldd	r24, Y+16	; 0x10
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	80 50       	subi	r24, 0x00	; 0
     832:	9e 4f       	sbci	r25, 0xFE	; 254
     834:	9b 87       	std	Y+11, r25	; 0x0b
     836:	8a 87       	std	Y+10, r24	; 0x0a
     838:	8a 85       	ldd	r24, Y+10	; 0x0a
     83a:	9b 85       	ldd	r25, Y+11	; 0x0b
     83c:	fc 01       	movw	r30, r24
     83e:	84 91       	lpm	r24, Z
     840:	8c 87       	std	Y+12, r24	; 0x0c
     842:	8c 85       	ldd	r24, Y+12	; 0x0c
     844:	88 a3       	std	Y+32, r24	; 0x20
     846:	8e a1       	ldd	r24, Y+38	; 0x26
     848:	9f a1       	ldd	r25, Y+39	; 0x27
     84a:	fc 01       	movw	r30, r24
     84c:	80 81       	ld	r24, Z
     84e:	89 a3       	std	Y+33, r24	; 0x21
     850:	89 a1       	ldd	r24, Y+33	; 0x21
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	80 50       	subi	r24, 0x00	; 0
     858:	9f 4f       	sbci	r25, 0xFF	; 255
     85a:	9e 87       	std	Y+14, r25	; 0x0e
     85c:	8d 87       	std	Y+13, r24	; 0x0d
     85e:	8d 85       	ldd	r24, Y+13	; 0x0d
     860:	9e 85       	ldd	r25, Y+14	; 0x0e
     862:	fc 01       	movw	r30, r24
     864:	84 91       	lpm	r24, Z
     866:	8f 87       	std	Y+15, r24	; 0x0f
     868:	8f 85       	ldd	r24, Y+15	; 0x0f
     86a:	88 8b       	std	Y+16, r24	; 0x10
     86c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     86e:	88 89       	ldd	r24, Y+16	; 0x10
     870:	29 2f       	mov	r18, r25
     872:	28 27       	eor	r18, r24
     874:	8c a1       	ldd	r24, Y+36	; 0x24
     876:	9d a1       	ldd	r25, Y+37	; 0x25
     878:	fc 01       	movw	r30, r24
     87a:	80 81       	ld	r24, Z
     87c:	82 27       	eor	r24, r18
     87e:	89 8b       	std	Y+17, r24	; 0x11
     880:	2e 8d       	ldd	r18, Y+30	; 0x1e
     882:	8c a1       	ldd	r24, Y+36	; 0x24
     884:	9d a1       	ldd	r25, Y+37	; 0x25
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	82 27       	eor	r24, r18
     88e:	8a 8b       	std	Y+18, r24	; 0x12
     890:	2f 8d       	ldd	r18, Y+31	; 0x1f
     892:	8c a1       	ldd	r24, Y+36	; 0x24
     894:	9d a1       	ldd	r25, Y+37	; 0x25
     896:	02 96       	adiw	r24, 0x02	; 2
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	82 27       	eor	r24, r18
     89e:	8b 8b       	std	Y+19, r24	; 0x13
     8a0:	28 a1       	ldd	r18, Y+32	; 0x20
     8a2:	8c a1       	ldd	r24, Y+36	; 0x24
     8a4:	9d a1       	ldd	r25, Y+37	; 0x25
     8a6:	03 96       	adiw	r24, 0x03	; 3
     8a8:	fc 01       	movw	r30, r24
     8aa:	80 81       	ld	r24, Z
     8ac:	82 27       	eor	r24, r18
     8ae:	8c 8b       	std	Y+20, r24	; 0x14
     8b0:	29 89       	ldd	r18, Y+17	; 0x11
     8b2:	8c a1       	ldd	r24, Y+36	; 0x24
     8b4:	9d a1       	ldd	r25, Y+37	; 0x25
     8b6:	04 96       	adiw	r24, 0x04	; 4
     8b8:	fc 01       	movw	r30, r24
     8ba:	80 81       	ld	r24, Z
     8bc:	82 27       	eor	r24, r18
     8be:	8d 8b       	std	Y+21, r24	; 0x15
     8c0:	2a 89       	ldd	r18, Y+18	; 0x12
     8c2:	8c a1       	ldd	r24, Y+36	; 0x24
     8c4:	9d a1       	ldd	r25, Y+37	; 0x25
     8c6:	05 96       	adiw	r24, 0x05	; 5
     8c8:	fc 01       	movw	r30, r24
     8ca:	80 81       	ld	r24, Z
     8cc:	82 27       	eor	r24, r18
     8ce:	8e 8b       	std	Y+22, r24	; 0x16
     8d0:	2b 89       	ldd	r18, Y+19	; 0x13
     8d2:	8c a1       	ldd	r24, Y+36	; 0x24
     8d4:	9d a1       	ldd	r25, Y+37	; 0x25
     8d6:	06 96       	adiw	r24, 0x06	; 6
     8d8:	fc 01       	movw	r30, r24
     8da:	80 81       	ld	r24, Z
     8dc:	82 27       	eor	r24, r18
     8de:	8f 8b       	std	Y+23, r24	; 0x17
     8e0:	2c 89       	ldd	r18, Y+20	; 0x14
     8e2:	8c a1       	ldd	r24, Y+36	; 0x24
     8e4:	9d a1       	ldd	r25, Y+37	; 0x25
     8e6:	07 96       	adiw	r24, 0x07	; 7
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	82 27       	eor	r24, r18
     8ee:	88 8f       	std	Y+24, r24	; 0x18
     8f0:	2d 89       	ldd	r18, Y+21	; 0x15
     8f2:	8c a1       	ldd	r24, Y+36	; 0x24
     8f4:	9d a1       	ldd	r25, Y+37	; 0x25
     8f6:	08 96       	adiw	r24, 0x08	; 8
     8f8:	fc 01       	movw	r30, r24
     8fa:	80 81       	ld	r24, Z
     8fc:	82 27       	eor	r24, r18
     8fe:	89 8f       	std	Y+25, r24	; 0x19
     900:	2e 89       	ldd	r18, Y+22	; 0x16
     902:	8c a1       	ldd	r24, Y+36	; 0x24
     904:	9d a1       	ldd	r25, Y+37	; 0x25
     906:	09 96       	adiw	r24, 0x09	; 9
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	82 27       	eor	r24, r18
     90e:	8a 8f       	std	Y+26, r24	; 0x1a
     910:	2f 89       	ldd	r18, Y+23	; 0x17
     912:	8c a1       	ldd	r24, Y+36	; 0x24
     914:	9d a1       	ldd	r25, Y+37	; 0x25
     916:	0a 96       	adiw	r24, 0x0a	; 10
     918:	fc 01       	movw	r30, r24
     91a:	80 81       	ld	r24, Z
     91c:	82 27       	eor	r24, r18
     91e:	8b 8f       	std	Y+27, r24	; 0x1b
     920:	28 8d       	ldd	r18, Y+24	; 0x18
     922:	8c a1       	ldd	r24, Y+36	; 0x24
     924:	9d a1       	ldd	r25, Y+37	; 0x25
     926:	0b 96       	adiw	r24, 0x0b	; 11
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	82 27       	eor	r24, r18
     92e:	8c 8f       	std	Y+28, r24	; 0x1c
     930:	29 8d       	ldd	r18, Y+25	; 0x19
     932:	8c a1       	ldd	r24, Y+36	; 0x24
     934:	9d a1       	ldd	r25, Y+37	; 0x25
     936:	0c 96       	adiw	r24, 0x0c	; 12
     938:	fc 01       	movw	r30, r24
     93a:	80 81       	ld	r24, Z
     93c:	82 27       	eor	r24, r18
     93e:	8d 8f       	std	Y+29, r24	; 0x1d
     940:	2a 8d       	ldd	r18, Y+26	; 0x1a
     942:	8c a1       	ldd	r24, Y+36	; 0x24
     944:	9d a1       	ldd	r25, Y+37	; 0x25
     946:	0d 96       	adiw	r24, 0x0d	; 13
     948:	fc 01       	movw	r30, r24
     94a:	80 81       	ld	r24, Z
     94c:	82 27       	eor	r24, r18
     94e:	8e 8f       	std	Y+30, r24	; 0x1e
     950:	2b 8d       	ldd	r18, Y+27	; 0x1b
     952:	8c a1       	ldd	r24, Y+36	; 0x24
     954:	9d a1       	ldd	r25, Y+37	; 0x25
     956:	0e 96       	adiw	r24, 0x0e	; 14
     958:	fc 01       	movw	r30, r24
     95a:	80 81       	ld	r24, Z
     95c:	82 27       	eor	r24, r18
     95e:	8f 8f       	std	Y+31, r24	; 0x1f
     960:	2c 8d       	ldd	r18, Y+28	; 0x1c
     962:	8c a1       	ldd	r24, Y+36	; 0x24
     964:	9d a1       	ldd	r25, Y+37	; 0x25
     966:	0f 96       	adiw	r24, 0x0f	; 15
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	82 27       	eor	r24, r18
     96e:	88 a3       	std	Y+32, r24	; 0x20
     970:	8e a1       	ldd	r24, Y+38	; 0x26
     972:	9f a1       	ldd	r25, Y+39	; 0x27
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	28 0f       	add	r18, r24
     97c:	8e a1       	ldd	r24, Y+38	; 0x26
     97e:	9f a1       	ldd	r25, Y+39	; 0x27
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	18 8a       	std	Y+16, r1	; 0x10
     986:	16 c0       	rjmp	.+44     	; 0x9b4 <keyScheduling+0x23a>
     988:	88 89       	ldd	r24, Y+16	; 0x10
     98a:	88 2f       	mov	r24, r24
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	2c a1       	ldd	r18, Y+36	; 0x24
     990:	3d a1       	ldd	r19, Y+37	; 0x25
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	28 89       	ldd	r18, Y+16	; 0x10
     998:	22 2f       	mov	r18, r18
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	ae 01       	movw	r20, r28
     99e:	4f 5e       	subi	r20, 0xEF	; 239
     9a0:	5f 4f       	sbci	r21, 0xFF	; 255
     9a2:	24 0f       	add	r18, r20
     9a4:	35 1f       	adc	r19, r21
     9a6:	f9 01       	movw	r30, r18
     9a8:	20 81       	ld	r18, Z
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
     9ae:	88 89       	ldd	r24, Y+16	; 0x10
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	88 8b       	std	Y+16, r24	; 0x10
     9b4:	88 89       	ldd	r24, Y+16	; 0x10
     9b6:	80 31       	cpi	r24, 0x10	; 16
     9b8:	38 f3       	brcs	.-50     	; 0x988 <keyScheduling+0x20e>
     9ba:	00 00       	nop
     9bc:	a7 96       	adiw	r28, 0x27	; 39
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <reset_count>:

void reset_count(u8* count)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <reset_count+0x6>
     9d4:	1f 92       	push	r1
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	9b 83       	std	Y+3, r25	; 0x03
     9dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 cnt_i = 0;
     9de:	19 82       	std	Y+1, r1	; 0x01
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     9e0:	19 82       	std	Y+1, r1	; 0x01
     9e2:	0c c0       	rjmp	.+24     	; 0x9fc <reset_count+0x2e>
	{
		count[cnt_i] = 0x00;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	88 2f       	mov	r24, r24
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	2a 81       	ldd	r18, Y+2	; 0x02
     9ec:	3b 81       	ldd	r19, Y+3	; 0x03
     9ee:	82 0f       	add	r24, r18
     9f0:	93 1f       	adc	r25, r19
     9f2:	fc 01       	movw	r30, r24
     9f4:	10 82       	st	Z, r1
}

void reset_count(u8* count)
{
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	80 31       	cpi	r24, 0x10	; 16
     a00:	88 f3       	brcs	.-30     	; 0x9e4 <reset_count+0x16>
	{
		count[cnt_i] = 0x00;
	}
}
     a02:	00 00       	nop
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <state_copy>:

void state_copy(u8* dst, u8* src)
{
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	00 d0       	rcall	.+0      	; 0xa16 <state_copy+0x6>
     a16:	00 d0       	rcall	.+0      	; 0xa18 <state_copy+0x8>
     a18:	1f 92       	push	r1
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	9b 83       	std	Y+3, r25	; 0x03
     a20:	8a 83       	std	Y+2, r24	; 0x02
     a22:	7d 83       	std	Y+5, r23	; 0x05
     a24:	6c 83       	std	Y+4, r22	; 0x04
	u8 cnt_i = 0;
     a26:	19 82       	std	Y+1, r1	; 0x01
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     a28:	19 82       	std	Y+1, r1	; 0x01
     a2a:	15 c0       	rjmp	.+42     	; 0xa56 <state_copy+0x46>
	{
		dst[cnt_i] = src[cnt_i];
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	88 2f       	mov	r24, r24
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2a 81       	ldd	r18, Y+2	; 0x02
     a34:	3b 81       	ldd	r19, Y+3	; 0x03
     a36:	82 0f       	add	r24, r18
     a38:	93 1f       	adc	r25, r19
     a3a:	29 81       	ldd	r18, Y+1	; 0x01
     a3c:	22 2f       	mov	r18, r18
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	4c 81       	ldd	r20, Y+4	; 0x04
     a42:	5d 81       	ldd	r21, Y+5	; 0x05
     a44:	24 0f       	add	r18, r20
     a46:	35 1f       	adc	r19, r21
     a48:	f9 01       	movw	r30, r18
     a4a:	20 81       	ld	r18, Z
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
}

void state_copy(u8* dst, u8* src)
{
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	80 31       	cpi	r24, 0x10	; 16
     a5a:	40 f3       	brcs	.-48     	; 0xa2c <state_copy+0x1c>
	{
		dst[cnt_i] = src[cnt_i];
	}
}
     a5c:	00 00       	nop
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <Count_Add_for_LUT>:
void Count_Add_for_LUT(u8* count, u8* cnt_k)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	62 97       	sbiw	r28, 0x12	; 18
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	98 8b       	std	Y+16, r25	; 0x10
     a84:	8f 87       	std	Y+15, r24	; 0x0f
     a86:	7a 8b       	std	Y+18, r23	; 0x12
     a88:	69 8b       	std	Y+17, r22	; 0x11
	
	u8 carry = 0;           //맨처음 Carry 값은 0
     a8a:	19 82       	std	Y+1, r1	; 0x01
	u8 out[4] = { 0x00 }; // 최종배열
     a8c:	1e 82       	std	Y+6, r1	; 0x06
     a8e:	1f 82       	std	Y+7, r1	; 0x07
     a90:	18 86       	std	Y+8, r1	; 0x08
     a92:	19 86       	std	Y+9, r1	; 0x09
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
     a94:	1a 86       	std	Y+10, r1	; 0x0a
     a96:	1b 86       	std	Y+11, r1	; 0x0b
     a98:	1c 86       	std	Y+12, r1	; 0x0c
     a9a:	1d 86       	std	Y+13, r1	; 0x0d

	if (*cnt_k == 0)
     a9c:	89 89       	ldd	r24, Y+17	; 0x11
     a9e:	9a 89       	ldd	r25, Y+18	; 0x12
     aa0:	fc 01       	movw	r30, r24
     aa2:	80 81       	ld	r24, Z
     aa4:	88 23       	and	r24, r24
     aa6:	09 f0       	breq	.+2      	; 0xaaa <Count_Add_for_LUT+0x3c>
     aa8:	4c c0       	rjmp	.+152    	; 0xb42 <Count_Add_for_LUT+0xd4>
	{
		one[3] = 0x01;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	8d 87       	std	Y+13, r24	; 0x0d
		int8_t i = 3;
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	8a 83       	std	Y+2, r24	; 0x02
		while(i >=0)
     ab2:	43 c0       	rjmp	.+134    	; 0xb3a <Count_Add_for_LUT+0xcc>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	08 2e       	mov	r0, r24
     ab8:	00 0c       	add	r0, r0
     aba:	99 0b       	sbc	r25, r25
     abc:	2a 81       	ldd	r18, Y+2	; 0x02
     abe:	02 2e       	mov	r0, r18
     ac0:	00 0c       	add	r0, r0
     ac2:	33 0b       	sbc	r19, r19
     ac4:	4f 85       	ldd	r20, Y+15	; 0x0f
     ac6:	58 89       	ldd	r21, Y+16	; 0x10
     ac8:	24 0f       	add	r18, r20
     aca:	35 1f       	adc	r19, r21
     acc:	f9 01       	movw	r30, r18
     ace:	60 81       	ld	r22, Z
     ad0:	2a 81       	ldd	r18, Y+2	; 0x02
     ad2:	02 2e       	mov	r0, r18
     ad4:	00 0c       	add	r0, r0
     ad6:	33 0b       	sbc	r19, r19
     ad8:	ae 01       	movw	r20, r28
     ada:	46 5f       	subi	r20, 0xF6	; 246
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	24 0f       	add	r18, r20
     ae0:	35 1f       	adc	r19, r21
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	36 2f       	mov	r19, r22
     ae8:	32 0f       	add	r19, r18
     aea:	29 81       	ldd	r18, Y+1	; 0x01
     aec:	43 2f       	mov	r20, r19
     aee:	42 0f       	add	r20, r18
     af0:	9e 01       	movw	r18, r28
     af2:	2a 5f       	subi	r18, 0xFA	; 250
     af4:	3f 4f       	sbci	r19, 0xFF	; 255
     af6:	82 0f       	add	r24, r18
     af8:	93 1f       	adc	r25, r19
     afa:	fc 01       	movw	r30, r24
     afc:	40 83       	st	Z, r20
			if (out[i] < count[i])
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	08 2e       	mov	r0, r24
     b02:	00 0c       	add	r0, r0
     b04:	99 0b       	sbc	r25, r25
     b06:	9e 01       	movw	r18, r28
     b08:	2a 5f       	subi	r18, 0xFA	; 250
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	82 0f       	add	r24, r18
     b0e:	93 1f       	adc	r25, r19
     b10:	fc 01       	movw	r30, r24
     b12:	40 81       	ld	r20, Z
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	08 2e       	mov	r0, r24
     b18:	00 0c       	add	r0, r0
     b1a:	99 0b       	sbc	r25, r25
     b1c:	2f 85       	ldd	r18, Y+15	; 0x0f
     b1e:	38 89       	ldd	r19, Y+16	; 0x10
     b20:	82 0f       	add	r24, r18
     b22:	93 1f       	adc	r25, r19
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	48 17       	cp	r20, r24
     b2a:	18 f4       	brcc	.+6      	; 0xb32 <Count_Add_for_LUT+0xc4>
			carry = 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <Count_Add_for_LUT+0xc6>
			else
			{
				carry = 0;
     b32:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	81 50       	subi	r24, 0x01	; 1
     b38:	8a 83       	std	Y+2, r24	; 0x02

	if (*cnt_k == 0)
	{
		one[3] = 0x01;
		int8_t i = 3;
		while(i >=0)
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	88 23       	and	r24, r24
     b3e:	0c f0       	brlt	.+2      	; 0xb42 <Count_Add_for_LUT+0xd4>
     b40:	b9 cf       	rjmp	.-142    	; 0xab4 <Count_Add_for_LUT+0x46>
			}
			i--;
		}
		
	}
	if (*cnt_k == 1)
     b42:	89 89       	ldd	r24, Y+17	; 0x11
     b44:	9a 89       	ldd	r25, Y+18	; 0x12
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	09 f0       	breq	.+2      	; 0xb50 <Count_Add_for_LUT+0xe2>
     b4e:	4c c0       	rjmp	.+152    	; 0xbe8 <Count_Add_for_LUT+0x17a>
	{
		one[2] = 0x01;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	8c 87       	std	Y+12, r24	; 0x0c
		int8_t i = 2;
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	8b 83       	std	Y+3, r24	; 0x03
		while(i >=0)
     b58:	43 c0       	rjmp	.+134    	; 0xbe0 <Count_Add_for_LUT+0x172>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	08 2e       	mov	r0, r24
     b5e:	00 0c       	add	r0, r0
     b60:	99 0b       	sbc	r25, r25
     b62:	2b 81       	ldd	r18, Y+3	; 0x03
     b64:	02 2e       	mov	r0, r18
     b66:	00 0c       	add	r0, r0
     b68:	33 0b       	sbc	r19, r19
     b6a:	4f 85       	ldd	r20, Y+15	; 0x0f
     b6c:	58 89       	ldd	r21, Y+16	; 0x10
     b6e:	24 0f       	add	r18, r20
     b70:	35 1f       	adc	r19, r21
     b72:	f9 01       	movw	r30, r18
     b74:	60 81       	ld	r22, Z
     b76:	2b 81       	ldd	r18, Y+3	; 0x03
     b78:	02 2e       	mov	r0, r18
     b7a:	00 0c       	add	r0, r0
     b7c:	33 0b       	sbc	r19, r19
     b7e:	ae 01       	movw	r20, r28
     b80:	46 5f       	subi	r20, 0xF6	; 246
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	24 0f       	add	r18, r20
     b86:	35 1f       	adc	r19, r21
     b88:	f9 01       	movw	r30, r18
     b8a:	20 81       	ld	r18, Z
     b8c:	36 2f       	mov	r19, r22
     b8e:	32 0f       	add	r19, r18
     b90:	29 81       	ldd	r18, Y+1	; 0x01
     b92:	43 2f       	mov	r20, r19
     b94:	42 0f       	add	r20, r18
     b96:	9e 01       	movw	r18, r28
     b98:	2a 5f       	subi	r18, 0xFA	; 250
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	fc 01       	movw	r30, r24
     ba2:	40 83       	st	Z, r20
			if (out[i] < count[i])
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	08 2e       	mov	r0, r24
     ba8:	00 0c       	add	r0, r0
     baa:	99 0b       	sbc	r25, r25
     bac:	9e 01       	movw	r18, r28
     bae:	2a 5f       	subi	r18, 0xFA	; 250
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	fc 01       	movw	r30, r24
     bb8:	40 81       	ld	r20, Z
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	08 2e       	mov	r0, r24
     bbe:	00 0c       	add	r0, r0
     bc0:	99 0b       	sbc	r25, r25
     bc2:	2f 85       	ldd	r18, Y+15	; 0x0f
     bc4:	38 89       	ldd	r19, Y+16	; 0x10
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	48 17       	cp	r20, r24
     bd0:	18 f4       	brcc	.+6      	; 0xbd8 <Count_Add_for_LUT+0x16a>
			carry = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <Count_Add_for_LUT+0x16c>
			else
			{
				carry = 0;
     bd8:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	81 50       	subi	r24, 0x01	; 1
     bde:	8b 83       	std	Y+3, r24	; 0x03
	}
	if (*cnt_k == 1)
	{
		one[2] = 0x01;
		int8_t i = 2;
		while(i >=0)
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	88 23       	and	r24, r24
     be4:	0c f0       	brlt	.+2      	; 0xbe8 <Count_Add_for_LUT+0x17a>
     be6:	b9 cf       	rjmp	.-142    	; 0xb5a <Count_Add_for_LUT+0xec>
				carry = 0;
			}
			i--;
		}
	}
	if (*cnt_k == 2)
     be8:	89 89       	ldd	r24, Y+17	; 0x11
     bea:	9a 89       	ldd	r25, Y+18	; 0x12
     bec:	fc 01       	movw	r30, r24
     bee:	80 81       	ld	r24, Z
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <Count_Add_for_LUT+0x188>
     bf4:	4c c0       	rjmp	.+152    	; 0xc8e <Count_Add_for_LUT+0x220>
	{
		one[1] = 0x01;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	8b 87       	std	Y+11, r24	; 0x0b
		int8_t i = 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	8c 83       	std	Y+4, r24	; 0x04
		while(i >=0)
     bfe:	43 c0       	rjmp	.+134    	; 0xc86 <Count_Add_for_LUT+0x218>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	08 2e       	mov	r0, r24
     c04:	00 0c       	add	r0, r0
     c06:	99 0b       	sbc	r25, r25
     c08:	2c 81       	ldd	r18, Y+4	; 0x04
     c0a:	02 2e       	mov	r0, r18
     c0c:	00 0c       	add	r0, r0
     c0e:	33 0b       	sbc	r19, r19
     c10:	4f 85       	ldd	r20, Y+15	; 0x0f
     c12:	58 89       	ldd	r21, Y+16	; 0x10
     c14:	24 0f       	add	r18, r20
     c16:	35 1f       	adc	r19, r21
     c18:	f9 01       	movw	r30, r18
     c1a:	60 81       	ld	r22, Z
     c1c:	2c 81       	ldd	r18, Y+4	; 0x04
     c1e:	02 2e       	mov	r0, r18
     c20:	00 0c       	add	r0, r0
     c22:	33 0b       	sbc	r19, r19
     c24:	ae 01       	movw	r20, r28
     c26:	46 5f       	subi	r20, 0xF6	; 246
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	24 0f       	add	r18, r20
     c2c:	35 1f       	adc	r19, r21
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	36 2f       	mov	r19, r22
     c34:	32 0f       	add	r19, r18
     c36:	29 81       	ldd	r18, Y+1	; 0x01
     c38:	43 2f       	mov	r20, r19
     c3a:	42 0f       	add	r20, r18
     c3c:	9e 01       	movw	r18, r28
     c3e:	2a 5f       	subi	r18, 0xFA	; 250
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	82 0f       	add	r24, r18
     c44:	93 1f       	adc	r25, r19
     c46:	fc 01       	movw	r30, r24
     c48:	40 83       	st	Z, r20
			if (out[i] < count[i])
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	08 2e       	mov	r0, r24
     c4e:	00 0c       	add	r0, r0
     c50:	99 0b       	sbc	r25, r25
     c52:	9e 01       	movw	r18, r28
     c54:	2a 5f       	subi	r18, 0xFA	; 250
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	82 0f       	add	r24, r18
     c5a:	93 1f       	adc	r25, r19
     c5c:	fc 01       	movw	r30, r24
     c5e:	40 81       	ld	r20, Z
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	08 2e       	mov	r0, r24
     c64:	00 0c       	add	r0, r0
     c66:	99 0b       	sbc	r25, r25
     c68:	2f 85       	ldd	r18, Y+15	; 0x0f
     c6a:	38 89       	ldd	r19, Y+16	; 0x10
     c6c:	82 0f       	add	r24, r18
     c6e:	93 1f       	adc	r25, r19
     c70:	fc 01       	movw	r30, r24
     c72:	80 81       	ld	r24, Z
     c74:	48 17       	cp	r20, r24
     c76:	18 f4       	brcc	.+6      	; 0xc7e <Count_Add_for_LUT+0x210>
			carry = 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <Count_Add_for_LUT+0x212>
			else
			{
				carry = 0;
     c7e:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	81 50       	subi	r24, 0x01	; 1
     c84:	8c 83       	std	Y+4, r24	; 0x04
	}
	if (*cnt_k == 2)
	{
		one[1] = 0x01;
		int8_t i = 1;
		while(i >=0)
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	88 23       	and	r24, r24
     c8a:	0c f0       	brlt	.+2      	; 0xc8e <Count_Add_for_LUT+0x220>
     c8c:	b9 cf       	rjmp	.-142    	; 0xc00 <Count_Add_for_LUT+0x192>
				carry = 0;
			}
			i--;
		}
	}
	if (*cnt_k == 3)
     c8e:	89 89       	ldd	r24, Y+17	; 0x11
     c90:	9a 89       	ldd	r25, Y+18	; 0x12
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	09 f0       	breq	.+2      	; 0xc9c <Count_Add_for_LUT+0x22e>
     c9a:	4b c0       	rjmp	.+150    	; 0xd32 <Count_Add_for_LUT+0x2c4>
	{
		one[0] = 0x01;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8a 87       	std	Y+10, r24	; 0x0a
		int8_t i = 0;
     ca0:	1d 82       	std	Y+5, r1	; 0x05
		while(i >=0)
     ca2:	43 c0       	rjmp	.+134    	; 0xd2a <Count_Add_for_LUT+0x2bc>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	08 2e       	mov	r0, r24
     ca8:	00 0c       	add	r0, r0
     caa:	99 0b       	sbc	r25, r25
     cac:	2d 81       	ldd	r18, Y+5	; 0x05
     cae:	02 2e       	mov	r0, r18
     cb0:	00 0c       	add	r0, r0
     cb2:	33 0b       	sbc	r19, r19
     cb4:	4f 85       	ldd	r20, Y+15	; 0x0f
     cb6:	58 89       	ldd	r21, Y+16	; 0x10
     cb8:	24 0f       	add	r18, r20
     cba:	35 1f       	adc	r19, r21
     cbc:	f9 01       	movw	r30, r18
     cbe:	60 81       	ld	r22, Z
     cc0:	2d 81       	ldd	r18, Y+5	; 0x05
     cc2:	02 2e       	mov	r0, r18
     cc4:	00 0c       	add	r0, r0
     cc6:	33 0b       	sbc	r19, r19
     cc8:	ae 01       	movw	r20, r28
     cca:	46 5f       	subi	r20, 0xF6	; 246
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	24 0f       	add	r18, r20
     cd0:	35 1f       	adc	r19, r21
     cd2:	f9 01       	movw	r30, r18
     cd4:	20 81       	ld	r18, Z
     cd6:	36 2f       	mov	r19, r22
     cd8:	32 0f       	add	r19, r18
     cda:	29 81       	ldd	r18, Y+1	; 0x01
     cdc:	43 2f       	mov	r20, r19
     cde:	42 0f       	add	r20, r18
     ce0:	9e 01       	movw	r18, r28
     ce2:	2a 5f       	subi	r18, 0xFA	; 250
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	fc 01       	movw	r30, r24
     cec:	40 83       	st	Z, r20
			if (out[i] < count[i])
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	08 2e       	mov	r0, r24
     cf2:	00 0c       	add	r0, r0
     cf4:	99 0b       	sbc	r25, r25
     cf6:	9e 01       	movw	r18, r28
     cf8:	2a 5f       	subi	r18, 0xFA	; 250
     cfa:	3f 4f       	sbci	r19, 0xFF	; 255
     cfc:	82 0f       	add	r24, r18
     cfe:	93 1f       	adc	r25, r19
     d00:	fc 01       	movw	r30, r24
     d02:	40 81       	ld	r20, Z
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	08 2e       	mov	r0, r24
     d08:	00 0c       	add	r0, r0
     d0a:	99 0b       	sbc	r25, r25
     d0c:	2f 85       	ldd	r18, Y+15	; 0x0f
     d0e:	38 89       	ldd	r19, Y+16	; 0x10
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	48 17       	cp	r20, r24
     d1a:	18 f4       	brcc	.+6      	; 0xd22 <Count_Add_for_LUT+0x2b4>
			carry = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <Count_Add_for_LUT+0x2b6>
			else
			{
				carry = 0;
     d22:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	81 50       	subi	r24, 0x01	; 1
     d28:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (*cnt_k == 3)
	{
		one[0] = 0x01;
		int8_t i = 0;
		while(i >=0)
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	88 23       	and	r24, r24
     d2e:	0c f0       	brlt	.+2      	; 0xd32 <Count_Add_for_LUT+0x2c4>
     d30:	b9 cf       	rjmp	.-142    	; 0xca4 <Count_Add_for_LUT+0x236>
			}
			i--;
		}
	}

	for (volatile int8_t cnt_i = 0; cnt_i < 4; cnt_i++)
     d32:	1e 86       	std	Y+14, r1	; 0x0e
     d34:	18 c0       	rjmp	.+48     	; 0xd66 <Count_Add_for_LUT+0x2f8>
	{
		count[cnt_i] = out[cnt_i];
     d36:	8e 85       	ldd	r24, Y+14	; 0x0e
     d38:	08 2e       	mov	r0, r24
     d3a:	00 0c       	add	r0, r0
     d3c:	99 0b       	sbc	r25, r25
     d3e:	2f 85       	ldd	r18, Y+15	; 0x0f
     d40:	38 89       	ldd	r19, Y+16	; 0x10
     d42:	82 0f       	add	r24, r18
     d44:	93 1f       	adc	r25, r19
     d46:	2e 85       	ldd	r18, Y+14	; 0x0e
     d48:	02 2e       	mov	r0, r18
     d4a:	00 0c       	add	r0, r0
     d4c:	33 0b       	sbc	r19, r19
     d4e:	ae 01       	movw	r20, r28
     d50:	4a 5f       	subi	r20, 0xFA	; 250
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	24 0f       	add	r18, r20
     d56:	35 1f       	adc	r19, r21
     d58:	f9 01       	movw	r30, r18
     d5a:	20 81       	ld	r18, Z
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18
			}
			i--;
		}
	}

	for (volatile int8_t cnt_i = 0; cnt_i < 4; cnt_i++)
     d60:	8e 85       	ldd	r24, Y+14	; 0x0e
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	8e 87       	std	Y+14, r24	; 0x0e
     d66:	8e 85       	ldd	r24, Y+14	; 0x0e
     d68:	84 30       	cpi	r24, 0x04	; 4
     d6a:	2c f3       	brlt	.-54     	; 0xd36 <Count_Add_for_LUT+0x2c8>
	{
		count[cnt_i] = out[cnt_i];
	}
	
}
     d6c:	00 00       	nop
     d6e:	62 96       	adiw	r28, 0x12	; 18
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <Count_Add_for_FACE_LIGHT>:
void Count_Add_for_FACE_LIGHT(u8* count)
{
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	2d 97       	sbiw	r28, 0x0d	; 13
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	9d 87       	std	Y+13, r25	; 0x0d
     d96:	8c 87       	std	Y+12, r24	; 0x0c
	u8 carry = 0;           //맨처음 Carry 값은 0
     d98:	19 82       	std	Y+1, r1	; 0x01
	u8 out[4] = { 0x00 }; // 최종배열
     d9a:	1c 82       	std	Y+4, r1	; 0x04
     d9c:	1d 82       	std	Y+5, r1	; 0x05
     d9e:	1e 82       	std	Y+6, r1	; 0x06
     da0:	1f 82       	std	Y+7, r1	; 0x07
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
     da2:	18 86       	std	Y+8, r1	; 0x08
     da4:	19 86       	std	Y+9, r1	; 0x09
     da6:	1a 86       	std	Y+10, r1	; 0x0a
     da8:	1b 86       	std	Y+11, r1	; 0x0b
	one[3] = 0x01;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	8b 87       	std	Y+11, r24	; 0x0b

	int8_t i = 3,cnt_i = 0;
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	8a 83       	std	Y+2, r24	; 0x02
     db2:	1b 82       	std	Y+3, r1	; 0x03
	while(i >=0)
     db4:	43 c0       	rjmp	.+134    	; 0xe3c <Count_Add_for_FACE_LIGHT+0xbc>
	{
		out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	08 2e       	mov	r0, r24
     dba:	00 0c       	add	r0, r0
     dbc:	99 0b       	sbc	r25, r25
     dbe:	2a 81       	ldd	r18, Y+2	; 0x02
     dc0:	02 2e       	mov	r0, r18
     dc2:	00 0c       	add	r0, r0
     dc4:	33 0b       	sbc	r19, r19
     dc6:	4c 85       	ldd	r20, Y+12	; 0x0c
     dc8:	5d 85       	ldd	r21, Y+13	; 0x0d
     dca:	24 0f       	add	r18, r20
     dcc:	35 1f       	adc	r19, r21
     dce:	f9 01       	movw	r30, r18
     dd0:	60 81       	ld	r22, Z
     dd2:	2a 81       	ldd	r18, Y+2	; 0x02
     dd4:	02 2e       	mov	r0, r18
     dd6:	00 0c       	add	r0, r0
     dd8:	33 0b       	sbc	r19, r19
     dda:	ae 01       	movw	r20, r28
     ddc:	48 5f       	subi	r20, 0xF8	; 248
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	24 0f       	add	r18, r20
     de2:	35 1f       	adc	r19, r21
     de4:	f9 01       	movw	r30, r18
     de6:	20 81       	ld	r18, Z
     de8:	36 2f       	mov	r19, r22
     dea:	32 0f       	add	r19, r18
     dec:	29 81       	ldd	r18, Y+1	; 0x01
     dee:	43 2f       	mov	r20, r19
     df0:	42 0f       	add	r20, r18
     df2:	9e 01       	movw	r18, r28
     df4:	2c 5f       	subi	r18, 0xFC	; 252
     df6:	3f 4f       	sbci	r19, 0xFF	; 255
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	fc 01       	movw	r30, r24
     dfe:	40 83       	st	Z, r20
		if (out[i] < count[i])
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	08 2e       	mov	r0, r24
     e04:	00 0c       	add	r0, r0
     e06:	99 0b       	sbc	r25, r25
     e08:	9e 01       	movw	r18, r28
     e0a:	2c 5f       	subi	r18, 0xFC	; 252
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	fc 01       	movw	r30, r24
     e14:	40 81       	ld	r20, Z
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	08 2e       	mov	r0, r24
     e1a:	00 0c       	add	r0, r0
     e1c:	99 0b       	sbc	r25, r25
     e1e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e20:	3d 85       	ldd	r19, Y+13	; 0x0d
     e22:	82 0f       	add	r24, r18
     e24:	93 1f       	adc	r25, r19
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	48 17       	cp	r20, r24
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <Count_Add_for_FACE_LIGHT+0xb4>
		carry = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <Count_Add_for_FACE_LIGHT+0xb6>
		else
		{
			carry = 0;
     e34:	19 82       	std	Y+1, r1	; 0x01
		}
		i--;
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	81 50       	subi	r24, 0x01	; 1
     e3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 out[4] = { 0x00 }; // 최종배열
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
	one[3] = 0x01;

	int8_t i = 3,cnt_i = 0;
	while(i >=0)
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	88 23       	and	r24, r24
     e40:	0c f0       	brlt	.+2      	; 0xe44 <Count_Add_for_FACE_LIGHT+0xc4>
     e42:	b9 cf       	rjmp	.-142    	; 0xdb6 <Count_Add_for_FACE_LIGHT+0x36>
		{
			carry = 0;
		}
		i--;
	}
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
     e44:	1b 82       	std	Y+3, r1	; 0x03
     e46:	18 c0       	rjmp	.+48     	; 0xe78 <Count_Add_for_FACE_LIGHT+0xf8>
	{
		count[cnt_i] = out[cnt_i];
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	08 2e       	mov	r0, r24
     e4c:	00 0c       	add	r0, r0
     e4e:	99 0b       	sbc	r25, r25
     e50:	2c 85       	ldd	r18, Y+12	; 0x0c
     e52:	3d 85       	ldd	r19, Y+13	; 0x0d
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	02 2e       	mov	r0, r18
     e5c:	00 0c       	add	r0, r0
     e5e:	33 0b       	sbc	r19, r19
     e60:	ae 01       	movw	r20, r28
     e62:	4c 5f       	subi	r20, 0xFC	; 252
     e64:	5f 4f       	sbci	r21, 0xFF	; 255
     e66:	24 0f       	add	r18, r20
     e68:	35 1f       	adc	r19, r21
     e6a:	f9 01       	movw	r30, r18
     e6c:	20 81       	ld	r18, Z
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18
		{
			carry = 0;
		}
		i--;
	}
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	8b 83       	std	Y+3, r24	; 0x03
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	84 30       	cpi	r24, 0x04	; 4
     e7c:	2c f3       	brlt	.-54     	; 0xe48 <Count_Add_for_FACE_LIGHT+0xc8>
	{
		count[cnt_i] = out[cnt_i];
	}
}
     e7e:	00 00       	nop
     e80:	2d 96       	adiw	r28, 0x0d	; 13
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <Make_LUT_Face_Light>:
void Make_LUT_Face_Light(u8 LUT_FL[4][4][256],u8* userkey,u8* count)//! LUK Table of FACE_Light
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	ae 97       	sbiw	r28, 0x2e	; 46
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	9a a7       	std	Y+42, r25	; 0x2a
     ea8:	89 a7       	std	Y+41, r24	; 0x29
     eaa:	7c a7       	std	Y+44, r23	; 0x2c
     eac:	6b a7       	std	Y+43, r22	; 0x2b
     eae:	5e a7       	std	Y+46, r21	; 0x2e
     eb0:	4d a7       	std	Y+45, r20	; 0x2d
	u8 state[16] = { 0x00 };
     eb2:	20 e1       	ldi	r18, 0x10	; 16
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	fc 01       	movw	r30, r24
     eba:	32 2f       	mov	r19, r18
     ebc:	11 92       	st	Z+, r1
     ebe:	3a 95       	dec	r19
     ec0:	e9 f7       	brne	.-6      	; 0xebc <Make_LUT_Face_Light+0x2a>
	u8 roundkey[16] = {0x00};
     ec2:	20 e1       	ldi	r18, 0x10	; 16
     ec4:	ce 01       	movw	r24, r28
     ec6:	41 96       	adiw	r24, 0x11	; 17
     ec8:	fc 01       	movw	r30, r24
     eca:	32 2f       	mov	r19, r18
     ecc:	11 92       	st	Z+, r1
     ece:	3a 95       	dec	r19
     ed0:	e9 f7       	brne	.-6      	; 0xecc <Make_LUT_Face_Light+0x3a>
	volatile u8 round = 0;
     ed2:	19 a2       	std	Y+33, r1	; 0x21
	volatile u8 cnt_j = 0;
     ed4:	1a a2       	std	Y+34, r1	; 0x22
	volatile temp = 0;
     ed6:	1c a2       	std	Y+36, r1	; 0x24
     ed8:	1b a2       	std	Y+35, r1	; 0x23


	reset_count(count);
     eda:	8d a5       	ldd	r24, Y+45	; 0x2d
     edc:	9e a5       	ldd	r25, Y+46	; 0x2e
     ede:	77 dd       	rcall	.-1298   	; 0x9ce <reset_count>
	state_copy(state, count);
     ee0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ee2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ee4:	bc 01       	movw	r22, r24
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	92 dd       	rcall	.-1244   	; 0xa10 <state_copy>


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
     eec:	1e a2       	std	Y+38, r1	; 0x26
     eee:	1d a2       	std	Y+37, r1	; 0x25
     ef0:	b5 c0       	rjmp	.+362    	; 0x105c <Make_LUT_Face_Light+0x1ca>
	{
		for (volatile int16_t cnt_i = 0; cnt_i < 5 ; cnt_i++)                      //! check BLOCKSIZE 블록size가 256넘어가면 그냥 256이라 써주면된다.
     ef2:	18 a6       	std	Y+40, r1	; 0x28
     ef4:	1f a2       	std	Y+39, r1	; 0x27
     ef6:	a2 c0       	rjmp	.+324    	; 0x103c <Make_LUT_Face_Light+0x1aa>
		{
			
			round = 0x00;
     ef8:	19 a2       	std	Y+33, r1	; 0x21
			state_copy(roundkey, userkey);
     efa:	2b a5       	ldd	r18, Y+43	; 0x2b
     efc:	3c a5       	ldd	r19, Y+44	; 0x2c
     efe:	ce 01       	movw	r24, r28
     f00:	41 96       	adiw	r24, 0x11	; 17
     f02:	b9 01       	movw	r22, r18
     f04:	85 dd       	rcall	.-1270   	; 0xa10 <state_copy>
			AddRoundKey(state, roundkey);
     f06:	ce 01       	movw	r24, r28
     f08:	41 96       	adiw	r24, 0x11	; 17
     f0a:	bc 01       	movw	r22, r24
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	fa db       	rcall	.-2060   	; 0x706 <AddRoundKey>
			keyScheduling(roundkey,&round);
     f12:	9e 01       	movw	r18, r28
     f14:	2f 5d       	subi	r18, 0xDF	; 223
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	ce 01       	movw	r24, r28
     f1a:	41 96       	adiw	r24, 0x11	; 17
     f1c:	b9 01       	movw	r22, r18
			
			Subbyte_ShiftRows_asm(state);
     f1e:	2d dc       	rcall	.-1958   	; 0x77a <keyScheduling>
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
			MixColumns_asm_Progm(state);
     f24:	cc da       	rcall	.-2664   	; 0x4be <Subbyte_ShiftRows_asm>
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
			AddRoundKey(state,roundkey);
     f2a:	82 da       	rcall	.-2812   	; 0x430 <MixColumns_asm_Progm>
     f2c:	ce 01       	movw	r24, r28
     f2e:	41 96       	adiw	r24, 0x11	; 17
     f30:	bc 01       	movw	r22, r24
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
			keyScheduling(roundkey,&round);
     f36:	e7 db       	rcall	.-2098   	; 0x706 <AddRoundKey>
     f38:	9e 01       	movw	r18, r28
     f3a:	2f 5d       	subi	r18, 0xDF	; 223
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	ce 01       	movw	r24, r28
     f40:	41 96       	adiw	r24, 0x11	; 17
     f42:	b9 01       	movw	r22, r18
			
			SubByte(state);
     f44:	1a dc       	rcall	.-1996   	; 0x77a <keyScheduling>
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	1a db       	rcall	.-2508   	; 0x580 <SubByte>
			for (cnt_j = 0; cnt_j < 4; cnt_j++)
     f4c:	1a a2       	std	Y+34, r1	; 0x22
     f4e:	60 c0       	rjmp	.+192    	; 0x1010 <Make_LUT_Face_Light+0x17e>
			{
				if (cnt_k != 3){
     f50:	8d a1       	ldd	r24, Y+37	; 0x25
     f52:	9e a1       	ldd	r25, Y+38	; 0x26
     f54:	03 97       	sbiw	r24, 0x03	; 3
     f56:	91 f1       	breq	.+100    	; 0xfbc <Make_LUT_Face_Light+0x12a>
					temp = state[((cnt_k + 1) * 4) + cnt_j];
     f58:	8d a1       	ldd	r24, Y+37	; 0x25
     f5a:	9e a1       	ldd	r25, Y+38	; 0x26
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	9c 01       	movw	r18, r24
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	8a a1       	ldd	r24, Y+34	; 0x22
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	9e 01       	movw	r18, r28
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	82 0f       	add	r24, r18
     f7a:	93 1f       	adc	r25, r19
     f7c:	fc 01       	movw	r30, r24
     f7e:	80 81       	ld	r24, Z
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9c a3       	std	Y+36, r25	; 0x24
     f86:	8b a3       	std	Y+35, r24	; 0x23
					eeprom_update_byte(&LUT_FL[cnt_k][cnt_j][cnt_i],temp);
     f88:	8b a1       	ldd	r24, Y+35	; 0x23
     f8a:	9c a1       	ldd	r25, Y+36	; 0x24
     f8c:	68 2f       	mov	r22, r24
     f8e:	8d a1       	ldd	r24, Y+37	; 0x25
     f90:	9e a1       	ldd	r25, Y+38	; 0x26
     f92:	98 2f       	mov	r25, r24
     f94:	88 27       	eor	r24, r24
     f96:	99 0f       	add	r25, r25
     f98:	99 0f       	add	r25, r25
     f9a:	29 a5       	ldd	r18, Y+41	; 0x29
     f9c:	3a a5       	ldd	r19, Y+42	; 0x2a
     f9e:	28 0f       	add	r18, r24
     fa0:	39 1f       	adc	r19, r25
     fa2:	8a a1       	ldd	r24, Y+34	; 0x22
     fa4:	48 2f       	mov	r20, r24
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	8f a1       	ldd	r24, Y+39	; 0x27
     faa:	98 a5       	ldd	r25, Y+40	; 0x28
     fac:	54 2f       	mov	r21, r20
     fae:	44 27       	eor	r20, r20
     fb0:	84 0f       	add	r24, r20
     fb2:	95 1f       	adc	r25, r21
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	c1 d3       	rcall	.+1922   	; 0x173c <eeprom_update_byte>
     fba:	27 c0       	rjmp	.+78     	; 0x100a <Make_LUT_Face_Light+0x178>
				}
				else{
					temp = state[cnt_j];
     fbc:	8a a1       	ldd	r24, Y+34	; 0x22
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9e 01       	movw	r18, r28
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	fc 01       	movw	r30, r24
     fce:	80 81       	ld	r24, Z
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c a3       	std	Y+36, r25	; 0x24
     fd6:	8b a3       	std	Y+35, r24	; 0x23
					eeprom_update_byte(&LUT_FL[cnt_k][cnt_j][cnt_i],temp);
     fd8:	8b a1       	ldd	r24, Y+35	; 0x23
     fda:	9c a1       	ldd	r25, Y+36	; 0x24
     fdc:	68 2f       	mov	r22, r24
     fde:	8d a1       	ldd	r24, Y+37	; 0x25
     fe0:	9e a1       	ldd	r25, Y+38	; 0x26
     fe2:	98 2f       	mov	r25, r24
     fe4:	88 27       	eor	r24, r24
     fe6:	99 0f       	add	r25, r25
     fe8:	99 0f       	add	r25, r25
     fea:	29 a5       	ldd	r18, Y+41	; 0x29
     fec:	3a a5       	ldd	r19, Y+42	; 0x2a
     fee:	28 0f       	add	r18, r24
     ff0:	39 1f       	adc	r19, r25
     ff2:	8a a1       	ldd	r24, Y+34	; 0x22
     ff4:	48 2f       	mov	r20, r24
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	8f a1       	ldd	r24, Y+39	; 0x27
     ffa:	98 a5       	ldd	r25, Y+40	; 0x28
     ffc:	54 2f       	mov	r21, r20
     ffe:	44 27       	eor	r20, r20
    1000:	84 0f       	add	r24, r20
    1002:	95 1f       	adc	r25, r21
    1004:	82 0f       	add	r24, r18
    1006:	93 1f       	adc	r25, r19
    1008:	99 d3       	rcall	.+1842   	; 0x173c <eeprom_update_byte>
			MixColumns_asm_Progm(state);
			AddRoundKey(state,roundkey);
			keyScheduling(roundkey,&round);
			
			SubByte(state);
			for (cnt_j = 0; cnt_j < 4; cnt_j++)
    100a:	8a a1       	ldd	r24, Y+34	; 0x22
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	8a a3       	std	Y+34, r24	; 0x22
    1010:	8a a1       	ldd	r24, Y+34	; 0x22
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	08 f4       	brcc	.+2      	; 0x1018 <Make_LUT_Face_Light+0x186>
					temp = state[cnt_j];
					eeprom_update_byte(&LUT_FL[cnt_k][cnt_j][cnt_i],temp);
				}
				
			}
			Count_Add_for_LUT(count, &cnt_k);
    1016:	9c cf       	rjmp	.-200    	; 0xf50 <Make_LUT_Face_Light+0xbe>
    1018:	9e 01       	movw	r18, r28
    101a:	2b 5d       	subi	r18, 0xDB	; 219
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1020:	9e a5       	ldd	r25, Y+46	; 0x2e
    1022:	b9 01       	movw	r22, r18
			state_copy(state, count);
    1024:	24 dd       	rcall	.-1464   	; 0xa6e <Count_Add_for_LUT>
    1026:	8d a5       	ldd	r24, Y+45	; 0x2d
    1028:	9e a5       	ldd	r25, Y+46	; 0x2e
    102a:	bc 01       	movw	r22, r24
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
	state_copy(state, count);


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
	{
		for (volatile int16_t cnt_i = 0; cnt_i < 5 ; cnt_i++)                      //! check BLOCKSIZE 블록size가 256넘어가면 그냥 256이라 써주면된다.
    1030:	ef dc       	rcall	.-1570   	; 0xa10 <state_copy>
    1032:	8f a1       	ldd	r24, Y+39	; 0x27
    1034:	98 a5       	ldd	r25, Y+40	; 0x28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	98 a7       	std	Y+40, r25	; 0x28
    103a:	8f a3       	std	Y+39, r24	; 0x27
    103c:	8f a1       	ldd	r24, Y+39	; 0x27
    103e:	98 a5       	ldd	r25, Y+40	; 0x28
    1040:	05 97       	sbiw	r24, 0x05	; 5
			}
			Count_Add_for_LUT(count, &cnt_k);
			state_copy(state, count);

		}
		reset_count(state);
    1042:	0c f4       	brge	.+2      	; 0x1046 <Make_LUT_Face_Light+0x1b4>
    1044:	59 cf       	rjmp	.-334    	; 0xef8 <Make_LUT_Face_Light+0x66>
    1046:	ce 01       	movw	r24, r28
    1048:	01 96       	adiw	r24, 0x01	; 1
		reset_count(count);
    104a:	c1 dc       	rcall	.-1662   	; 0x9ce <reset_count>
    104c:	8d a5       	ldd	r24, Y+45	; 0x2d
    104e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1050:	be dc       	rcall	.-1668   	; 0x9ce <reset_count>

	reset_count(count);
	state_copy(state, count);


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
    1052:	8d a1       	ldd	r24, Y+37	; 0x25
    1054:	9e a1       	ldd	r25, Y+38	; 0x26
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	9e a3       	std	Y+38, r25	; 0x26
    105a:	8d a3       	std	Y+37, r24	; 0x25
    105c:	8d a1       	ldd	r24, Y+37	; 0x25
    105e:	9e a1       	ldd	r25, Y+38	; 0x26
    1060:	04 97       	sbiw	r24, 0x04	; 4
    1062:	0c f4       	brge	.+2      	; 0x1066 <Make_LUT_Face_Light+0x1d4>
    1064:	46 cf       	rjmp	.-372    	; 0xef2 <Make_LUT_Face_Light+0x60>

		}
		reset_count(state);
		reset_count(count);
	}
}
    1066:	00 00       	nop
    1068:	ae 96       	adiw	r28, 0x2e	; 46
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <AES_encrypt_FACE_Light>:

void AES_encrypt_FACE_Light(u8 *inp,u8 LUT_FL[4][4][256], u8 *out, u8 *usrkey)//AES encryption of FACE mode
{
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	aa 97       	sbiw	r28, 0x2a	; 42
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	9c a3       	std	Y+36, r25	; 0x24
    1094:	8b a3       	std	Y+35, r24	; 0x23
    1096:	7e a3       	std	Y+38, r23	; 0x26
    1098:	6d a3       	std	Y+37, r22	; 0x25
    109a:	58 a7       	std	Y+40, r21	; 0x28
    109c:	4f a3       	std	Y+39, r20	; 0x27
    109e:	3a a7       	std	Y+42, r19	; 0x2a
    10a0:	29 a7       	std	Y+41, r18	; 0x29
	u8 state[16] = {0x00};
    10a2:	20 e1       	ldi	r18, 0x10	; 16
    10a4:	ce 01       	movw	r24, r28
    10a6:	02 96       	adiw	r24, 0x02	; 2
    10a8:	fc 01       	movw	r30, r24
    10aa:	32 2f       	mov	r19, r18
    10ac:	11 92       	st	Z+, r1
    10ae:	3a 95       	dec	r19
    10b0:	e9 f7       	brne	.-6      	; 0x10ac <AES_encrypt_FACE_Light+0x32>
	u8 cnt_i;
	u8 round = 0;
    10b2:	1a 8a       	std	Y+18, r1	; 0x12
	u8 roundkey[16] = {0x00};
    10b4:	20 e1       	ldi	r18, 0x10	; 16
    10b6:	ce 01       	movw	r24, r28
    10b8:	43 96       	adiw	r24, 0x13	; 19
    10ba:	fc 01       	movw	r30, r24
    10bc:	32 2f       	mov	r19, r18
    10be:	11 92       	st	Z+, r1
    10c0:	3a 95       	dec	r19
    10c2:	e9 f7       	brne	.-6      	; 0x10be <AES_encrypt_FACE_Light+0x44>

	for (cnt_i = 0; cnt_i < 4; cnt_i++)
    10c4:	19 82       	std	Y+1, r1	; 0x01
    10c6:	da c0       	rjmp	.+436    	; 0x127c <__stack+0x17d>
	{
		state[cnt_i] = eeprom_read_byte(&LUT_FL[3][cnt_i][inp[0]]);
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	08 2f       	mov	r16, r24
    10cc:	10 e0       	ldi	r17, 0x00	; 0
    10ce:	8d a1       	ldd	r24, Y+37	; 0x25
    10d0:	9e a1       	ldd	r25, Y+38	; 0x26
    10d2:	9c 01       	movw	r18, r24
    10d4:	34 5f       	subi	r19, 0xF4	; 244
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	48 2f       	mov	r20, r24
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	8b a1       	ldd	r24, Y+35	; 0x23
    10de:	9c a1       	ldd	r25, Y+36	; 0x24
    10e0:	fc 01       	movw	r30, r24
    10e2:	80 81       	ld	r24, Z
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	54 2f       	mov	r21, r20
    10ea:	44 27       	eor	r20, r20
    10ec:	84 0f       	add	r24, r20
    10ee:	95 1f       	adc	r25, r21
    10f0:	82 0f       	add	r24, r18
    10f2:	93 1f       	adc	r25, r19
    10f4:	1b d3       	rcall	.+1590   	; 0x172c <eeprom_read_byte>
    10f6:	28 2f       	mov	r18, r24
    10f8:	ce 01       	movw	r24, r28
    10fa:	02 96       	adiw	r24, 0x02	; 2
    10fc:	80 0f       	add	r24, r16
    10fe:	91 1f       	adc	r25, r17
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
		state[cnt_i + 4] = eeprom_read_byte(&LUT_FL[0][cnt_i][inp[3]]);
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	8c 01       	movw	r16, r24
    110c:	0c 5f       	subi	r16, 0xFC	; 252
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	8b a1       	ldd	r24, Y+35	; 0x23
    1118:	9c a1       	ldd	r25, Y+36	; 0x24
    111a:	03 96       	adiw	r24, 0x03	; 3
    111c:	fc 01       	movw	r30, r24
    111e:	80 81       	ld	r24, Z
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	32 2f       	mov	r19, r18
    1126:	22 27       	eor	r18, r18
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	2d a1       	ldd	r18, Y+37	; 0x25
    112e:	3e a1       	ldd	r19, Y+38	; 0x26
    1130:	82 0f       	add	r24, r18
    1132:	93 1f       	adc	r25, r19
    1134:	fb d2       	rcall	.+1526   	; 0x172c <eeprom_read_byte>
    1136:	28 2f       	mov	r18, r24
    1138:	ce 01       	movw	r24, r28
    113a:	02 96       	adiw	r24, 0x02	; 2
    113c:	80 0f       	add	r24, r16
    113e:	91 1f       	adc	r25, r17
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
		state[cnt_i + 8] =  eeprom_read_byte(&LUT_FL[1][cnt_i][inp[2]]);
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	8c 01       	movw	r16, r24
    114c:	08 5f       	subi	r16, 0xF8	; 248
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	8d a1       	ldd	r24, Y+37	; 0x25
    1152:	9e a1       	ldd	r25, Y+38	; 0x26
    1154:	9c 01       	movw	r18, r24
    1156:	3c 5f       	subi	r19, 0xFC	; 252
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	48 2f       	mov	r20, r24
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	8b a1       	ldd	r24, Y+35	; 0x23
    1160:	9c a1       	ldd	r25, Y+36	; 0x24
    1162:	02 96       	adiw	r24, 0x02	; 2
    1164:	fc 01       	movw	r30, r24
    1166:	80 81       	ld	r24, Z
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	54 2f       	mov	r21, r20
    116e:	44 27       	eor	r20, r20
    1170:	84 0f       	add	r24, r20
    1172:	95 1f       	adc	r25, r21
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	d9 d2       	rcall	.+1458   	; 0x172c <eeprom_read_byte>
    117a:	28 2f       	mov	r18, r24
    117c:	ce 01       	movw	r24, r28
    117e:	02 96       	adiw	r24, 0x02	; 2
    1180:	80 0f       	add	r24, r16
    1182:	91 1f       	adc	r25, r17
    1184:	fc 01       	movw	r30, r24
    1186:	20 83       	st	Z, r18
		state[cnt_i + 12] =  eeprom_read_byte(&LUT_FL[2][cnt_i][inp[1]]);
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	8c 01       	movw	r16, r24
    1190:	04 5f       	subi	r16, 0xF4	; 244
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	8d a1       	ldd	r24, Y+37	; 0x25
    1196:	9e a1       	ldd	r25, Y+38	; 0x26
    1198:	9c 01       	movw	r18, r24
    119a:	38 5f       	subi	r19, 0xF8	; 248
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	48 2f       	mov	r20, r24
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	8b a1       	ldd	r24, Y+35	; 0x23
    11a4:	9c a1       	ldd	r25, Y+36	; 0x24
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	fc 01       	movw	r30, r24
    11aa:	80 81       	ld	r24, Z
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	54 2f       	mov	r21, r20
    11b2:	44 27       	eor	r20, r20
    11b4:	84 0f       	add	r24, r20
    11b6:	95 1f       	adc	r25, r21
    11b8:	82 0f       	add	r24, r18
    11ba:	93 1f       	adc	r25, r19
    11bc:	b7 d2       	rcall	.+1390   	; 0x172c <eeprom_read_byte>
    11be:	28 2f       	mov	r18, r24
    11c0:	ce 01       	movw	r24, r28
    11c2:	02 96       	adiw	r24, 0x02	; 2
    11c4:	80 0f       	add	r24, r16
    11c6:	91 1f       	adc	r25, r17
    11c8:	fc 01       	movw	r30, r24
    11ca:	20 83       	st	Z, r18
		roundkey[cnt_i] = usrkey[cnt_i];
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	29 81       	ldd	r18, Y+1	; 0x01
    11d4:	22 2f       	mov	r18, r18
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	49 a5       	ldd	r20, Y+41	; 0x29
    11da:	5a a5       	ldd	r21, Y+42	; 0x2a
    11dc:	24 0f       	add	r18, r20
    11de:	35 1f       	adc	r19, r21
    11e0:	f9 01       	movw	r30, r18
    11e2:	40 81       	ld	r20, Z
    11e4:	9e 01       	movw	r18, r28
    11e6:	2d 5e       	subi	r18, 0xED	; 237
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	fc 01       	movw	r30, r24
    11f0:	40 83       	st	Z, r20
		roundkey[cnt_i+4] = usrkey[cnt_i+4];
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	04 96       	adiw	r24, 0x04	; 4
    11fa:	29 81       	ldd	r18, Y+1	; 0x01
    11fc:	22 2f       	mov	r18, r18
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	2c 5f       	subi	r18, 0xFC	; 252
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	49 a5       	ldd	r20, Y+41	; 0x29
    1206:	5a a5       	ldd	r21, Y+42	; 0x2a
    1208:	24 0f       	add	r18, r20
    120a:	35 1f       	adc	r19, r21
    120c:	f9 01       	movw	r30, r18
    120e:	40 81       	ld	r20, Z
    1210:	9e 01       	movw	r18, r28
    1212:	2d 5e       	subi	r18, 0xED	; 237
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	fc 01       	movw	r30, r24
    121c:	40 83       	st	Z, r20
		roundkey[cnt_i+8] = usrkey[cnt_i+8];
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	08 96       	adiw	r24, 0x08	; 8
    1226:	29 81       	ldd	r18, Y+1	; 0x01
    1228:	22 2f       	mov	r18, r18
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	28 5f       	subi	r18, 0xF8	; 248
    122e:	3f 4f       	sbci	r19, 0xFF	; 255
    1230:	49 a5       	ldd	r20, Y+41	; 0x29
    1232:	5a a5       	ldd	r21, Y+42	; 0x2a
    1234:	24 0f       	add	r18, r20
    1236:	35 1f       	adc	r19, r21
    1238:	f9 01       	movw	r30, r18
    123a:	40 81       	ld	r20, Z
    123c:	9e 01       	movw	r18, r28
    123e:	2d 5e       	subi	r18, 0xED	; 237
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	82 0f       	add	r24, r18
    1244:	93 1f       	adc	r25, r19
    1246:	fc 01       	movw	r30, r24
    1248:	40 83       	st	Z, r20
		roundkey[cnt_i+12] = usrkey[cnt_i+12];
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0c 96       	adiw	r24, 0x0c	; 12
    1252:	29 81       	ldd	r18, Y+1	; 0x01
    1254:	22 2f       	mov	r18, r18
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	24 5f       	subi	r18, 0xF4	; 244
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	49 a5       	ldd	r20, Y+41	; 0x29
    125e:	5a a5       	ldd	r21, Y+42	; 0x2a
    1260:	24 0f       	add	r18, r20
    1262:	35 1f       	adc	r19, r21
    1264:	f9 01       	movw	r30, r18
    1266:	40 81       	ld	r20, Z
    1268:	9e 01       	movw	r18, r28
    126a:	2d 5e       	subi	r18, 0xED	; 237
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	fc 01       	movw	r30, r24
    1274:	40 83       	st	Z, r20
	u8 state[16] = {0x00};
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	for (cnt_i = 0; cnt_i < 4; cnt_i++)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	08 f4       	brcc	.+2      	; 0x1284 <__stack+0x185>
    1282:	22 cf       	rjmp	.-444    	; 0x10c8 <AES_encrypt_FACE_Light+0x4e>
		roundkey[cnt_i] = usrkey[cnt_i];
		roundkey[cnt_i+4] = usrkey[cnt_i+4];
		roundkey[cnt_i+8] = usrkey[cnt_i+8];
		roundkey[cnt_i+12] = usrkey[cnt_i+12];
	}
	keyScheduling(roundkey,&round);
    1284:	9e 01       	movw	r18, r28
    1286:	2e 5e       	subi	r18, 0xEE	; 238
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	ce 01       	movw	r24, r28
    128c:	43 96       	adiw	r24, 0x13	; 19
    128e:	b9 01       	movw	r22, r18
    1290:	74 da       	rcall	.-2840   	; 0x77a <keyScheduling>
	keyScheduling(roundkey,&round);
    1292:	9e 01       	movw	r18, r28
    1294:	2e 5e       	subi	r18, 0xEE	; 238
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	ce 01       	movw	r24, r28
    129a:	43 96       	adiw	r24, 0x13	; 19
    129c:	b9 01       	movw	r22, r18

	ShiftRow(state);
    129e:	6d da       	rcall	.-2854   	; 0x77a <keyScheduling>
    12a0:	ce 01       	movw	r24, r28
    12a2:	02 96       	adiw	r24, 0x02	; 2
    12a4:	ac d9       	rcall	.-3240   	; 0x5fe <ShiftRow>
	MixColumns_asm_Progm(state);
    12a6:	ce 01       	movw	r24, r28
    12a8:	02 96       	adiw	r24, 0x02	; 2
    12aa:	c2 d8       	rcall	.-3708   	; 0x430 <MixColumns_asm_Progm>
	AddRoundKey(state, roundkey);
    12ac:	9e 01       	movw	r18, r28
    12ae:	2d 5e       	subi	r18, 0xED	; 237
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	ce 01       	movw	r24, r28
    12b4:	02 96       	adiw	r24, 0x02	; 2
    12b6:	b9 01       	movw	r22, r18
    12b8:	26 da       	rcall	.-2996   	; 0x706 <AddRoundKey>
	keyScheduling(roundkey,&round);
    12ba:	9e 01       	movw	r18, r28
    12bc:	2e 5e       	subi	r18, 0xEE	; 238
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	ce 01       	movw	r24, r28
    12c2:	43 96       	adiw	r24, 0x13	; 19
    12c4:	b9 01       	movw	r22, r18

	for (cnt_i = 3; cnt_i < AES_MAXNR; cnt_i++)
    12c6:	59 da       	rcall	.-2894   	; 0x77a <keyScheduling>
    12c8:	83 e0       	ldi	r24, 0x03	; 3
    12ca:	89 83       	std	Y+1, r24	; 0x01
	{
		Subbyte_ShiftRows_asm(state);
    12cc:	17 c0       	rjmp	.+46     	; 0x12fc <__stack+0x1fd>
    12ce:	ce 01       	movw	r24, r28
    12d0:	02 96       	adiw	r24, 0x02	; 2
		MixColumns_asm_Progm(state);
    12d2:	f5 d8       	rcall	.-3606   	; 0x4be <Subbyte_ShiftRows_asm>
    12d4:	ce 01       	movw	r24, r28
    12d6:	02 96       	adiw	r24, 0x02	; 2
    12d8:	ab d8       	rcall	.-3754   	; 0x430 <MixColumns_asm_Progm>
		AddRoundKey(state, roundkey);
    12da:	9e 01       	movw	r18, r28
    12dc:	2d 5e       	subi	r18, 0xED	; 237
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	ce 01       	movw	r24, r28
    12e2:	02 96       	adiw	r24, 0x02	; 2
    12e4:	b9 01       	movw	r22, r18
    12e6:	0f da       	rcall	.-3042   	; 0x706 <AddRoundKey>
		keyScheduling(roundkey,&round);
    12e8:	9e 01       	movw	r18, r28
    12ea:	2e 5e       	subi	r18, 0xEE	; 238
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	ce 01       	movw	r24, r28
    12f0:	43 96       	adiw	r24, 0x13	; 19
    12f2:	b9 01       	movw	r22, r18
    12f4:	42 da       	rcall	.-2940   	; 0x77a <keyScheduling>
	ShiftRow(state);
	MixColumns_asm_Progm(state);
	AddRoundKey(state, roundkey);
	keyScheduling(roundkey,&round);

	for (cnt_i = 3; cnt_i < AES_MAXNR; cnt_i++)
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	8a 30       	cpi	r24, 0x0A	; 10
		AddRoundKey(state, roundkey);
		keyScheduling(roundkey,&round);

	}
	
	Subbyte_ShiftRows_asm(state);
    1300:	30 f3       	brcs	.-52     	; 0x12ce <__stack+0x1cf>
    1302:	ce 01       	movw	r24, r28
    1304:	02 96       	adiw	r24, 0x02	; 2
    1306:	db d8       	rcall	.-3658   	; 0x4be <Subbyte_ShiftRows_asm>
	AddRoundKey(state, roundkey);
    1308:	9e 01       	movw	r18, r28
    130a:	2d 5e       	subi	r18, 0xED	; 237
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	ce 01       	movw	r24, r28
    1310:	02 96       	adiw	r24, 0x02	; 2
    1312:	b9 01       	movw	r22, r18
    1314:	f8 d9       	rcall	.-3088   	; 0x706 <AddRoundKey>
    1316:	19 82       	std	Y+1, r1	; 0x01

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
    1318:	16 c0       	rjmp	.+44     	; 0x1346 <__stack+0x247>
    131a:	89 81       	ldd	r24, Y+1	; 0x01
	{
		out[cnt_i] = state[cnt_i];
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	2f a1       	ldd	r18, Y+39	; 0x27
    1322:	38 a5       	ldd	r19, Y+40	; 0x28
    1324:	82 0f       	add	r24, r18
    1326:	93 1f       	adc	r25, r19
    1328:	29 81       	ldd	r18, Y+1	; 0x01
    132a:	22 2f       	mov	r18, r18
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	ae 01       	movw	r20, r28
    1330:	4e 5f       	subi	r20, 0xFE	; 254
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	24 0f       	add	r18, r20
    1336:	35 1f       	adc	r19, r21
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
    1340:	89 81       	ldd	r24, Y+1	; 0x01
	}
	
	Subbyte_ShiftRows_asm(state);
	AddRoundKey(state, roundkey);

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	80 31       	cpi	r24, 0x10	; 16
    134a:	38 f3       	brcs	.-50     	; 0x131a <__stack+0x21b>
    134c:	00 00       	nop
	{
		out[cnt_i] = state[cnt_i];
	}
}
    134e:	aa 96       	adiw	r28, 0x2a	; 42
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	08 95       	ret

00001364 <CRYPTO_ctr128_encrypt_FACE_Light>:
    1364:	ef 92       	push	r14

void CRYPTO_ctr128_encrypt_FACE_Light(u8* inp, u8* out, u8 LUT_FL[4][4][256],u8 length , u8* usrkey, u8* count) //AES CTR Mode of FACE_Light ver
{
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	ce 54       	subi	r28, 0x4E	; 78
    1376:	d1 09       	sbc	r29, r1
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	fe 01       	movw	r30, r28
    1384:	ec 5b       	subi	r30, 0xBC	; 188
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
    138c:	ce 01       	movw	r24, r28
    138e:	8a 5b       	subi	r24, 0xBA	; 186
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	fc 01       	movw	r30, r24
    1394:	71 83       	std	Z+1, r23	; 0x01
    1396:	60 83       	st	Z, r22
    1398:	ce 01       	movw	r24, r28
    139a:	88 5b       	subi	r24, 0xB8	; 184
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	fc 01       	movw	r30, r24
    13a0:	51 83       	std	Z+1, r21	; 0x01
    13a2:	40 83       	st	Z, r20
    13a4:	ce 01       	movw	r24, r28
    13a6:	86 5b       	subi	r24, 0xB6	; 182
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	fc 01       	movw	r30, r24
    13ac:	20 83       	st	Z, r18
    13ae:	ce 01       	movw	r24, r28
    13b0:	85 5b       	subi	r24, 0xB5	; 181
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	fc 01       	movw	r30, r24
    13b6:	11 83       	std	Z+1, r17	; 0x01
    13b8:	00 83       	st	Z, r16
    13ba:	ce 01       	movw	r24, r28
    13bc:	83 5b       	subi	r24, 0xB3	; 179
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	fc 01       	movw	r30, r24
    13c2:	f1 82       	std	Z+1, r15	; 0x01
    13c4:	e0 82       	st	Z, r14
	u8 cnt_i, cnt_j;
	u8 paddingcnt = length % 16;
    13c6:	ce 01       	movw	r24, r28
    13c8:	86 5b       	subi	r24, 0xB6	; 182
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	fc 01       	movw	r30, r24
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 70       	andi	r24, 0x0F	; 15
    13d2:	8b 83       	std	Y+3, r24	; 0x03
	u8 PT[BLOCKSIZE][16] = { {0x00} };
    13d4:	20 e1       	ldi	r18, 0x10	; 16
    13d6:	ce 01       	movw	r24, r28
    13d8:	04 96       	adiw	r24, 0x04	; 4
    13da:	fc 01       	movw	r30, r24
    13dc:	32 2f       	mov	r19, r18
    13de:	11 92       	st	Z+, r1
    13e0:	3a 95       	dec	r19
    13e2:	e9 f7       	brne	.-6      	; 0x13de <CRYPTO_ctr128_encrypt_FACE_Light+0x7a>
	u8 CT[BLOCKSIZE][16] = { {0x00} };
    13e4:	20 e1       	ldi	r18, 0x10	; 16
    13e6:	ce 01       	movw	r24, r28
    13e8:	44 96       	adiw	r24, 0x14	; 20
    13ea:	fc 01       	movw	r30, r24
    13ec:	32 2f       	mov	r19, r18
    13ee:	11 92       	st	Z+, r1
    13f0:	3a 95       	dec	r19
    13f2:	e9 f7       	brne	.-6      	; 0x13ee <CRYPTO_ctr128_encrypt_FACE_Light+0x8a>
	u8 iparray[16];
	u8 oparray[16];
	
	reset_count(count);
    13f4:	ce 01       	movw	r24, r28
    13f6:	83 5b       	subi	r24, 0xB3	; 179
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	fc 01       	movw	r30, r24
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	e6 da       	rcall	.-2612   	; 0x9ce <reset_count>

	for (cnt_i = 0; cnt_i < BLOCKSIZE - 1; cnt_i++)
    1402:	19 82       	std	Y+1, r1	; 0x01
    1404:	00 00       	nop
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	88 23       	and	r24, r24
    140a:	f9 f4       	brne	.+62     	; 0x144a <CRYPTO_ctr128_encrypt_FACE_Light+0xe6>
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    140c:	1a 82       	std	Y+2, r1	; 0x02
    140e:	1a c0       	rjmp	.+52     	; 0x1444 <CRYPTO_ctr128_encrypt_FACE_Light+0xe0>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	2a 81       	ldd	r18, Y+2	; 0x02
    1418:	22 2f       	mov	r18, r18
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	ae 01       	movw	r20, r28
    141e:	4c 5b       	subi	r20, 0xBC	; 188
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	fa 01       	movw	r30, r20
    1424:	40 81       	ld	r20, Z
    1426:	51 81       	ldd	r21, Z+1	; 0x01
    1428:	24 0f       	add	r18, r20
    142a:	35 1f       	adc	r19, r21
    142c:	f9 01       	movw	r30, r18
    142e:	40 81       	ld	r20, Z
    1430:	9e 01       	movw	r18, r28
    1432:	2c 5f       	subi	r18, 0xFC	; 252
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	82 0f       	add	r24, r18
    1438:	93 1f       	adc	r25, r19
    143a:	fc 01       	movw	r30, r24
    143c:	40 83       	st	Z, r20
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	80 31       	cpi	r24, 0x10	; 16
    1448:	18 f3       	brcs	.-58     	; 0x1410 <CRYPTO_ctr128_encrypt_FACE_Light+0xac>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
	}

	if (paddingcnt != 0) // 패딩 함수.
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 23       	and	r24, r24
    144e:	b9 f1       	breq	.+110    	; 0x14be <CRYPTO_ctr128_encrypt_FACE_Light+0x15a>
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
    1450:	1a 82       	std	Y+2, r1	; 0x02
    1452:	1a c0       	rjmp	.+52     	; 0x1488 <CRYPTO_ctr128_encrypt_FACE_Light+0x124>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	2a 81       	ldd	r18, Y+2	; 0x02
    145c:	22 2f       	mov	r18, r18
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	ae 01       	movw	r20, r28
    1462:	4c 5b       	subi	r20, 0xBC	; 188
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	fa 01       	movw	r30, r20
    1468:	40 81       	ld	r20, Z
    146a:	51 81       	ldd	r21, Z+1	; 0x01
    146c:	24 0f       	add	r18, r20
    146e:	35 1f       	adc	r19, r21
    1470:	f9 01       	movw	r30, r18
    1472:	40 81       	ld	r20, Z
    1474:	9e 01       	movw	r18, r28
    1476:	2c 5f       	subi	r18, 0xFC	; 252
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	82 0f       	add	r24, r18
    147c:	93 1f       	adc	r25, r19
    147e:	fc 01       	movw	r30, r24
    1480:	40 83       	st	Z, r20
		}
	}

	if (paddingcnt != 0) // 패딩 함수.
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	98 17       	cp	r25, r24
    148e:	10 f3       	brcs	.-60     	; 0x1454 <CRYPTO_ctr128_encrypt_FACE_Light+0xf0>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	8a 83       	std	Y+2, r24	; 0x02
    1494:	11 c0       	rjmp	.+34     	; 0x14b8 <CRYPTO_ctr128_encrypt_FACE_Light+0x154>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	30 e1       	ldi	r19, 0x10	; 16
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	43 2f       	mov	r20, r19
    14a2:	42 1b       	sub	r20, r18
    14a4:	9e 01       	movw	r18, r28
    14a6:	2c 5f       	subi	r18, 0xFC	; 252
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	82 0f       	add	r24, r18
    14ac:	93 1f       	adc	r25, r19
    14ae:	fc 01       	movw	r30, r24
    14b0:	40 83       	st	Z, r20
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	8f 5f       	subi	r24, 0xFF	; 255
    14b6:	8a 83       	std	Y+2, r24	; 0x02
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 31       	cpi	r24, 0x10	; 16
    14bc:	60 f3       	brcs	.-40     	; 0x1496 <CRYPTO_ctr128_encrypt_FACE_Light+0x132>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
    14be:	19 82       	std	Y+1, r1	; 0x01
    14c0:	7e c0       	rjmp	.+252    	; 0x15be <CRYPTO_ctr128_encrypt_FACE_Light+0x25a>
	{
		if (cnt_i != 0)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	88 23       	and	r24, r24
    14c6:	39 f0       	breq	.+14     	; 0x14d6 <CRYPTO_ctr128_encrypt_FACE_Light+0x172>
		Count_Add_for_FACE_LIGHT(count);
    14c8:	ce 01       	movw	r24, r28
    14ca:	83 5b       	subi	r24, 0xB3	; 179
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	fc 01       	movw	r30, r24
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	55 dc       	rcall	.-1878   	; 0xd80 <Count_Add_for_FACE_LIGHT>

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    14d6:	1a 82       	std	Y+2, r1	; 0x02
    14d8:	1a c0       	rjmp	.+52     	; 0x150e <CRYPTO_ctr128_encrypt_FACE_Light+0x1aa>
		{
			iparray[cnt_j] = count[cnt_j];
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	2a 81       	ldd	r18, Y+2	; 0x02
    14e2:	22 2f       	mov	r18, r18
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	ae 01       	movw	r20, r28
    14e8:	43 5b       	subi	r20, 0xB3	; 179
    14ea:	5f 4f       	sbci	r21, 0xFF	; 255
    14ec:	fa 01       	movw	r30, r20
    14ee:	40 81       	ld	r20, Z
    14f0:	51 81       	ldd	r21, Z+1	; 0x01
    14f2:	24 0f       	add	r18, r20
    14f4:	35 1f       	adc	r19, r21
    14f6:	f9 01       	movw	r30, r18
    14f8:	40 81       	ld	r20, Z
    14fa:	9e 01       	movw	r18, r28
    14fc:	2c 5d       	subi	r18, 0xDC	; 220
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	fc 01       	movw	r30, r24
    1506:	40 83       	st	Z, r20
	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
	{
		if (cnt_i != 0)
		Count_Add_for_FACE_LIGHT(count);

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 31       	cpi	r24, 0x10	; 16
    1512:	18 f3       	brcs	.-58     	; 0x14da <CRYPTO_ctr128_encrypt_FACE_Light+0x176>
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey);
    1514:	ce 01       	movw	r24, r28
    1516:	85 5b       	subi	r24, 0xB5	; 181
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	fc 01       	movw	r30, r24
    151c:	20 81       	ld	r18, Z
    151e:	31 81       	ldd	r19, Z+1	; 0x01
    1520:	ae 01       	movw	r20, r28
    1522:	4c 5c       	subi	r20, 0xCC	; 204
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    1526:	ce 01       	movw	r24, r28
    1528:	88 5b       	subi	r24, 0xB8	; 184
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	fc 01       	movw	r30, r24
    152e:	60 81       	ld	r22, Z
    1530:	71 81       	ldd	r23, Z+1	; 0x01
    1532:	ce 01       	movw	r24, r28
    1534:	84 96       	adiw	r24, 0x24	; 36
    1536:	a1 dd       	rcall	.-1214   	; 0x107a <AES_encrypt_FACE_Light>
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    1538:	1a 82       	std	Y+2, r1	; 0x02
    153a:	3b c0       	rjmp	.+118    	; 0x15b2 <CRYPTO_ctr128_encrypt_FACE_Light+0x24e>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	4a 81       	ldd	r20, Y+2	; 0x02
    154a:	44 2f       	mov	r20, r20
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	be 01       	movw	r22, r28
    1550:	6c 5c       	subi	r22, 0xCC	; 204
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	46 0f       	add	r20, r22
    1556:	57 1f       	adc	r21, r23
    1558:	fa 01       	movw	r30, r20
    155a:	a0 81       	ld	r26, Z
    155c:	49 81       	ldd	r20, Y+1	; 0x01
    155e:	64 2f       	mov	r22, r20
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	4a 81       	ldd	r20, Y+2	; 0x02
    1564:	44 2f       	mov	r20, r20
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	62 95       	swap	r22
    156a:	72 95       	swap	r23
    156c:	70 7f       	andi	r23, 0xF0	; 240
    156e:	76 27       	eor	r23, r22
    1570:	60 7f       	andi	r22, 0xF0	; 240
    1572:	76 27       	eor	r23, r22
    1574:	fe 01       	movw	r30, r28
    1576:	31 96       	adiw	r30, 0x01	; 1
    1578:	6e 0f       	add	r22, r30
    157a:	7f 1f       	adc	r23, r31
    157c:	46 0f       	add	r20, r22
    157e:	57 1f       	adc	r21, r23
    1580:	4d 5f       	subi	r20, 0xFD	; 253
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	fa 01       	movw	r30, r20
    1586:	40 81       	ld	r20, Z
    1588:	6a 2f       	mov	r22, r26
    158a:	64 27       	eor	r22, r20
    158c:	22 95       	swap	r18
    158e:	32 95       	swap	r19
    1590:	30 7f       	andi	r19, 0xF0	; 240
    1592:	32 27       	eor	r19, r18
    1594:	20 7f       	andi	r18, 0xF0	; 240
    1596:	32 27       	eor	r19, r18
    1598:	ae 01       	movw	r20, r28
    159a:	4f 5f       	subi	r20, 0xFF	; 255
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	24 0f       	add	r18, r20
    15a0:	35 1f       	adc	r19, r21
    15a2:	82 0f       	add	r24, r18
    15a4:	93 1f       	adc	r25, r19
    15a6:	43 96       	adiw	r24, 0x13	; 19
    15a8:	fc 01       	movw	r30, r24
    15aa:	60 83       	st	Z, r22
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey);
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	80 31       	cpi	r24, 0x10	; 16
    15b6:	10 f2       	brcs	.-124    	; 0x153c <CRYPTO_ctr128_encrypt_FACE_Light+0x1d8>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	88 23       	and	r24, r24
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <CRYPTO_ctr128_encrypt_FACE_Light+0x262>
    15c4:	7e cf       	rjmp	.-260    	; 0x14c2 <CRYPTO_ctr128_encrypt_FACE_Light+0x15e>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	3c c0       	rjmp	.+120    	; 0x1642 <CRYPTO_ctr128_encrypt_FACE_Light+0x2de>
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    15ca:	1a 82       	std	Y+2, r1	; 0x02
    15cc:	34 c0       	rjmp	.+104    	; 0x1636 <CRYPTO_ctr128_encrypt_FACE_Light+0x2d2>
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 01       	movw	r18, r24
    15d6:	22 95       	swap	r18
    15d8:	32 95       	swap	r19
    15da:	30 7f       	andi	r19, 0xF0	; 240
    15dc:	32 27       	eor	r19, r18
    15de:	20 7f       	andi	r18, 0xF0	; 240
    15e0:	32 27       	eor	r19, r18
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	82 0f       	add	r24, r18
    15ea:	93 1f       	adc	r25, r19
    15ec:	9c 01       	movw	r18, r24
    15ee:	ce 01       	movw	r24, r28
    15f0:	8a 5b       	subi	r24, 0xBA	; 186
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	fc 01       	movw	r30, r24
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	82 0f       	add	r24, r18
    15fc:	93 1f       	adc	r25, r19
    15fe:	29 81       	ldd	r18, Y+1	; 0x01
    1600:	42 2f       	mov	r20, r18
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	2a 81       	ldd	r18, Y+2	; 0x02
    1606:	22 2f       	mov	r18, r18
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	42 95       	swap	r20
    160c:	52 95       	swap	r21
    160e:	50 7f       	andi	r21, 0xF0	; 240
    1610:	54 27       	eor	r21, r20
    1612:	40 7f       	andi	r20, 0xF0	; 240
    1614:	54 27       	eor	r21, r20
    1616:	be 01       	movw	r22, r28
    1618:	6f 5f       	subi	r22, 0xFF	; 255
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	46 0f       	add	r20, r22
    161e:	57 1f       	adc	r21, r23
    1620:	24 0f       	add	r18, r20
    1622:	35 1f       	adc	r19, r21
    1624:	2d 5e       	subi	r18, 0xED	; 237
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	f9 01       	movw	r30, r18
    162a:	20 81       	ld	r18, Z
    162c:	fc 01       	movw	r30, r24
    162e:	20 83       	st	Z, r18
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 31       	cpi	r24, 0x10	; 16
    163a:	48 f2       	brcs	.-110    	; 0x15ce <CRYPTO_ctr128_encrypt_FACE_Light+0x26a>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	88 23       	and	r24, r24
    1646:	09 f2       	breq	.-126    	; 0x15ca <CRYPTO_ctr128_encrypt_FACE_Light+0x266>
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
		}
	}
}
    1648:	00 00       	nop
    164a:	c2 5b       	subi	r28, 0xB2	; 178
    164c:	df 4f       	sbci	r29, 0xFF	; 255
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	08 95       	ret

00001666 <main>:
#include "AES_header.h"

EEMEM  u8 LUT_FL[4][4][256]  = {{{0x00}}};

int main(void)
{
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	c0 54       	subi	r28, 0x40	; 64
    1678:	d1 09       	sbc	r29, r1
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
	
	// 	 u8 inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
	// 	 u8 userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	u8 inp[16 * BLOCKSIZE] ={0x00};
    1684:	20 e1       	ldi	r18, 0x10	; 16
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	fc 01       	movw	r30, r24
    168c:	32 2f       	mov	r19, r18
    168e:	11 92       	st	Z+, r1
    1690:	3a 95       	dec	r19
    1692:	e9 f7       	brne	.-6      	; 0x168e <main+0x28>
	u8 out[16 * BLOCKSIZE] = {0x00};
    1694:	20 e1       	ldi	r18, 0x10	; 16
    1696:	ce 01       	movw	r24, r28
    1698:	41 96       	adiw	r24, 0x11	; 17
    169a:	fc 01       	movw	r30, r24
    169c:	32 2f       	mov	r19, r18
    169e:	11 92       	st	Z+, r1
    16a0:	3a 95       	dec	r19
    16a2:	e9 f7       	brne	.-6      	; 0x169e <main+0x38>
	u8 userkey[16] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
    16a4:	80 e1       	ldi	r24, 0x10	; 16
    16a6:	e0 e0       	ldi	r30, 0x00	; 0
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	de 01       	movw	r26, r28
    16ac:	91 96       	adiw	r26, 0x21	; 33
    16ae:	01 90       	ld	r0, Z+
    16b0:	0d 92       	st	X+, r0
    16b2:	8a 95       	dec	r24
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <main+0x48>
	u8 count[16] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff};
    16b6:	20 e1       	ldi	r18, 0x10	; 16
    16b8:	ce 01       	movw	r24, r28
    16ba:	c1 96       	adiw	r24, 0x31	; 49
    16bc:	fc 01       	movw	r30, r24
    16be:	32 2f       	mov	r19, r18
    16c0:	11 92       	st	Z+, r1
    16c2:	3a 95       	dec	r19
    16c4:	e9 f7       	brne	.-6      	; 0x16c0 <main+0x5a>
    16c6:	8f ef       	ldi	r24, 0xFF	; 255
    16c8:	8e af       	std	Y+62, r24	; 0x3e
    16ca:	2f ef       	ldi	r18, 0xFF	; 255
    16cc:	ce 01       	movw	r24, r28
    16ce:	80 5c       	subi	r24, 0xC0	; 192
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	fc 01       	movw	r30, r24
    16d4:	20 83       	st	Z, r18
	
	Make_LUT_Face_Light(LUT_FL,userkey,count);
    16d6:	9e 01       	movw	r18, r28
    16d8:	2f 5c       	subi	r18, 0xCF	; 207
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	ce 01       	movw	r24, r28
    16de:	81 96       	adiw	r24, 0x21	; 33
    16e0:	a9 01       	movw	r20, r18
    16e2:	bc 01       	movw	r22, r24
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	d4 db       	rcall	.-2136   	; 0xe92 <Make_LUT_Face_Light>
	CRYPTO_ctr128_encrypt_FACE_Light(inp,out,LUT_FL,AES_KEY_BIT,userkey,count);
    16ea:	ae 01       	movw	r20, r28
    16ec:	4f 5c       	subi	r20, 0xCF	; 207
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255
    16f0:	9e 01       	movw	r18, r28
    16f2:	2f 5d       	subi	r18, 0xDF	; 223
    16f4:	3f 4f       	sbci	r19, 0xFF	; 255
    16f6:	ce 01       	movw	r24, r28
    16f8:	41 96       	adiw	r24, 0x11	; 17
    16fa:	7a 01       	movw	r14, r20
    16fc:	89 01       	movw	r16, r18
    16fe:	20 e8       	ldi	r18, 0x80	; 128
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	bc 01       	movw	r22, r24
    1706:	ce 01       	movw	r24, r28
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	2c de       	rcall	.-936    	; 0x1364 <CRYPTO_ctr128_encrypt_FACE_Light>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
	//AES_encrypt_asm(inp,out,userkey);
	//AES_encrypt_asm_Progm(inp,out,userkey)


	
}
    1710:	c0 5c       	subi	r28, 0xC0	; 192
    1712:	df 4f       	sbci	r29, 0xFF	; 255
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	08 95       	ret

0000172c <eeprom_read_byte>:
    172c:	e1 99       	sbic	0x1c, 1	; 28
    172e:	fe cf       	rjmp	.-4      	; 0x172c <eeprom_read_byte>
    1730:	9f bb       	out	0x1f, r25	; 31
    1732:	8e bb       	out	0x1e, r24	; 30
    1734:	e0 9a       	sbi	0x1c, 0	; 28
    1736:	99 27       	eor	r25, r25
    1738:	8d b3       	in	r24, 0x1d	; 29
    173a:	08 95       	ret

0000173c <eeprom_update_byte>:
    173c:	26 2f       	mov	r18, r22

0000173e <eeprom_update_r18>:
    173e:	e1 99       	sbic	0x1c, 1	; 28
    1740:	fe cf       	rjmp	.-4      	; 0x173e <eeprom_update_r18>
    1742:	9f bb       	out	0x1f, r25	; 31
    1744:	8e bb       	out	0x1e, r24	; 30
    1746:	e0 9a       	sbi	0x1c, 0	; 28
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	0d b2       	in	r0, 0x1d	; 29
    174c:	02 16       	cp	r0, r18
    174e:	31 f0       	breq	.+12     	; 0x175c <eeprom_update_r18+0x1e>
    1750:	2d bb       	out	0x1d, r18	; 29
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	e2 9a       	sbi	0x1c, 2	; 28
    1758:	e1 9a       	sbi	0x1c, 1	; 28
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	08 95       	ret

0000175e <_exit>:
    175e:	f8 94       	cli

00001760 <__stop_program>:
    1760:	ff cf       	rjmp	.-2      	; 0x1760 <__stop_program>
