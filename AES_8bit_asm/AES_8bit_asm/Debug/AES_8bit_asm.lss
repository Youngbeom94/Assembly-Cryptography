
AES_8bit_asm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  0000173c  000017b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000173c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00001940  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ee  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094a  00000000  00000000  00002d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010f2  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f4  00000000  00000000  00004744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065f  00000000  00000000  00004f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
       6:	00 00       	nop
       8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
       a:	00 00       	nop
       c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
       e:	00 00       	nop
      10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
      12:	00 00       	nop
      14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
      16:	00 00       	nop
      18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
      1e:	00 00       	nop
      20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
      22:	00 00       	nop
      24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
      26:	00 00       	nop
      28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
      2e:	00 00       	nop
      30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
      32:	00 00       	nop
      34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
      36:	00 00       	nop
      38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
      3e:	00 00       	nop
      40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
      42:	00 00       	nop
      44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
      46:	00 00       	nop
      48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
      4e:	00 00       	nop
      50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
      52:	00 00       	nop
      54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
      56:	00 00       	nop
      58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
      5e:	00 00       	nop
      60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
      66:	00 00       	nop
      68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
      6e:	00 00       	nop
      70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
      72:	00 00       	nop
      74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
      76:	00 00       	nop
      78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
      7e:	00 00       	nop
      80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
      82:	00 00       	nop
      84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
      86:	00 00       	nop
      88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e3       	ldi	r30, 0x3C	; 60
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	0e 94 1e 0b 	call	0x163c	; 0x163c <main>
      b6:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <_exit>

000000ba <__bad_interrupt>:
      ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <MixColumns_asm>:
 .endm

 .global MixColumns_asm
MixColumns_asm:

	regBackupAdd
      bc:	0f 92       	push	r0
      be:	3f 92       	push	r3
      c0:	4f 92       	push	r4
      c2:	5f 92       	push	r5
      c4:	6f 92       	push	r6
      c6:	7f 92       	push	r7
      c8:	8f 92       	push	r8
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	ef 93       	push	r30
      d4:	ff 93       	push	r31
	movw r30,	r24 ; Z
      d6:	fc 01       	movw	r30, r24
	movw r28,	r24 ; Y
      d8:	ec 01       	movw	r28, r24
	ldi	 r16,	4
      da:	04 e0       	ldi	r16, 0x04	; 4
	ldi  r17,	0x1b
      dc:	1b e1       	ldi	r17, 0x1B	; 27

000000de <loop>:

loop:
	;2 3 1 1 
	ld r2,		Y+	;2
      de:	29 90       	ld	r2, Y+
	ld r4,		Y+	;3
      e0:	49 90       	ld	r4, Y+
	ld r5,		Y+	;1
      e2:	59 90       	ld	r5, Y+
	ld r6,		Y+	;1
      e4:	69 90       	ld	r6, Y+
	
	mov r3,		r2
      e6:	32 2c       	mov	r3, r2
	eor r3,		r4
      e8:	34 24       	eor	r3, r4
	mov r7,		r3 ; r7 = r3
      ea:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
      ec:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
      ee:	83 2c       	mov	r8, r3
	add	r8,		r8
      f0:	88 0c       	add	r8, r8
	eor r8,		r8
      f2:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
      f4:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
      f6:	81 9e       	mul	r8, r17
	eor	r0,		r7 
      f8:	07 24       	eor	r0, r7
	eor r0,		r4 
      fa:	04 24       	eor	r0, r4
	eor r0,		r5
      fc:	05 24       	eor	r0, r5
	eor r0,		r6
      fe:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[0]
     100:	01 92       	st	Z+, r0

	; 1 2 3 1 
	mov r3,		r4
     102:	34 2c       	mov	r3, r4
	eor r3,		r5
     104:	35 24       	eor	r3, r5
	mov r7,		r3 ; r7 = r3
     106:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
     108:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
     10a:	83 2c       	mov	r8, r3
	add	r8,		r8
     10c:	88 0c       	add	r8, r8
	eor r8,		r8
     10e:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
     110:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
     112:	81 9e       	mul	r8, r17
	eor	r0,		r7 
     114:	07 24       	eor	r0, r7
	eor r0,		r2
     116:	02 24       	eor	r0, r2
	eor r0,		r5
     118:	05 24       	eor	r0, r5
	eor r0,		r6
     11a:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[1]
     11c:	01 92       	st	Z+, r0


	; 1 1 2 3 
	mov r3,		r5
     11e:	35 2c       	mov	r3, r5
	eor r3,		r6
     120:	36 24       	eor	r3, r6
	mov r7,		r3 ; r7 = r3
     122:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
     124:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
     126:	83 2c       	mov	r8, r3
	add	r8,		r8
     128:	88 0c       	add	r8, r8
	eor r8,		r8
     12a:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
     12c:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
     12e:	81 9e       	mul	r8, r17
	eor	r0,		r7 
     130:	07 24       	eor	r0, r7
	eor r0,		r2
     132:	02 24       	eor	r0, r2
	eor r0,		r4
     134:	04 24       	eor	r0, r4
	eor r0,		r6
     136:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[2]
     138:	01 92       	st	Z+, r0

	; 3 1 1 2 
	mov r3,		r6
     13a:	36 2c       	mov	r3, r6
	eor r3,		r2
     13c:	32 24       	eor	r3, r2
	mov r7,		r3 ; r7 = r3
     13e:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
     140:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
     142:	83 2c       	mov	r8, r3
	add	r8,		r8
     144:	88 0c       	add	r8, r8
	eor r8,		r8
     146:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
     148:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
     14a:	81 9e       	mul	r8, r17
	eor	r0,		r7 
     14c:	07 24       	eor	r0, r7
	eor r0,		r2
     14e:	02 24       	eor	r0, r2
	eor r0,		r4
     150:	04 24       	eor	r0, r4
	eor r0,		r5
     152:	05 24       	eor	r0, r5
	st Z+,		r0 ; -------------------[3]
     154:	01 92       	st	Z+, r0
	dec		r16
     156:	0a 95       	dec	r16
	brne loop
     158:	11 f6       	brne	.-124    	; 0xde <loop>

	regRetriveveAdd
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	1f 91       	pop	r17
     164:	0f 91       	pop	r16
     166:	8f 90       	pop	r8
     168:	7f 90       	pop	r7
     16a:	6f 90       	pop	r6
     16c:	5f 90       	pop	r5
     16e:	4f 90       	pop	r4
     170:	3f 90       	pop	r3
     172:	0f 90       	pop	r0

     174:	08 95       	ret

00000176 <SubByte>:

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
	}
}
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <SubByte+0x6>
     17c:	00 d0       	rcall	.+0      	; 0x17e <SubByte+0x8>
     17e:	1f 92       	push	r1
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	9b 83       	std	Y+3, r25	; 0x03
     186:	8a 83       	std	Y+2, r24	; 0x02
     188:	7d 83       	std	Y+5, r23	; 0x05
     18a:	6c 83       	std	Y+4, r22	; 0x04
     18c:	19 82       	std	Y+1, r1	; 0x01
     18e:	1d c0       	rjmp	.+58     	; 0x1ca <SubByte+0x54>
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	88 2f       	mov	r24, r24
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	2a 81       	ldd	r18, Y+2	; 0x02
     198:	3b 81       	ldd	r19, Y+3	; 0x03
     19a:	82 0f       	add	r24, r18
     19c:	93 1f       	adc	r25, r19
     19e:	29 81       	ldd	r18, Y+1	; 0x01
     1a0:	22 2f       	mov	r18, r18
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	4a 81       	ldd	r20, Y+2	; 0x02
     1a6:	5b 81       	ldd	r21, Y+3	; 0x03
     1a8:	24 0f       	add	r18, r20
     1aa:	35 1f       	adc	r19, r21
     1ac:	f9 01       	movw	r30, r18
     1ae:	20 81       	ld	r18, Z
     1b0:	22 2f       	mov	r18, r18
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	4c 81       	ldd	r20, Y+4	; 0x04
     1b6:	5d 81       	ldd	r21, Y+5	; 0x05
     1b8:	24 0f       	add	r18, r20
     1ba:	35 1f       	adc	r19, r21
     1bc:	f9 01       	movw	r30, r18
     1be:	20 81       	ld	r18, Z
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	8f 5f       	subi	r24, 0xFF	; 255
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	80 31       	cpi	r24, 0x10	; 16
     1ce:	00 f3       	brcs	.-64     	; 0x190 <SubByte+0x1a>
     1d0:	00 00       	nop
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <ShiftRow>:
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <ShiftRow+0x6>
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <ShiftRow+0x8>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	9c 83       	std	Y+4, r25	; 0x04
     1f0:	8b 83       	std	Y+3, r24	; 0x03
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	9c 81       	ldd	r25, Y+4	; 0x04
     1f6:	fc 01       	movw	r30, r24
     1f8:	85 85       	ldd	r24, Z+13	; 0x0d
     1fa:	89 83       	std	Y+1, r24	; 0x01
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	9c 81       	ldd	r25, Y+4	; 0x04
     200:	0d 96       	adiw	r24, 0x0d	; 13
     202:	2b 81       	ldd	r18, Y+3	; 0x03
     204:	3c 81       	ldd	r19, Y+4	; 0x04
     206:	f9 01       	movw	r30, r18
     208:	21 81       	ldd	r18, Z+1	; 0x01
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	9c 81       	ldd	r25, Y+4	; 0x04
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	2b 81       	ldd	r18, Y+3	; 0x03
     216:	3c 81       	ldd	r19, Y+4	; 0x04
     218:	f9 01       	movw	r30, r18
     21a:	25 81       	ldd	r18, Z+5	; 0x05
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	05 96       	adiw	r24, 0x05	; 5
     226:	2b 81       	ldd	r18, Y+3	; 0x03
     228:	3c 81       	ldd	r19, Y+4	; 0x04
     22a:	f9 01       	movw	r30, r18
     22c:	21 85       	ldd	r18, Z+9	; 0x09
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	9c 81       	ldd	r25, Y+4	; 0x04
     236:	09 96       	adiw	r24, 0x09	; 9
     238:	29 81       	ldd	r18, Y+1	; 0x01
     23a:	fc 01       	movw	r30, r24
     23c:	20 83       	st	Z, r18
     23e:	8b 81       	ldd	r24, Y+3	; 0x03
     240:	9c 81       	ldd	r25, Y+4	; 0x04
     242:	fc 01       	movw	r30, r24
     244:	82 85       	ldd	r24, Z+10	; 0x0a
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	fc 01       	movw	r30, r24
     24e:	86 85       	ldd	r24, Z+14	; 0x0e
     250:	8a 83       	std	Y+2, r24	; 0x02
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	9c 81       	ldd	r25, Y+4	; 0x04
     256:	0a 96       	adiw	r24, 0x0a	; 10
     258:	2b 81       	ldd	r18, Y+3	; 0x03
     25a:	3c 81       	ldd	r19, Y+4	; 0x04
     25c:	f9 01       	movw	r30, r18
     25e:	22 81       	ldd	r18, Z+2	; 0x02
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	9c 81       	ldd	r25, Y+4	; 0x04
     268:	0e 96       	adiw	r24, 0x0e	; 14
     26a:	2b 81       	ldd	r18, Y+3	; 0x03
     26c:	3c 81       	ldd	r19, Y+4	; 0x04
     26e:	f9 01       	movw	r30, r18
     270:	26 81       	ldd	r18, Z+6	; 0x06
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	02 96       	adiw	r24, 0x02	; 2
     27c:	29 81       	ldd	r18, Y+1	; 0x01
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	9c 81       	ldd	r25, Y+4	; 0x04
     286:	06 96       	adiw	r24, 0x06	; 6
     288:	2a 81       	ldd	r18, Y+2	; 0x02
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	9c 81       	ldd	r25, Y+4	; 0x04
     292:	fc 01       	movw	r30, r24
     294:	87 81       	ldd	r24, Z+7	; 0x07
     296:	89 83       	std	Y+1, r24	; 0x01
     298:	8b 81       	ldd	r24, Y+3	; 0x03
     29a:	9c 81       	ldd	r25, Y+4	; 0x04
     29c:	07 96       	adiw	r24, 0x07	; 7
     29e:	2b 81       	ldd	r18, Y+3	; 0x03
     2a0:	3c 81       	ldd	r19, Y+4	; 0x04
     2a2:	f9 01       	movw	r30, r18
     2a4:	23 81       	ldd	r18, Z+3	; 0x03
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
     2aa:	8b 81       	ldd	r24, Y+3	; 0x03
     2ac:	9c 81       	ldd	r25, Y+4	; 0x04
     2ae:	03 96       	adiw	r24, 0x03	; 3
     2b0:	2b 81       	ldd	r18, Y+3	; 0x03
     2b2:	3c 81       	ldd	r19, Y+4	; 0x04
     2b4:	f9 01       	movw	r30, r18
     2b6:	27 85       	ldd	r18, Z+15	; 0x0f
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 83       	st	Z, r18
     2bc:	8b 81       	ldd	r24, Y+3	; 0x03
     2be:	9c 81       	ldd	r25, Y+4	; 0x04
     2c0:	0f 96       	adiw	r24, 0x0f	; 15
     2c2:	2b 81       	ldd	r18, Y+3	; 0x03
     2c4:	3c 81       	ldd	r19, Y+4	; 0x04
     2c6:	f9 01       	movw	r30, r18
     2c8:	23 85       	ldd	r18, Z+11	; 0x0b
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 83       	st	Z, r18
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	0b 96       	adiw	r24, 0x0b	; 11
     2d4:	29 81       	ldd	r18, Y+1	; 0x01
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
     2da:	00 00       	nop
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <MixColumns>:
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	2e 97       	sbiw	r28, 0x0e	; 14
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	9e 87       	std	Y+14, r25	; 0x0e
     300:	8d 87       	std	Y+13, r24	; 0x0d
     302:	1a 82       	std	Y+2, r1	; 0x02
     304:	19 82       	std	Y+1, r1	; 0x01
     306:	98 c1       	rjmp	.+816    	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	9a 81       	ldd	r25, Y+2	; 0x02
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	9c 01       	movw	r18, r24
     316:	8d 85       	ldd	r24, Y+13	; 0x0d
     318:	9e 85       	ldd	r25, Y+14	; 0x0e
     31a:	82 0f       	add	r24, r18
     31c:	93 1f       	adc	r25, r19
     31e:	fc 01       	movw	r30, r24
     320:	40 81       	ld	r20, Z
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	2d 85       	ldd	r18, Y+13	; 0x0d
     332:	3e 85       	ldd	r19, Y+14	; 0x0e
     334:	82 0f       	add	r24, r18
     336:	93 1f       	adc	r25, r19
     338:	fc 01       	movw	r30, r24
     33a:	80 81       	ld	r24, Z
     33c:	84 27       	eor	r24, r20
     33e:	8d 83       	std	Y+5, r24	; 0x05
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	88 2f       	mov	r24, r24
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	28 2f       	mov	r18, r24
     34c:	8d 81       	ldd	r24, Y+5	; 0x05
     34e:	98 2f       	mov	r25, r24
     350:	99 1f       	adc	r25, r25
     352:	99 27       	eor	r25, r25
     354:	99 1f       	adc	r25, r25
     356:	8b e1       	ldi	r24, 0x1B	; 27
     358:	98 9f       	mul	r25, r24
     35a:	80 2d       	mov	r24, r0
     35c:	11 24       	eor	r1, r1
     35e:	82 27       	eor	r24, r18
     360:	8d 83       	std	Y+5, r24	; 0x05
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	2d 85       	ldd	r18, Y+13	; 0x0d
     372:	3e 85       	ldd	r19, Y+14	; 0x0e
     374:	82 0f       	add	r24, r18
     376:	93 1f       	adc	r25, r19
     378:	fc 01       	movw	r30, r24
     37a:	40 81       	ld	r20, Z
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	02 96       	adiw	r24, 0x02	; 2
     38a:	2d 85       	ldd	r18, Y+13	; 0x0d
     38c:	3e 85       	ldd	r19, Y+14	; 0x0e
     38e:	82 0f       	add	r24, r18
     390:	93 1f       	adc	r25, r19
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	48 27       	eor	r20, r24
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	03 96       	adiw	r24, 0x03	; 3
     3a6:	2d 85       	ldd	r18, Y+13	; 0x0d
     3a8:	3e 85       	ldd	r19, Y+14	; 0x0e
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	fc 01       	movw	r30, r24
     3b0:	80 81       	ld	r24, Z
     3b2:	84 27       	eor	r24, r20
     3b4:	8e 83       	std	Y+6, r24	; 0x06
     3b6:	9d 81       	ldd	r25, Y+5	; 0x05
     3b8:	8e 81       	ldd	r24, Y+6	; 0x06
     3ba:	89 27       	eor	r24, r25
     3bc:	89 87       	std	Y+9, r24	; 0x09
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	2d 85       	ldd	r18, Y+13	; 0x0d
     3ce:	3e 85       	ldd	r19, Y+14	; 0x0e
     3d0:	82 0f       	add	r24, r18
     3d2:	93 1f       	adc	r25, r19
     3d4:	fc 01       	movw	r30, r24
     3d6:	40 81       	ld	r20, Z
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	9a 81       	ldd	r25, Y+2	; 0x02
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	02 96       	adiw	r24, 0x02	; 2
     3e6:	2d 85       	ldd	r18, Y+13	; 0x0d
     3e8:	3e 85       	ldd	r19, Y+14	; 0x0e
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
     3ee:	fc 01       	movw	r30, r24
     3f0:	80 81       	ld	r24, Z
     3f2:	84 27       	eor	r24, r20
     3f4:	8d 83       	std	Y+5, r24	; 0x05
     3f6:	8d 81       	ldd	r24, Y+5	; 0x05
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	28 2f       	mov	r18, r24
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	98 2f       	mov	r25, r24
     406:	99 1f       	adc	r25, r25
     408:	99 27       	eor	r25, r25
     40a:	99 1f       	adc	r25, r25
     40c:	8b e1       	ldi	r24, 0x1B	; 27
     40e:	98 9f       	mul	r25, r24
     410:	80 2d       	mov	r24, r0
     412:	11 24       	eor	r1, r1
     414:	82 27       	eor	r24, r18
     416:	8d 83       	std	Y+5, r24	; 0x05
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	9c 01       	movw	r18, r24
     426:	8d 85       	ldd	r24, Y+13	; 0x0d
     428:	9e 85       	ldd	r25, Y+14	; 0x0e
     42a:	82 0f       	add	r24, r18
     42c:	93 1f       	adc	r25, r19
     42e:	fc 01       	movw	r30, r24
     430:	40 81       	ld	r20, Z
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	02 96       	adiw	r24, 0x02	; 2
     440:	2d 85       	ldd	r18, Y+13	; 0x0d
     442:	3e 85       	ldd	r19, Y+14	; 0x0e
     444:	82 0f       	add	r24, r18
     446:	93 1f       	adc	r25, r19
     448:	fc 01       	movw	r30, r24
     44a:	80 81       	ld	r24, Z
     44c:	48 27       	eor	r20, r24
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	03 96       	adiw	r24, 0x03	; 3
     45c:	2d 85       	ldd	r18, Y+13	; 0x0d
     45e:	3e 85       	ldd	r19, Y+14	; 0x0e
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	fc 01       	movw	r30, r24
     466:	80 81       	ld	r24, Z
     468:	84 27       	eor	r24, r20
     46a:	8e 83       	std	Y+6, r24	; 0x06
     46c:	9d 81       	ldd	r25, Y+5	; 0x05
     46e:	8e 81       	ldd	r24, Y+6	; 0x06
     470:	89 27       	eor	r24, r25
     472:	8a 87       	std	Y+10, r24	; 0x0a
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	02 96       	adiw	r24, 0x02	; 2
     482:	2d 85       	ldd	r18, Y+13	; 0x0d
     484:	3e 85       	ldd	r19, Y+14	; 0x0e
     486:	82 0f       	add	r24, r18
     488:	93 1f       	adc	r25, r19
     48a:	fc 01       	movw	r30, r24
     48c:	40 81       	ld	r20, Z
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	9a 81       	ldd	r25, Y+2	; 0x02
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	03 96       	adiw	r24, 0x03	; 3
     49c:	2d 85       	ldd	r18, Y+13	; 0x0d
     49e:	3e 85       	ldd	r19, Y+14	; 0x0e
     4a0:	82 0f       	add	r24, r18
     4a2:	93 1f       	adc	r25, r19
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	84 27       	eor	r24, r20
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	8d 81       	ldd	r24, Y+5	; 0x05
     4ae:	88 2f       	mov	r24, r24
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	28 2f       	mov	r18, r24
     4b8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ba:	98 2f       	mov	r25, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	99 27       	eor	r25, r25
     4c0:	99 1f       	adc	r25, r25
     4c2:	8b e1       	ldi	r24, 0x1B	; 27
     4c4:	98 9f       	mul	r25, r24
     4c6:	80 2d       	mov	r24, r0
     4c8:	11 24       	eor	r1, r1
     4ca:	82 27       	eor	r24, r18
     4cc:	8d 83       	std	Y+5, r24	; 0x05
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	9c 01       	movw	r18, r24
     4dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     4de:	9e 85       	ldd	r25, Y+14	; 0x0e
     4e0:	82 0f       	add	r24, r18
     4e2:	93 1f       	adc	r25, r19
     4e4:	fc 01       	movw	r30, r24
     4e6:	40 81       	ld	r20, Z
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	2d 85       	ldd	r18, Y+13	; 0x0d
     4f8:	3e 85       	ldd	r19, Y+14	; 0x0e
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
     4fe:	fc 01       	movw	r30, r24
     500:	80 81       	ld	r24, Z
     502:	48 27       	eor	r20, r24
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	03 96       	adiw	r24, 0x03	; 3
     512:	2d 85       	ldd	r18, Y+13	; 0x0d
     514:	3e 85       	ldd	r19, Y+14	; 0x0e
     516:	82 0f       	add	r24, r18
     518:	93 1f       	adc	r25, r19
     51a:	fc 01       	movw	r30, r24
     51c:	80 81       	ld	r24, Z
     51e:	84 27       	eor	r24, r20
     520:	8e 83       	std	Y+6, r24	; 0x06
     522:	9d 81       	ldd	r25, Y+5	; 0x05
     524:	8e 81       	ldd	r24, Y+6	; 0x06
     526:	89 27       	eor	r24, r25
     528:	8b 87       	std	Y+11, r24	; 0x0b
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	9c 01       	movw	r18, r24
     538:	8d 85       	ldd	r24, Y+13	; 0x0d
     53a:	9e 85       	ldd	r25, Y+14	; 0x0e
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
     540:	fc 01       	movw	r30, r24
     542:	40 81       	ld	r20, Z
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	03 96       	adiw	r24, 0x03	; 3
     552:	2d 85       	ldd	r18, Y+13	; 0x0d
     554:	3e 85       	ldd	r19, Y+14	; 0x0e
     556:	82 0f       	add	r24, r18
     558:	93 1f       	adc	r25, r19
     55a:	fc 01       	movw	r30, r24
     55c:	80 81       	ld	r24, Z
     55e:	84 27       	eor	r24, r20
     560:	8d 83       	std	Y+5, r24	; 0x05
     562:	8d 81       	ldd	r24, Y+5	; 0x05
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	28 2f       	mov	r18, r24
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	98 2f       	mov	r25, r24
     572:	99 1f       	adc	r25, r25
     574:	99 27       	eor	r25, r25
     576:	99 1f       	adc	r25, r25
     578:	8b e1       	ldi	r24, 0x1B	; 27
     57a:	98 9f       	mul	r25, r24
     57c:	80 2d       	mov	r24, r0
     57e:	11 24       	eor	r1, r1
     580:	82 27       	eor	r24, r18
     582:	8d 83       	std	Y+5, r24	; 0x05
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	9c 01       	movw	r18, r24
     592:	8d 85       	ldd	r24, Y+13	; 0x0d
     594:	9e 85       	ldd	r25, Y+14	; 0x0e
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	fc 01       	movw	r30, r24
     59c:	40 81       	ld	r20, Z
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	9a 81       	ldd	r25, Y+2	; 0x02
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ae:	3e 85       	ldd	r19, Y+14	; 0x0e
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	48 27       	eor	r20, r24
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	02 96       	adiw	r24, 0x02	; 2
     5c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ca:	3e 85       	ldd	r19, Y+14	; 0x0e
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	84 27       	eor	r24, r20
     5d6:	8e 83       	std	Y+6, r24	; 0x06
     5d8:	9d 81       	ldd	r25, Y+5	; 0x05
     5da:	8e 81       	ldd	r24, Y+6	; 0x06
     5dc:	89 27       	eor	r24, r25
     5de:	8c 87       	std	Y+12, r24	; 0x0c
     5e0:	1c 82       	std	Y+4, r1	; 0x04
     5e2:	1b 82       	std	Y+3, r1	; 0x03
     5e4:	20 c0       	rjmp	.+64     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ea:	9c 01       	movw	r18, r24
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	9c 81       	ldd	r25, Y+4	; 0x04
     5f8:	82 0f       	add	r24, r18
     5fa:	93 1f       	adc	r25, r19
     5fc:	9c 01       	movw	r18, r24
     5fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     600:	9e 85       	ldd	r25, Y+14	; 0x0e
     602:	82 0f       	add	r24, r18
     604:	93 1f       	adc	r25, r19
     606:	ae 01       	movw	r20, r28
     608:	47 5f       	subi	r20, 0xF7	; 247
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	2b 81       	ldd	r18, Y+3	; 0x03
     60e:	3c 81       	ldd	r19, Y+4	; 0x04
     610:	24 0f       	add	r18, r20
     612:	35 1f       	adc	r19, r21
     614:	f9 01       	movw	r30, r18
     616:	20 81       	ld	r18, Z
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	9c 81       	ldd	r25, Y+4	; 0x04
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	8b 83       	std	Y+3, r24	; 0x03
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	04 97       	sbiw	r24, 0x04	; 4
     62c:	e4 f2       	brlt	.-72     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	9a 83       	std	Y+2, r25	; 0x02
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	04 97       	sbiw	r24, 0x04	; 4
     63e:	0c f4       	brge	.+2      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     640:	63 ce       	rjmp	.-826    	; 0x308 <MixColumns+0x1e>
     642:	00 00       	nop
     644:	2e 96       	adiw	r28, 0x0e	; 14
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <AddRoundKey>:
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	00 d0       	rcall	.+0      	; 0x65c <AddRoundKey+0x6>
     65c:	00 d0       	rcall	.+0      	; 0x65e <AddRoundKey+0x8>
     65e:	00 d0       	rcall	.+0      	; 0x660 <AddRoundKey+0xa>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	9c 83       	std	Y+4, r25	; 0x04
     666:	8b 83       	std	Y+3, r24	; 0x03
     668:	7e 83       	std	Y+6, r23	; 0x06
     66a:	6d 83       	std	Y+5, r22	; 0x05
     66c:	1a 82       	std	Y+2, r1	; 0x02
     66e:	19 82       	std	Y+1, r1	; 0x01
     670:	1e c0       	rjmp	.+60     	; 0x6ae <AddRoundKey+0x58>
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	2b 81       	ldd	r18, Y+3	; 0x03
     678:	3c 81       	ldd	r19, Y+4	; 0x04
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	29 81       	ldd	r18, Y+1	; 0x01
     680:	3a 81       	ldd	r19, Y+2	; 0x02
     682:	4b 81       	ldd	r20, Y+3	; 0x03
     684:	5c 81       	ldd	r21, Y+4	; 0x04
     686:	24 0f       	add	r18, r20
     688:	35 1f       	adc	r19, r21
     68a:	f9 01       	movw	r30, r18
     68c:	60 81       	ld	r22, Z
     68e:	29 81       	ldd	r18, Y+1	; 0x01
     690:	3a 81       	ldd	r19, Y+2	; 0x02
     692:	4d 81       	ldd	r20, Y+5	; 0x05
     694:	5e 81       	ldd	r21, Y+6	; 0x06
     696:	24 0f       	add	r18, r20
     698:	35 1f       	adc	r19, r21
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	26 27       	eor	r18, r22
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	40 97       	sbiw	r24, 0x10	; 16
     6b4:	f4 f2       	brlt	.-68     	; 0x672 <AddRoundKey+0x1c>
     6b6:	00 00       	nop
     6b8:	26 96       	adiw	r28, 0x06	; 6
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <keyScheduling>:
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	69 97       	sbiw	r28, 0x19	; 25
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	9b 8b       	std	Y+19, r25	; 0x13
     6e0:	8a 8b       	std	Y+18, r24	; 0x12
     6e2:	7d 8b       	std	Y+21, r23	; 0x15
     6e4:	6c 8b       	std	Y+20, r22	; 0x14
     6e6:	5f 8b       	std	Y+23, r21	; 0x17
     6e8:	4e 8b       	std	Y+22, r20	; 0x16
     6ea:	39 8f       	std	Y+25, r19	; 0x19
     6ec:	28 8f       	std	Y+24, r18	; 0x18
     6ee:	19 82       	std	Y+1, r1	; 0x01
     6f0:	20 e1       	ldi	r18, 0x10	; 16
     6f2:	ce 01       	movw	r24, r28
     6f4:	02 96       	adiw	r24, 0x02	; 2
     6f6:	fc 01       	movw	r30, r24
     6f8:	32 2f       	mov	r19, r18
     6fa:	11 92       	st	Z+, r1
     6fc:	3a 95       	dec	r19
     6fe:	e9 f7       	brne	.-6      	; 0x6fa <keyScheduling+0x30>
     700:	8a 89       	ldd	r24, Y+18	; 0x12
     702:	9b 89       	ldd	r25, Y+19	; 0x13
     704:	fc 01       	movw	r30, r24
     706:	84 85       	ldd	r24, Z+12	; 0x0c
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	8a 89       	ldd	r24, Y+18	; 0x12
     70c:	9b 89       	ldd	r25, Y+19	; 0x13
     70e:	0d 96       	adiw	r24, 0x0d	; 13
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	2e 89       	ldd	r18, Y+22	; 0x16
     71a:	3f 89       	ldd	r19, Y+23	; 0x17
     71c:	82 0f       	add	r24, r18
     71e:	93 1f       	adc	r25, r19
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	8e 87       	std	Y+14, r24	; 0x0e
     726:	8a 89       	ldd	r24, Y+18	; 0x12
     728:	9b 89       	ldd	r25, Y+19	; 0x13
     72a:	0e 96       	adiw	r24, 0x0e	; 14
     72c:	fc 01       	movw	r30, r24
     72e:	80 81       	ld	r24, Z
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	2e 89       	ldd	r18, Y+22	; 0x16
     736:	3f 89       	ldd	r19, Y+23	; 0x17
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	8f 87       	std	Y+15, r24	; 0x0f
     742:	8a 89       	ldd	r24, Y+18	; 0x12
     744:	9b 89       	ldd	r25, Y+19	; 0x13
     746:	0f 96       	adiw	r24, 0x0f	; 15
     748:	fc 01       	movw	r30, r24
     74a:	80 81       	ld	r24, Z
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2e 89       	ldd	r18, Y+22	; 0x16
     752:	3f 89       	ldd	r19, Y+23	; 0x17
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	fc 01       	movw	r30, r24
     75a:	80 81       	ld	r24, Z
     75c:	88 8b       	std	Y+16, r24	; 0x10
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	88 2f       	mov	r24, r24
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	2e 89       	ldd	r18, Y+22	; 0x16
     766:	3f 89       	ldd	r19, Y+23	; 0x17
     768:	82 0f       	add	r24, r18
     76a:	93 1f       	adc	r25, r19
     76c:	fc 01       	movw	r30, r24
     76e:	80 81       	ld	r24, Z
     770:	89 8b       	std	Y+17, r24	; 0x11
     772:	4e 85       	ldd	r20, Y+14	; 0x0e
     774:	88 8d       	ldd	r24, Y+24	; 0x18
     776:	99 8d       	ldd	r25, Y+25	; 0x19
     778:	fc 01       	movw	r30, r24
     77a:	80 81       	ld	r24, Z
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	2c 89       	ldd	r18, Y+20	; 0x14
     782:	3d 89       	ldd	r19, Y+21	; 0x15
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	fc 01       	movw	r30, r24
     78a:	80 81       	ld	r24, Z
     78c:	24 2f       	mov	r18, r20
     78e:	28 27       	eor	r18, r24
     790:	8a 89       	ldd	r24, Y+18	; 0x12
     792:	9b 89       	ldd	r25, Y+19	; 0x13
     794:	fc 01       	movw	r30, r24
     796:	80 81       	ld	r24, Z
     798:	82 27       	eor	r24, r18
     79a:	8a 83       	std	Y+2, r24	; 0x02
     79c:	2f 85       	ldd	r18, Y+15	; 0x0f
     79e:	8a 89       	ldd	r24, Y+18	; 0x12
     7a0:	9b 89       	ldd	r25, Y+19	; 0x13
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	fc 01       	movw	r30, r24
     7a6:	80 81       	ld	r24, Z
     7a8:	82 27       	eor	r24, r18
     7aa:	8b 83       	std	Y+3, r24	; 0x03
     7ac:	28 89       	ldd	r18, Y+16	; 0x10
     7ae:	8a 89       	ldd	r24, Y+18	; 0x12
     7b0:	9b 89       	ldd	r25, Y+19	; 0x13
     7b2:	02 96       	adiw	r24, 0x02	; 2
     7b4:	fc 01       	movw	r30, r24
     7b6:	80 81       	ld	r24, Z
     7b8:	82 27       	eor	r24, r18
     7ba:	8c 83       	std	Y+4, r24	; 0x04
     7bc:	29 89       	ldd	r18, Y+17	; 0x11
     7be:	8a 89       	ldd	r24, Y+18	; 0x12
     7c0:	9b 89       	ldd	r25, Y+19	; 0x13
     7c2:	03 96       	adiw	r24, 0x03	; 3
     7c4:	fc 01       	movw	r30, r24
     7c6:	80 81       	ld	r24, Z
     7c8:	82 27       	eor	r24, r18
     7ca:	8d 83       	std	Y+5, r24	; 0x05
     7cc:	2a 81       	ldd	r18, Y+2	; 0x02
     7ce:	8a 89       	ldd	r24, Y+18	; 0x12
     7d0:	9b 89       	ldd	r25, Y+19	; 0x13
     7d2:	04 96       	adiw	r24, 0x04	; 4
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	82 27       	eor	r24, r18
     7da:	8e 83       	std	Y+6, r24	; 0x06
     7dc:	2b 81       	ldd	r18, Y+3	; 0x03
     7de:	8a 89       	ldd	r24, Y+18	; 0x12
     7e0:	9b 89       	ldd	r25, Y+19	; 0x13
     7e2:	05 96       	adiw	r24, 0x05	; 5
     7e4:	fc 01       	movw	r30, r24
     7e6:	80 81       	ld	r24, Z
     7e8:	82 27       	eor	r24, r18
     7ea:	8f 83       	std	Y+7, r24	; 0x07
     7ec:	2c 81       	ldd	r18, Y+4	; 0x04
     7ee:	8a 89       	ldd	r24, Y+18	; 0x12
     7f0:	9b 89       	ldd	r25, Y+19	; 0x13
     7f2:	06 96       	adiw	r24, 0x06	; 6
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	82 27       	eor	r24, r18
     7fa:	88 87       	std	Y+8, r24	; 0x08
     7fc:	2d 81       	ldd	r18, Y+5	; 0x05
     7fe:	8a 89       	ldd	r24, Y+18	; 0x12
     800:	9b 89       	ldd	r25, Y+19	; 0x13
     802:	07 96       	adiw	r24, 0x07	; 7
     804:	fc 01       	movw	r30, r24
     806:	80 81       	ld	r24, Z
     808:	82 27       	eor	r24, r18
     80a:	89 87       	std	Y+9, r24	; 0x09
     80c:	2e 81       	ldd	r18, Y+6	; 0x06
     80e:	8a 89       	ldd	r24, Y+18	; 0x12
     810:	9b 89       	ldd	r25, Y+19	; 0x13
     812:	08 96       	adiw	r24, 0x08	; 8
     814:	fc 01       	movw	r30, r24
     816:	80 81       	ld	r24, Z
     818:	82 27       	eor	r24, r18
     81a:	8a 87       	std	Y+10, r24	; 0x0a
     81c:	2f 81       	ldd	r18, Y+7	; 0x07
     81e:	8a 89       	ldd	r24, Y+18	; 0x12
     820:	9b 89       	ldd	r25, Y+19	; 0x13
     822:	09 96       	adiw	r24, 0x09	; 9
     824:	fc 01       	movw	r30, r24
     826:	80 81       	ld	r24, Z
     828:	82 27       	eor	r24, r18
     82a:	8b 87       	std	Y+11, r24	; 0x0b
     82c:	28 85       	ldd	r18, Y+8	; 0x08
     82e:	8a 89       	ldd	r24, Y+18	; 0x12
     830:	9b 89       	ldd	r25, Y+19	; 0x13
     832:	0a 96       	adiw	r24, 0x0a	; 10
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	82 27       	eor	r24, r18
     83a:	8c 87       	std	Y+12, r24	; 0x0c
     83c:	29 85       	ldd	r18, Y+9	; 0x09
     83e:	8a 89       	ldd	r24, Y+18	; 0x12
     840:	9b 89       	ldd	r25, Y+19	; 0x13
     842:	0b 96       	adiw	r24, 0x0b	; 11
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	82 27       	eor	r24, r18
     84a:	8d 87       	std	Y+13, r24	; 0x0d
     84c:	2a 85       	ldd	r18, Y+10	; 0x0a
     84e:	8a 89       	ldd	r24, Y+18	; 0x12
     850:	9b 89       	ldd	r25, Y+19	; 0x13
     852:	0c 96       	adiw	r24, 0x0c	; 12
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	82 27       	eor	r24, r18
     85a:	8e 87       	std	Y+14, r24	; 0x0e
     85c:	2b 85       	ldd	r18, Y+11	; 0x0b
     85e:	8a 89       	ldd	r24, Y+18	; 0x12
     860:	9b 89       	ldd	r25, Y+19	; 0x13
     862:	0d 96       	adiw	r24, 0x0d	; 13
     864:	fc 01       	movw	r30, r24
     866:	80 81       	ld	r24, Z
     868:	82 27       	eor	r24, r18
     86a:	8f 87       	std	Y+15, r24	; 0x0f
     86c:	2c 85       	ldd	r18, Y+12	; 0x0c
     86e:	8a 89       	ldd	r24, Y+18	; 0x12
     870:	9b 89       	ldd	r25, Y+19	; 0x13
     872:	0e 96       	adiw	r24, 0x0e	; 14
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	82 27       	eor	r24, r18
     87a:	88 8b       	std	Y+16, r24	; 0x10
     87c:	2d 85       	ldd	r18, Y+13	; 0x0d
     87e:	8a 89       	ldd	r24, Y+18	; 0x12
     880:	9b 89       	ldd	r25, Y+19	; 0x13
     882:	0f 96       	adiw	r24, 0x0f	; 15
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	82 27       	eor	r24, r18
     88a:	89 8b       	std	Y+17, r24	; 0x11
     88c:	88 8d       	ldd	r24, Y+24	; 0x18
     88e:	99 8d       	ldd	r25, Y+25	; 0x19
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	28 0f       	add	r18, r24
     898:	88 8d       	ldd	r24, Y+24	; 0x18
     89a:	99 8d       	ldd	r25, Y+25	; 0x19
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
     8a0:	19 82       	std	Y+1, r1	; 0x01
     8a2:	16 c0       	rjmp	.+44     	; 0x8d0 <keyScheduling+0x206>
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	2a 89       	ldd	r18, Y+18	; 0x12
     8ac:	3b 89       	ldd	r19, Y+19	; 0x13
     8ae:	82 0f       	add	r24, r18
     8b0:	93 1f       	adc	r25, r19
     8b2:	29 81       	ldd	r18, Y+1	; 0x01
     8b4:	22 2f       	mov	r18, r18
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	ae 01       	movw	r20, r28
     8ba:	4e 5f       	subi	r20, 0xFE	; 254
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	24 0f       	add	r18, r20
     8c0:	35 1f       	adc	r19, r21
     8c2:	f9 01       	movw	r30, r18
     8c4:	20 81       	ld	r18, Z
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	80 31       	cpi	r24, 0x10	; 16
     8d4:	38 f3       	brcs	.-50     	; 0x8a4 <keyScheduling+0x1da>
     8d6:	00 00       	nop
     8d8:	69 96       	adiw	r28, 0x19	; 25
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <reset_count>:

void reset_count(u8* count)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <reset_count+0x6>
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	9b 83       	std	Y+3, r25	; 0x03
     8f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 cnt_i = 0;
     8fa:	19 82       	std	Y+1, r1	; 0x01
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     8fc:	19 82       	std	Y+1, r1	; 0x01
     8fe:	0c c0       	rjmp	.+24     	; 0x918 <reset_count+0x2e>
	{
		count[cnt_i] = 0x00;
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	2a 81       	ldd	r18, Y+2	; 0x02
     908:	3b 81       	ldd	r19, Y+3	; 0x03
     90a:	82 0f       	add	r24, r18
     90c:	93 1f       	adc	r25, r19
     90e:	fc 01       	movw	r30, r24
     910:	10 82       	st	Z, r1
}

void reset_count(u8* count)
{
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     912:	89 81       	ldd	r24, Y+1	; 0x01
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	80 31       	cpi	r24, 0x10	; 16
     91c:	88 f3       	brcs	.-30     	; 0x900 <reset_count+0x16>
	{
		count[cnt_i] = 0x00;
	}
}
     91e:	00 00       	nop
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <state_copy>:

void state_copy(u8* dst, u8* src)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	00 d0       	rcall	.+0      	; 0x932 <state_copy+0x6>
     932:	00 d0       	rcall	.+0      	; 0x934 <state_copy+0x8>
     934:	1f 92       	push	r1
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	9b 83       	std	Y+3, r25	; 0x03
     93c:	8a 83       	std	Y+2, r24	; 0x02
     93e:	7d 83       	std	Y+5, r23	; 0x05
     940:	6c 83       	std	Y+4, r22	; 0x04
	u8 cnt_i = 0;
     942:	19 82       	std	Y+1, r1	; 0x01
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     944:	19 82       	std	Y+1, r1	; 0x01
     946:	15 c0       	rjmp	.+42     	; 0x972 <state_copy+0x46>
	{
		dst[cnt_i] = src[cnt_i];
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	3b 81       	ldd	r19, Y+3	; 0x03
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	29 81       	ldd	r18, Y+1	; 0x01
     958:	22 2f       	mov	r18, r18
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	4c 81       	ldd	r20, Y+4	; 0x04
     95e:	5d 81       	ldd	r21, Y+5	; 0x05
     960:	24 0f       	add	r18, r20
     962:	35 1f       	adc	r19, r21
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
}

void state_copy(u8* dst, u8* src)
{
	u8 cnt_i = 0;
	for(cnt_i = 0 ; cnt_i < 16 ; cnt_i ++)
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	80 31       	cpi	r24, 0x10	; 16
     976:	40 f3       	brcs	.-48     	; 0x948 <state_copy+0x1c>
	{
		dst[cnt_i] = src[cnt_i];
	}
}
     978:	00 00       	nop
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <Count_Add_for_LUT>:
void Count_Add_for_LUT(u8* count, u8* cnt_k)
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	62 97       	sbiw	r28, 0x12	; 18
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	98 8b       	std	Y+16, r25	; 0x10
     9a0:	8f 87       	std	Y+15, r24	; 0x0f
     9a2:	7a 8b       	std	Y+18, r23	; 0x12
     9a4:	69 8b       	std	Y+17, r22	; 0x11
	
	u8 carry = 0;           //맨처음 Carry 값은 0
     9a6:	19 82       	std	Y+1, r1	; 0x01
	u8 out[4] = { 0x00 }; // 최종배열
     9a8:	1e 82       	std	Y+6, r1	; 0x06
     9aa:	1f 82       	std	Y+7, r1	; 0x07
     9ac:	18 86       	std	Y+8, r1	; 0x08
     9ae:	19 86       	std	Y+9, r1	; 0x09
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
     9b0:	1a 86       	std	Y+10, r1	; 0x0a
     9b2:	1b 86       	std	Y+11, r1	; 0x0b
     9b4:	1c 86       	std	Y+12, r1	; 0x0c
     9b6:	1d 86       	std	Y+13, r1	; 0x0d

	if (*cnt_k == 0)
     9b8:	89 89       	ldd	r24, Y+17	; 0x11
     9ba:	9a 89       	ldd	r25, Y+18	; 0x12
     9bc:	fc 01       	movw	r30, r24
     9be:	80 81       	ld	r24, Z
     9c0:	88 23       	and	r24, r24
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <Count_Add_for_LUT+0x3c>
     9c4:	4c c0       	rjmp	.+152    	; 0xa5e <Count_Add_for_LUT+0xd4>
	{
		one[3] = 0x01;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	8d 87       	std	Y+13, r24	; 0x0d
		int8_t i = 3;
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	8a 83       	std	Y+2, r24	; 0x02
		while(i >=0)
     9ce:	43 c0       	rjmp	.+134    	; 0xa56 <Count_Add_for_LUT+0xcc>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	08 2e       	mov	r0, r24
     9d4:	00 0c       	add	r0, r0
     9d6:	99 0b       	sbc	r25, r25
     9d8:	2a 81       	ldd	r18, Y+2	; 0x02
     9da:	02 2e       	mov	r0, r18
     9dc:	00 0c       	add	r0, r0
     9de:	33 0b       	sbc	r19, r19
     9e0:	4f 85       	ldd	r20, Y+15	; 0x0f
     9e2:	58 89       	ldd	r21, Y+16	; 0x10
     9e4:	24 0f       	add	r18, r20
     9e6:	35 1f       	adc	r19, r21
     9e8:	f9 01       	movw	r30, r18
     9ea:	60 81       	ld	r22, Z
     9ec:	2a 81       	ldd	r18, Y+2	; 0x02
     9ee:	02 2e       	mov	r0, r18
     9f0:	00 0c       	add	r0, r0
     9f2:	33 0b       	sbc	r19, r19
     9f4:	ae 01       	movw	r20, r28
     9f6:	46 5f       	subi	r20, 0xF6	; 246
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	24 0f       	add	r18, r20
     9fc:	35 1f       	adc	r19, r21
     9fe:	f9 01       	movw	r30, r18
     a00:	20 81       	ld	r18, Z
     a02:	36 2f       	mov	r19, r22
     a04:	32 0f       	add	r19, r18
     a06:	29 81       	ldd	r18, Y+1	; 0x01
     a08:	43 2f       	mov	r20, r19
     a0a:	42 0f       	add	r20, r18
     a0c:	9e 01       	movw	r18, r28
     a0e:	2a 5f       	subi	r18, 0xFA	; 250
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	fc 01       	movw	r30, r24
     a18:	40 83       	st	Z, r20
			if (out[i] < count[i])
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	08 2e       	mov	r0, r24
     a1e:	00 0c       	add	r0, r0
     a20:	99 0b       	sbc	r25, r25
     a22:	9e 01       	movw	r18, r28
     a24:	2a 5f       	subi	r18, 0xFA	; 250
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	82 0f       	add	r24, r18
     a2a:	93 1f       	adc	r25, r19
     a2c:	fc 01       	movw	r30, r24
     a2e:	40 81       	ld	r20, Z
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	08 2e       	mov	r0, r24
     a34:	00 0c       	add	r0, r0
     a36:	99 0b       	sbc	r25, r25
     a38:	2f 85       	ldd	r18, Y+15	; 0x0f
     a3a:	38 89       	ldd	r19, Y+16	; 0x10
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	48 17       	cp	r20, r24
     a46:	18 f4       	brcc	.+6      	; 0xa4e <Count_Add_for_LUT+0xc4>
			carry = 1;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <Count_Add_for_LUT+0xc6>
			else
			{
				carry = 0;
     a4e:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	81 50       	subi	r24, 0x01	; 1
     a54:	8a 83       	std	Y+2, r24	; 0x02

	if (*cnt_k == 0)
	{
		one[3] = 0x01;
		int8_t i = 3;
		while(i >=0)
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	88 23       	and	r24, r24
     a5a:	0c f0       	brlt	.+2      	; 0xa5e <Count_Add_for_LUT+0xd4>
     a5c:	b9 cf       	rjmp	.-142    	; 0x9d0 <Count_Add_for_LUT+0x46>
			}
			i--;
		}
		
	}
	if (*cnt_k == 1)
     a5e:	89 89       	ldd	r24, Y+17	; 0x11
     a60:	9a 89       	ldd	r25, Y+18	; 0x12
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	09 f0       	breq	.+2      	; 0xa6c <Count_Add_for_LUT+0xe2>
     a6a:	4c c0       	rjmp	.+152    	; 0xb04 <Count_Add_for_LUT+0x17a>
	{
		one[2] = 0x01;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	8c 87       	std	Y+12, r24	; 0x0c
		int8_t i = 2;
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	8b 83       	std	Y+3, r24	; 0x03
		while(i >=0)
     a74:	43 c0       	rjmp	.+134    	; 0xafc <Count_Add_for_LUT+0x172>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	08 2e       	mov	r0, r24
     a7a:	00 0c       	add	r0, r0
     a7c:	99 0b       	sbc	r25, r25
     a7e:	2b 81       	ldd	r18, Y+3	; 0x03
     a80:	02 2e       	mov	r0, r18
     a82:	00 0c       	add	r0, r0
     a84:	33 0b       	sbc	r19, r19
     a86:	4f 85       	ldd	r20, Y+15	; 0x0f
     a88:	58 89       	ldd	r21, Y+16	; 0x10
     a8a:	24 0f       	add	r18, r20
     a8c:	35 1f       	adc	r19, r21
     a8e:	f9 01       	movw	r30, r18
     a90:	60 81       	ld	r22, Z
     a92:	2b 81       	ldd	r18, Y+3	; 0x03
     a94:	02 2e       	mov	r0, r18
     a96:	00 0c       	add	r0, r0
     a98:	33 0b       	sbc	r19, r19
     a9a:	ae 01       	movw	r20, r28
     a9c:	46 5f       	subi	r20, 0xF6	; 246
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	24 0f       	add	r18, r20
     aa2:	35 1f       	adc	r19, r21
     aa4:	f9 01       	movw	r30, r18
     aa6:	20 81       	ld	r18, Z
     aa8:	36 2f       	mov	r19, r22
     aaa:	32 0f       	add	r19, r18
     aac:	29 81       	ldd	r18, Y+1	; 0x01
     aae:	43 2f       	mov	r20, r19
     ab0:	42 0f       	add	r20, r18
     ab2:	9e 01       	movw	r18, r28
     ab4:	2a 5f       	subi	r18, 0xFA	; 250
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	82 0f       	add	r24, r18
     aba:	93 1f       	adc	r25, r19
     abc:	fc 01       	movw	r30, r24
     abe:	40 83       	st	Z, r20
			if (out[i] < count[i])
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	08 2e       	mov	r0, r24
     ac4:	00 0c       	add	r0, r0
     ac6:	99 0b       	sbc	r25, r25
     ac8:	9e 01       	movw	r18, r28
     aca:	2a 5f       	subi	r18, 0xFA	; 250
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	82 0f       	add	r24, r18
     ad0:	93 1f       	adc	r25, r19
     ad2:	fc 01       	movw	r30, r24
     ad4:	40 81       	ld	r20, Z
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	08 2e       	mov	r0, r24
     ada:	00 0c       	add	r0, r0
     adc:	99 0b       	sbc	r25, r25
     ade:	2f 85       	ldd	r18, Y+15	; 0x0f
     ae0:	38 89       	ldd	r19, Y+16	; 0x10
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	fc 01       	movw	r30, r24
     ae8:	80 81       	ld	r24, Z
     aea:	48 17       	cp	r20, r24
     aec:	18 f4       	brcc	.+6      	; 0xaf4 <Count_Add_for_LUT+0x16a>
			carry = 1;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <Count_Add_for_LUT+0x16c>
			else
			{
				carry = 0;
     af4:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	81 50       	subi	r24, 0x01	; 1
     afa:	8b 83       	std	Y+3, r24	; 0x03
	}
	if (*cnt_k == 1)
	{
		one[2] = 0x01;
		int8_t i = 2;
		while(i >=0)
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	88 23       	and	r24, r24
     b00:	0c f0       	brlt	.+2      	; 0xb04 <Count_Add_for_LUT+0x17a>
     b02:	b9 cf       	rjmp	.-142    	; 0xa76 <Count_Add_for_LUT+0xec>
				carry = 0;
			}
			i--;
		}
	}
	if (*cnt_k == 2)
     b04:	89 89       	ldd	r24, Y+17	; 0x11
     b06:	9a 89       	ldd	r25, Y+18	; 0x12
     b08:	fc 01       	movw	r30, r24
     b0a:	80 81       	ld	r24, Z
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	09 f0       	breq	.+2      	; 0xb12 <Count_Add_for_LUT+0x188>
     b10:	4c c0       	rjmp	.+152    	; 0xbaa <Count_Add_for_LUT+0x220>
	{
		one[1] = 0x01;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	8b 87       	std	Y+11, r24	; 0x0b
		int8_t i = 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	8c 83       	std	Y+4, r24	; 0x04
		while(i >=0)
     b1a:	43 c0       	rjmp	.+134    	; 0xba2 <Count_Add_for_LUT+0x218>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     b1c:	8c 81       	ldd	r24, Y+4	; 0x04
     b1e:	08 2e       	mov	r0, r24
     b20:	00 0c       	add	r0, r0
     b22:	99 0b       	sbc	r25, r25
     b24:	2c 81       	ldd	r18, Y+4	; 0x04
     b26:	02 2e       	mov	r0, r18
     b28:	00 0c       	add	r0, r0
     b2a:	33 0b       	sbc	r19, r19
     b2c:	4f 85       	ldd	r20, Y+15	; 0x0f
     b2e:	58 89       	ldd	r21, Y+16	; 0x10
     b30:	24 0f       	add	r18, r20
     b32:	35 1f       	adc	r19, r21
     b34:	f9 01       	movw	r30, r18
     b36:	60 81       	ld	r22, Z
     b38:	2c 81       	ldd	r18, Y+4	; 0x04
     b3a:	02 2e       	mov	r0, r18
     b3c:	00 0c       	add	r0, r0
     b3e:	33 0b       	sbc	r19, r19
     b40:	ae 01       	movw	r20, r28
     b42:	46 5f       	subi	r20, 0xF6	; 246
     b44:	5f 4f       	sbci	r21, 0xFF	; 255
     b46:	24 0f       	add	r18, r20
     b48:	35 1f       	adc	r19, r21
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	36 2f       	mov	r19, r22
     b50:	32 0f       	add	r19, r18
     b52:	29 81       	ldd	r18, Y+1	; 0x01
     b54:	43 2f       	mov	r20, r19
     b56:	42 0f       	add	r20, r18
     b58:	9e 01       	movw	r18, r28
     b5a:	2a 5f       	subi	r18, 0xFA	; 250
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19
     b62:	fc 01       	movw	r30, r24
     b64:	40 83       	st	Z, r20
			if (out[i] < count[i])
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	08 2e       	mov	r0, r24
     b6a:	00 0c       	add	r0, r0
     b6c:	99 0b       	sbc	r25, r25
     b6e:	9e 01       	movw	r18, r28
     b70:	2a 5f       	subi	r18, 0xFA	; 250
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	82 0f       	add	r24, r18
     b76:	93 1f       	adc	r25, r19
     b78:	fc 01       	movw	r30, r24
     b7a:	40 81       	ld	r20, Z
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	08 2e       	mov	r0, r24
     b80:	00 0c       	add	r0, r0
     b82:	99 0b       	sbc	r25, r25
     b84:	2f 85       	ldd	r18, Y+15	; 0x0f
     b86:	38 89       	ldd	r19, Y+16	; 0x10
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	fc 01       	movw	r30, r24
     b8e:	80 81       	ld	r24, Z
     b90:	48 17       	cp	r20, r24
     b92:	18 f4       	brcc	.+6      	; 0xb9a <Count_Add_for_LUT+0x210>
			carry = 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <Count_Add_for_LUT+0x212>
			else
			{
				carry = 0;
     b9a:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	81 50       	subi	r24, 0x01	; 1
     ba0:	8c 83       	std	Y+4, r24	; 0x04
	}
	if (*cnt_k == 2)
	{
		one[1] = 0x01;
		int8_t i = 1;
		while(i >=0)
     ba2:	8c 81       	ldd	r24, Y+4	; 0x04
     ba4:	88 23       	and	r24, r24
     ba6:	0c f0       	brlt	.+2      	; 0xbaa <Count_Add_for_LUT+0x220>
     ba8:	b9 cf       	rjmp	.-142    	; 0xb1c <Count_Add_for_LUT+0x192>
				carry = 0;
			}
			i--;
		}
	}
	if (*cnt_k == 3)
     baa:	89 89       	ldd	r24, Y+17	; 0x11
     bac:	9a 89       	ldd	r25, Y+18	; 0x12
     bae:	fc 01       	movw	r30, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <Count_Add_for_LUT+0x22e>
     bb6:	4b c0       	rjmp	.+150    	; 0xc4e <Count_Add_for_LUT+0x2c4>
	{
		one[0] = 0x01;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	8a 87       	std	Y+10, r24	; 0x0a
		int8_t i = 0;
     bbc:	1d 82       	std	Y+5, r1	; 0x05
		while(i >=0)
     bbe:	43 c0       	rjmp	.+134    	; 0xc46 <Count_Add_for_LUT+0x2bc>
		{
			out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	08 2e       	mov	r0, r24
     bc4:	00 0c       	add	r0, r0
     bc6:	99 0b       	sbc	r25, r25
     bc8:	2d 81       	ldd	r18, Y+5	; 0x05
     bca:	02 2e       	mov	r0, r18
     bcc:	00 0c       	add	r0, r0
     bce:	33 0b       	sbc	r19, r19
     bd0:	4f 85       	ldd	r20, Y+15	; 0x0f
     bd2:	58 89       	ldd	r21, Y+16	; 0x10
     bd4:	24 0f       	add	r18, r20
     bd6:	35 1f       	adc	r19, r21
     bd8:	f9 01       	movw	r30, r18
     bda:	60 81       	ld	r22, Z
     bdc:	2d 81       	ldd	r18, Y+5	; 0x05
     bde:	02 2e       	mov	r0, r18
     be0:	00 0c       	add	r0, r0
     be2:	33 0b       	sbc	r19, r19
     be4:	ae 01       	movw	r20, r28
     be6:	46 5f       	subi	r20, 0xF6	; 246
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
     bea:	24 0f       	add	r18, r20
     bec:	35 1f       	adc	r19, r21
     bee:	f9 01       	movw	r30, r18
     bf0:	20 81       	ld	r18, Z
     bf2:	36 2f       	mov	r19, r22
     bf4:	32 0f       	add	r19, r18
     bf6:	29 81       	ldd	r18, Y+1	; 0x01
     bf8:	43 2f       	mov	r20, r19
     bfa:	42 0f       	add	r20, r18
     bfc:	9e 01       	movw	r18, r28
     bfe:	2a 5f       	subi	r18, 0xFA	; 250
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	82 0f       	add	r24, r18
     c04:	93 1f       	adc	r25, r19
     c06:	fc 01       	movw	r30, r24
     c08:	40 83       	st	Z, r20
			if (out[i] < count[i])
     c0a:	8d 81       	ldd	r24, Y+5	; 0x05
     c0c:	08 2e       	mov	r0, r24
     c0e:	00 0c       	add	r0, r0
     c10:	99 0b       	sbc	r25, r25
     c12:	9e 01       	movw	r18, r28
     c14:	2a 5f       	subi	r18, 0xFA	; 250
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
     c1c:	fc 01       	movw	r30, r24
     c1e:	40 81       	ld	r20, Z
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	08 2e       	mov	r0, r24
     c24:	00 0c       	add	r0, r0
     c26:	99 0b       	sbc	r25, r25
     c28:	2f 85       	ldd	r18, Y+15	; 0x0f
     c2a:	38 89       	ldd	r19, Y+16	; 0x10
     c2c:	82 0f       	add	r24, r18
     c2e:	93 1f       	adc	r25, r19
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	48 17       	cp	r20, r24
     c36:	18 f4       	brcc	.+6      	; 0xc3e <Count_Add_for_LUT+0x2b4>
			carry = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <Count_Add_for_LUT+0x2b6>
			else
			{
				carry = 0;
     c3e:	19 82       	std	Y+1, r1	; 0x01
			}
			i--;
     c40:	8d 81       	ldd	r24, Y+5	; 0x05
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (*cnt_k == 3)
	{
		one[0] = 0x01;
		int8_t i = 0;
		while(i >=0)
     c46:	8d 81       	ldd	r24, Y+5	; 0x05
     c48:	88 23       	and	r24, r24
     c4a:	0c f0       	brlt	.+2      	; 0xc4e <Count_Add_for_LUT+0x2c4>
     c4c:	b9 cf       	rjmp	.-142    	; 0xbc0 <Count_Add_for_LUT+0x236>
			}
			i--;
		}
	}

	for (volatile int8_t cnt_i = 0; cnt_i < 4; cnt_i++)
     c4e:	1e 86       	std	Y+14, r1	; 0x0e
     c50:	18 c0       	rjmp	.+48     	; 0xc82 <Count_Add_for_LUT+0x2f8>
	{
		count[cnt_i] = out[cnt_i];
     c52:	8e 85       	ldd	r24, Y+14	; 0x0e
     c54:	08 2e       	mov	r0, r24
     c56:	00 0c       	add	r0, r0
     c58:	99 0b       	sbc	r25, r25
     c5a:	2f 85       	ldd	r18, Y+15	; 0x0f
     c5c:	38 89       	ldd	r19, Y+16	; 0x10
     c5e:	82 0f       	add	r24, r18
     c60:	93 1f       	adc	r25, r19
     c62:	2e 85       	ldd	r18, Y+14	; 0x0e
     c64:	02 2e       	mov	r0, r18
     c66:	00 0c       	add	r0, r0
     c68:	33 0b       	sbc	r19, r19
     c6a:	ae 01       	movw	r20, r28
     c6c:	4a 5f       	subi	r20, 0xFA	; 250
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	24 0f       	add	r18, r20
     c72:	35 1f       	adc	r19, r21
     c74:	f9 01       	movw	r30, r18
     c76:	20 81       	ld	r18, Z
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
			}
			i--;
		}
	}

	for (volatile int8_t cnt_i = 0; cnt_i < 4; cnt_i++)
     c7c:	8e 85       	ldd	r24, Y+14	; 0x0e
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	8e 87       	std	Y+14, r24	; 0x0e
     c82:	8e 85       	ldd	r24, Y+14	; 0x0e
     c84:	84 30       	cpi	r24, 0x04	; 4
     c86:	2c f3       	brlt	.-54     	; 0xc52 <Count_Add_for_LUT+0x2c8>
	{
		count[cnt_i] = out[cnt_i];
	}
	
}
     c88:	00 00       	nop
     c8a:	62 96       	adiw	r28, 0x12	; 18
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <Count_Add_for_FACE_LIGHT>:
void Count_Add_for_FACE_LIGHT(u8* count)
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	2d 97       	sbiw	r28, 0x0d	; 13
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	9d 87       	std	Y+13, r25	; 0x0d
     cb2:	8c 87       	std	Y+12, r24	; 0x0c
	u8 carry = 0;           //맨처음 Carry 값은 0
     cb4:	19 82       	std	Y+1, r1	; 0x01
	u8 out[4] = { 0x00 }; // 최종배열
     cb6:	1c 82       	std	Y+4, r1	; 0x04
     cb8:	1d 82       	std	Y+5, r1	; 0x05
     cba:	1e 82       	std	Y+6, r1	; 0x06
     cbc:	1f 82       	std	Y+7, r1	; 0x07
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
     cbe:	18 86       	std	Y+8, r1	; 0x08
     cc0:	19 86       	std	Y+9, r1	; 0x09
     cc2:	1a 86       	std	Y+10, r1	; 0x0a
     cc4:	1b 86       	std	Y+11, r1	; 0x0b
	one[3] = 0x01;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	8b 87       	std	Y+11, r24	; 0x0b

	int8_t i = 3,cnt_i = 0;
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	8a 83       	std	Y+2, r24	; 0x02
     cce:	1b 82       	std	Y+3, r1	; 0x03
	while(i >=0)
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <Count_Add_for_FACE_LIGHT+0xbc>
	{
		out[i] = count[i] + one[i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	08 2e       	mov	r0, r24
     cd6:	00 0c       	add	r0, r0
     cd8:	99 0b       	sbc	r25, r25
     cda:	2a 81       	ldd	r18, Y+2	; 0x02
     cdc:	02 2e       	mov	r0, r18
     cde:	00 0c       	add	r0, r0
     ce0:	33 0b       	sbc	r19, r19
     ce2:	4c 85       	ldd	r20, Y+12	; 0x0c
     ce4:	5d 85       	ldd	r21, Y+13	; 0x0d
     ce6:	24 0f       	add	r18, r20
     ce8:	35 1f       	adc	r19, r21
     cea:	f9 01       	movw	r30, r18
     cec:	60 81       	ld	r22, Z
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	02 2e       	mov	r0, r18
     cf2:	00 0c       	add	r0, r0
     cf4:	33 0b       	sbc	r19, r19
     cf6:	ae 01       	movw	r20, r28
     cf8:	48 5f       	subi	r20, 0xF8	; 248
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	24 0f       	add	r18, r20
     cfe:	35 1f       	adc	r19, r21
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	36 2f       	mov	r19, r22
     d06:	32 0f       	add	r19, r18
     d08:	29 81       	ldd	r18, Y+1	; 0x01
     d0a:	43 2f       	mov	r20, r19
     d0c:	42 0f       	add	r20, r18
     d0e:	9e 01       	movw	r18, r28
     d10:	2c 5f       	subi	r18, 0xFC	; 252
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	82 0f       	add	r24, r18
     d16:	93 1f       	adc	r25, r19
     d18:	fc 01       	movw	r30, r24
     d1a:	40 83       	st	Z, r20
		if (out[i] < count[i])
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	08 2e       	mov	r0, r24
     d20:	00 0c       	add	r0, r0
     d22:	99 0b       	sbc	r25, r25
     d24:	9e 01       	movw	r18, r28
     d26:	2c 5f       	subi	r18, 0xFC	; 252
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	82 0f       	add	r24, r18
     d2c:	93 1f       	adc	r25, r19
     d2e:	fc 01       	movw	r30, r24
     d30:	40 81       	ld	r20, Z
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	08 2e       	mov	r0, r24
     d36:	00 0c       	add	r0, r0
     d38:	99 0b       	sbc	r25, r25
     d3a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d3c:	3d 85       	ldd	r19, Y+13	; 0x0d
     d3e:	82 0f       	add	r24, r18
     d40:	93 1f       	adc	r25, r19
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	48 17       	cp	r20, r24
     d48:	18 f4       	brcc	.+6      	; 0xd50 <Count_Add_for_FACE_LIGHT+0xb4>
		carry = 1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <Count_Add_for_FACE_LIGHT+0xb6>
		else
		{
			carry = 0;
     d50:	19 82       	std	Y+1, r1	; 0x01
		}
		i--;
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	81 50       	subi	r24, 0x01	; 1
     d56:	8a 83       	std	Y+2, r24	; 0x02
	u8 out[4] = { 0x00 }; // 최종배열
	u8 one[4] = { 0x00 }; // 0x01을 의미하는 배열
	one[3] = 0x01;

	int8_t i = 3,cnt_i = 0;
	while(i >=0)
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	88 23       	and	r24, r24
     d5c:	0c f0       	brlt	.+2      	; 0xd60 <Count_Add_for_FACE_LIGHT+0xc4>
     d5e:	b9 cf       	rjmp	.-142    	; 0xcd2 <Count_Add_for_FACE_LIGHT+0x36>
		{
			carry = 0;
		}
		i--;
	}
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
     d60:	1b 82       	std	Y+3, r1	; 0x03
     d62:	18 c0       	rjmp	.+48     	; 0xd94 <Count_Add_for_FACE_LIGHT+0xf8>
	{
		count[cnt_i] = out[cnt_i];
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	08 2e       	mov	r0, r24
     d68:	00 0c       	add	r0, r0
     d6a:	99 0b       	sbc	r25, r25
     d6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d6e:	3d 85       	ldd	r19, Y+13	; 0x0d
     d70:	82 0f       	add	r24, r18
     d72:	93 1f       	adc	r25, r19
     d74:	2b 81       	ldd	r18, Y+3	; 0x03
     d76:	02 2e       	mov	r0, r18
     d78:	00 0c       	add	r0, r0
     d7a:	33 0b       	sbc	r19, r19
     d7c:	ae 01       	movw	r20, r28
     d7e:	4c 5f       	subi	r20, 0xFC	; 252
     d80:	5f 4f       	sbci	r21, 0xFF	; 255
     d82:	24 0f       	add	r18, r20
     d84:	35 1f       	adc	r19, r21
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
		{
			carry = 0;
		}
		i--;
	}
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	2c f3       	brlt	.-54     	; 0xd64 <Count_Add_for_FACE_LIGHT+0xc8>
	{
		count[cnt_i] = out[cnt_i];
	}
}
     d9a:	00 00       	nop
     d9c:	2d 96       	adiw	r28, 0x0d	; 13
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <Make_LUT_Face_Light>:
void Make_LUT_Face_Light(u8 LUT_FL[4][4][256],u8* userkey,u8* count,u8* sbox, u8* rcon)//! LUK Table of FACE_Light
{
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	e0 97       	sbiw	r28, 0x30	; 48
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	98 a7       	std	Y+40, r25	; 0x28
     dc8:	8f a3       	std	Y+39, r24	; 0x27
     dca:	7a a7       	std	Y+42, r23	; 0x2a
     dcc:	69 a7       	std	Y+41, r22	; 0x29
     dce:	5c a7       	std	Y+44, r21	; 0x2c
     dd0:	4b a7       	std	Y+43, r20	; 0x2b
     dd2:	3e a7       	std	Y+46, r19	; 0x2e
     dd4:	2d a7       	std	Y+45, r18	; 0x2d
     dd6:	18 ab       	std	Y+48, r17	; 0x30
     dd8:	0f a7       	std	Y+47, r16	; 0x2f
	u8 state[16] = { 0x00 };
     dda:	20 e1       	ldi	r18, 0x10	; 16
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	fc 01       	movw	r30, r24
     de2:	32 2f       	mov	r19, r18
     de4:	11 92       	st	Z+, r1
     de6:	3a 95       	dec	r19
     de8:	e9 f7       	brne	.-6      	; 0xde4 <Make_LUT_Face_Light+0x36>
	u8 roundkey[16] = {0x00};
     dea:	20 e1       	ldi	r18, 0x10	; 16
     dec:	ce 01       	movw	r24, r28
     dee:	41 96       	adiw	r24, 0x11	; 17
     df0:	fc 01       	movw	r30, r24
     df2:	32 2f       	mov	r19, r18
     df4:	11 92       	st	Z+, r1
     df6:	3a 95       	dec	r19
     df8:	e9 f7       	brne	.-6      	; 0xdf4 <Make_LUT_Face_Light+0x46>
	volatile u8 round = 0;
     dfa:	19 a2       	std	Y+33, r1	; 0x21
	volatile u8 cnt_j = 0;
     dfc:	1a a2       	std	Y+34, r1	; 0x22


	reset_count(count);
     dfe:	8b a5       	ldd	r24, Y+43	; 0x2b
     e00:	9c a5       	ldd	r25, Y+44	; 0x2c
     e02:	73 dd       	rcall	.-1306   	; 0x8ea <reset_count>
		state_copy(state, count);
     e04:	8b a5       	ldd	r24, Y+43	; 0x2b
     e06:	9c a5       	ldd	r25, Y+44	; 0x2c
     e08:	bc 01       	movw	r22, r24
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	8e dd       	rcall	.-1252   	; 0x92c <state_copy>


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
     e10:	1c a2       	std	Y+36, r1	; 0x24
     e12:	1b a2       	std	Y+35, r1	; 0x23
     e14:	ba c0       	rjmp	.+372    	; 0xf8a <Make_LUT_Face_Light+0x1dc>
	{
		for (volatile int16_t cnt_i = 0; cnt_i < BLOCKSIZE ; cnt_i++)                      //! check BLOCKSIZE 블록size가 256넘어가면 그냥 256이라 써주면된다.
     e16:	1e a2       	std	Y+38, r1	; 0x26
     e18:	1d a2       	std	Y+37, r1	; 0x25
     e1a:	a6 c0       	rjmp	.+332    	; 0xf68 <Make_LUT_Face_Light+0x1ba>
		{
			
			round = 0x00;
     e1c:	19 a2       	std	Y+33, r1	; 0x21
			state_copy(roundkey, userkey);
     e1e:	29 a5       	ldd	r18, Y+41	; 0x29
     e20:	3a a5       	ldd	r19, Y+42	; 0x2a
     e22:	ce 01       	movw	r24, r28
     e24:	41 96       	adiw	r24, 0x11	; 17
     e26:	b9 01       	movw	r22, r18
     e28:	81 dd       	rcall	.-1278   	; 0x92c <state_copy>
			AddRoundKey(state, roundkey);
     e2a:	ce 01       	movw	r24, r28
     e2c:	41 96       	adiw	r24, 0x11	; 17
     e2e:	bc 01       	movw	r22, r24
     e30:	ce 01       	movw	r24, r28
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	10 dc       	rcall	.-2016   	; 0x656 <AddRoundKey>
			keyScheduling(roundkey,rcon, sbox,&round);
     e36:	9e 01       	movw	r18, r28
     e38:	2f 5d       	subi	r18, 0xDF	; 223
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	4d a5       	ldd	r20, Y+45	; 0x2d
     e3e:	5e a5       	ldd	r21, Y+46	; 0x2e
     e40:	6f a5       	ldd	r22, Y+47	; 0x2f
     e42:	78 a9       	ldd	r23, Y+48	; 0x30
     e44:	ce 01       	movw	r24, r28
     e46:	41 96       	adiw	r24, 0x11	; 17
     e48:	40 dc       	rcall	.-1920   	; 0x6ca <keyScheduling>
			

			SubByte(state,sbox);
     e4a:	8d a5       	ldd	r24, Y+45	; 0x2d
     e4c:	9e a5       	ldd	r25, Y+46	; 0x2e
     e4e:	bc 01       	movw	r22, r24
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
			ShiftRow(state);
     e54:	90 d9       	rcall	.-3296   	; 0x176 <SubByte>
     e56:	ce 01       	movw	r24, r28
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	c3 d9       	rcall	.-3194   	; 0x1e2 <ShiftRow>
			MixColumns(state);
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	44 da       	rcall	.-2936   	; 0x2ea <MixColumns>
			AddRoundKey(state,roundkey);
     e62:	ce 01       	movw	r24, r28
     e64:	41 96       	adiw	r24, 0x11	; 17
     e66:	bc 01       	movw	r22, r24
     e68:	ce 01       	movw	r24, r28
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	f4 db       	rcall	.-2072   	; 0x656 <AddRoundKey>
     e6e:	9e 01       	movw	r18, r28
			keyScheduling(roundkey,rcon, sbox,&round);
     e70:	2f 5d       	subi	r18, 0xDF	; 223
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	4d a5       	ldd	r20, Y+45	; 0x2d
     e76:	5e a5       	ldd	r21, Y+46	; 0x2e
     e78:	6f a5       	ldd	r22, Y+47	; 0x2f
     e7a:	78 a9       	ldd	r23, Y+48	; 0x30
     e7c:	ce 01       	movw	r24, r28
     e7e:	41 96       	adiw	r24, 0x11	; 17
     e80:	24 dc       	rcall	.-1976   	; 0x6ca <keyScheduling>
		
			SubByte(state,sbox);
     e82:	8d a5       	ldd	r24, Y+45	; 0x2d
     e84:	9e a5       	ldd	r25, Y+46	; 0x2e
     e86:	bc 01       	movw	r22, r24
     e88:	ce 01       	movw	r24, r28
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	74 d9       	rcall	.-3352   	; 0x176 <SubByte>
     e8e:	1a a2       	std	Y+34, r1	; 0x22
			for (cnt_j = 0; cnt_j < 4; cnt_j++)
     e90:	55 c0       	rjmp	.+170    	; 0xf3c <Make_LUT_Face_Light+0x18e>
     e92:	8b a1       	ldd	r24, Y+35	; 0x23
			{	
				if (cnt_k != 3)
     e94:	9c a1       	ldd	r25, Y+36	; 0x24
     e96:	03 97       	sbiw	r24, 0x03	; 3
     e98:	69 f1       	breq	.+90     	; 0xef4 <Make_LUT_Face_Light+0x146>
     e9a:	8b a1       	ldd	r24, Y+35	; 0x23
					LUT_FL[cnt_k][cnt_j][cnt_i] = state[((cnt_k + 1) * 4) + cnt_j];
     e9c:	9c a1       	ldd	r25, Y+36	; 0x24
     e9e:	98 2f       	mov	r25, r24
     ea0:	88 27       	eor	r24, r24
     ea2:	99 0f       	add	r25, r25
     ea4:	99 0f       	add	r25, r25
     ea6:	2f a1       	ldd	r18, Y+39	; 0x27
     ea8:	38 a5       	ldd	r19, Y+40	; 0x28
     eaa:	a9 01       	movw	r20, r18
     eac:	48 0f       	add	r20, r24
     eae:	59 1f       	adc	r21, r25
     eb0:	8a a1       	ldd	r24, Y+34	; 0x22
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8d a1       	ldd	r24, Y+37	; 0x25
     eb8:	9e a1       	ldd	r25, Y+38	; 0x26
     eba:	6b a1       	ldd	r22, Y+35	; 0x23
     ebc:	7c a1       	ldd	r23, Y+36	; 0x24
     ebe:	6f 5f       	subi	r22, 0xFF	; 255
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	fb 01       	movw	r30, r22
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	6a a1       	ldd	r22, Y+34	; 0x22
     ece:	66 2f       	mov	r22, r22
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	6e 0f       	add	r22, r30
     ed4:	7f 1f       	adc	r23, r31
     ed6:	fe 01       	movw	r30, r28
     ed8:	31 96       	adiw	r30, 0x01	; 1
     eda:	6e 0f       	add	r22, r30
     edc:	7f 1f       	adc	r23, r31
     ede:	fb 01       	movw	r30, r22
     ee0:	60 81       	ld	r22, Z
     ee2:	32 2f       	mov	r19, r18
     ee4:	22 27       	eor	r18, r18
     ee6:	24 0f       	add	r18, r20
     ee8:	35 1f       	adc	r19, r21
     eea:	82 0f       	add	r24, r18
     eec:	93 1f       	adc	r25, r19
     eee:	fc 01       	movw	r30, r24
     ef0:	60 83       	st	Z, r22
     ef2:	21 c0       	rjmp	.+66     	; 0xf36 <Make_LUT_Face_Light+0x188>
     ef4:	8b a1       	ldd	r24, Y+35	; 0x23
				else
				LUT_FL[cnt_k][cnt_j][cnt_i] = state[cnt_j];
     ef6:	9c a1       	ldd	r25, Y+36	; 0x24
     ef8:	98 2f       	mov	r25, r24
     efa:	88 27       	eor	r24, r24
     efc:	99 0f       	add	r25, r25
     efe:	99 0f       	add	r25, r25
     f00:	2f a1       	ldd	r18, Y+39	; 0x27
     f02:	38 a5       	ldd	r19, Y+40	; 0x28
     f04:	a9 01       	movw	r20, r18
     f06:	48 0f       	add	r20, r24
     f08:	59 1f       	adc	r21, r25
     f0a:	8a a1       	ldd	r24, Y+34	; 0x22
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8d a1       	ldd	r24, Y+37	; 0x25
     f12:	9e a1       	ldd	r25, Y+38	; 0x26
     f14:	6a a1       	ldd	r22, Y+34	; 0x22
     f16:	66 2f       	mov	r22, r22
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	fe 01       	movw	r30, r28
     f1c:	31 96       	adiw	r30, 0x01	; 1
     f1e:	6e 0f       	add	r22, r30
     f20:	7f 1f       	adc	r23, r31
     f22:	fb 01       	movw	r30, r22
     f24:	60 81       	ld	r22, Z
     f26:	32 2f       	mov	r19, r18
     f28:	22 27       	eor	r18, r18
     f2a:	24 0f       	add	r18, r20
     f2c:	35 1f       	adc	r19, r21
     f2e:	82 0f       	add	r24, r18
     f30:	93 1f       	adc	r25, r19
     f32:	fc 01       	movw	r30, r24
     f34:	60 83       	st	Z, r22
     f36:	8a a1       	ldd	r24, Y+34	; 0x22
			MixColumns(state);
			AddRoundKey(state,roundkey);
			keyScheduling(roundkey,rcon, sbox,&round);
		
			SubByte(state,sbox);
			for (cnt_j = 0; cnt_j < 4; cnt_j++)
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	8a a3       	std	Y+34, r24	; 0x22
     f3c:	8a a1       	ldd	r24, Y+34	; 0x22
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	08 f4       	brcc	.+2      	; 0xf44 <Make_LUT_Face_Light+0x196>
     f42:	a7 cf       	rjmp	.-178    	; 0xe92 <Make_LUT_Face_Light+0xe4>
					LUT_FL[cnt_k][cnt_j][cnt_i] = state[((cnt_k + 1) * 4) + cnt_j];
				else
				LUT_FL[cnt_k][cnt_j][cnt_i] = state[cnt_j];

			}
			Count_Add_for_LUT(count, &cnt_k);
     f44:	9e 01       	movw	r18, r28
     f46:	2d 5d       	subi	r18, 0xDD	; 221
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f4c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f4e:	b9 01       	movw	r22, r18
     f50:	1c dd       	rcall	.-1480   	; 0x98a <Count_Add_for_LUT>
			state_copy(state, count);
     f52:	8b a5       	ldd	r24, Y+43	; 0x2b
     f54:	9c a5       	ldd	r25, Y+44	; 0x2c
     f56:	bc 01       	movw	r22, r24
     f58:	ce 01       	movw	r24, r28
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	e7 dc       	rcall	.-1586   	; 0x92c <state_copy>
     f5e:	8d a1       	ldd	r24, Y+37	; 0x25
		state_copy(state, count);


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
	{
		for (volatile int16_t cnt_i = 0; cnt_i < BLOCKSIZE ; cnt_i++)                      //! check BLOCKSIZE 블록size가 256넘어가면 그냥 256이라 써주면된다.
     f60:	9e a1       	ldd	r25, Y+38	; 0x26
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	9e a3       	std	Y+38, r25	; 0x26
     f66:	8d a3       	std	Y+37, r24	; 0x25
     f68:	8d a1       	ldd	r24, Y+37	; 0x25
     f6a:	9e a1       	ldd	r25, Y+38	; 0x26
     f6c:	18 16       	cp	r1, r24
     f6e:	19 06       	cpc	r1, r25
     f70:	0c f0       	brlt	.+2      	; 0xf74 <Make_LUT_Face_Light+0x1c6>
			}
			Count_Add_for_LUT(count, &cnt_k);
			state_copy(state, count);

		}
		reset_count(state);
     f72:	54 cf       	rjmp	.-344    	; 0xe1c <Make_LUT_Face_Light+0x6e>
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	b8 dc       	rcall	.-1680   	; 0x8ea <reset_count>
		reset_count(count);
     f7a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f7c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f7e:	b5 dc       	rcall	.-1686   	; 0x8ea <reset_count>
     f80:	8b a1       	ldd	r24, Y+35	; 0x23

	reset_count(count);
		state_copy(state, count);


	for (volatile int16_t cnt_k = 0; cnt_k < 4; cnt_k++)
     f82:	9c a1       	ldd	r25, Y+36	; 0x24
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	9c a3       	std	Y+36, r25	; 0x24
     f88:	8b a3       	std	Y+35, r24	; 0x23
     f8a:	8b a1       	ldd	r24, Y+35	; 0x23
     f8c:	9c a1       	ldd	r25, Y+36	; 0x24
     f8e:	04 97       	sbiw	r24, 0x04	; 4
     f90:	0c f4       	brge	.+2      	; 0xf94 <Make_LUT_Face_Light+0x1e6>
     f92:	41 cf       	rjmp	.-382    	; 0xe16 <Make_LUT_Face_Light+0x68>
     f94:	00 00       	nop

		}
		reset_count(state);
		reset_count(count);
	}
}
     f96:	e0 96       	adiw	r28, 0x30	; 48
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	08 95       	ret

00000fac <AES_encrypt_FACE_Light>:
     fac:	ef 92       	push	r14

void AES_encrypt_FACE_Light(u8 *inp,u8 LUT_FL[4][4][256], u8 *out, u8 *usrkey,u8* sbox, u8* rcon)//AES encryption of FACE mode
{
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	ae 97       	sbiw	r28, 0x2e	; 46
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	9c a3       	std	Y+36, r25	; 0x24
     fca:	8b a3       	std	Y+35, r24	; 0x23
     fcc:	7e a3       	std	Y+38, r23	; 0x26
     fce:	6d a3       	std	Y+37, r22	; 0x25
     fd0:	58 a7       	std	Y+40, r21	; 0x28
     fd2:	4f a3       	std	Y+39, r20	; 0x27
     fd4:	3a a7       	std	Y+42, r19	; 0x2a
     fd6:	29 a7       	std	Y+41, r18	; 0x29
     fd8:	1c a7       	std	Y+44, r17	; 0x2c
     fda:	0b a7       	std	Y+43, r16	; 0x2b
     fdc:	fe a6       	std	Y+46, r15	; 0x2e
     fde:	ed a6       	std	Y+45, r14	; 0x2d
	u8 state[16] = {0x00};
     fe0:	20 e1       	ldi	r18, 0x10	; 16
     fe2:	ce 01       	movw	r24, r28
     fe4:	02 96       	adiw	r24, 0x02	; 2
     fe6:	fc 01       	movw	r30, r24
     fe8:	32 2f       	mov	r19, r18
     fea:	11 92       	st	Z+, r1
     fec:	3a 95       	dec	r19
     fee:	e9 f7       	brne	.-6      	; 0xfea <AES_encrypt_FACE_Light+0x3e>
	u8 cnt_i;
	u8 round = 0;
     ff0:	1a 8a       	std	Y+18, r1	; 0x12
	u8 roundkey[16] = {0x00};
     ff2:	20 e1       	ldi	r18, 0x10	; 16
     ff4:	ce 01       	movw	r24, r28
     ff6:	43 96       	adiw	r24, 0x13	; 19
     ff8:	fc 01       	movw	r30, r24
     ffa:	32 2f       	mov	r19, r18
     ffc:	11 92       	st	Z+, r1
     ffe:	3a 95       	dec	r19
    1000:	e9 f7       	brne	.-6      	; 0xffc <AES_encrypt_FACE_Light+0x50>

	for (cnt_i = 0; cnt_i < 4; cnt_i++)
    1002:	19 82       	std	Y+1, r1	; 0x01
    1004:	db c0       	rjmp	.+438    	; 0x11bc <__stack+0xbd>
	{
		state[cnt_i] = LUT_FL[3][cnt_i][inp[0]];
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	2d a1       	ldd	r18, Y+37	; 0x25
    100e:	3e a1       	ldd	r19, Y+38	; 0x26
    1010:	b9 01       	movw	r22, r18
    1012:	74 5f       	subi	r23, 0xF4	; 244
    1014:	29 81       	ldd	r18, Y+1	; 0x01
    1016:	42 2f       	mov	r20, r18
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	2b a1       	ldd	r18, Y+35	; 0x23
    101c:	3c a1       	ldd	r19, Y+36	; 0x24
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	22 2f       	mov	r18, r18
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	54 2f       	mov	r21, r20
    1028:	44 27       	eor	r20, r20
    102a:	46 0f       	add	r20, r22
    102c:	57 1f       	adc	r21, r23
    102e:	24 0f       	add	r18, r20
    1030:	35 1f       	adc	r19, r21
    1032:	f9 01       	movw	r30, r18
    1034:	40 81       	ld	r20, Z
    1036:	9e 01       	movw	r18, r28
    1038:	2e 5f       	subi	r18, 0xFE	; 254
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	fc 01       	movw	r30, r24
    1042:	40 83       	st	Z, r20
		state[cnt_i + 4] = LUT_FL[0][cnt_i][inp[3]];
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	04 96       	adiw	r24, 0x04	; 4
    104c:	29 81       	ldd	r18, Y+1	; 0x01
    104e:	42 2f       	mov	r20, r18
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	2b a1       	ldd	r18, Y+35	; 0x23
    1054:	3c a1       	ldd	r19, Y+36	; 0x24
    1056:	2d 5f       	subi	r18, 0xFD	; 253
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	f9 01       	movw	r30, r18
    105c:	20 81       	ld	r18, Z
    105e:	22 2f       	mov	r18, r18
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	6d a1       	ldd	r22, Y+37	; 0x25
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	54 2f       	mov	r21, r20
    1068:	44 27       	eor	r20, r20
    106a:	46 0f       	add	r20, r22
    106c:	57 1f       	adc	r21, r23
    106e:	24 0f       	add	r18, r20
    1070:	35 1f       	adc	r19, r21
    1072:	f9 01       	movw	r30, r18
    1074:	40 81       	ld	r20, Z
    1076:	9e 01       	movw	r18, r28
    1078:	2e 5f       	subi	r18, 0xFE	; 254
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	82 0f       	add	r24, r18
    107e:	93 1f       	adc	r25, r19
    1080:	fc 01       	movw	r30, r24
    1082:	40 83       	st	Z, r20
		state[cnt_i + 8] = LUT_FL[1][cnt_i][inp[2]];
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	08 96       	adiw	r24, 0x08	; 8
    108c:	2d a1       	ldd	r18, Y+37	; 0x25
    108e:	3e a1       	ldd	r19, Y+38	; 0x26
    1090:	b9 01       	movw	r22, r18
    1092:	7c 5f       	subi	r23, 0xFC	; 252
    1094:	29 81       	ldd	r18, Y+1	; 0x01
    1096:	42 2f       	mov	r20, r18
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	2b a1       	ldd	r18, Y+35	; 0x23
    109c:	3c a1       	ldd	r19, Y+36	; 0x24
    109e:	2e 5f       	subi	r18, 0xFE	; 254
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	f9 01       	movw	r30, r18
    10a4:	20 81       	ld	r18, Z
    10a6:	22 2f       	mov	r18, r18
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	54 2f       	mov	r21, r20
    10ac:	44 27       	eor	r20, r20
    10ae:	46 0f       	add	r20, r22
    10b0:	57 1f       	adc	r21, r23
    10b2:	24 0f       	add	r18, r20
    10b4:	35 1f       	adc	r19, r21
    10b6:	f9 01       	movw	r30, r18
    10b8:	40 81       	ld	r20, Z
    10ba:	9e 01       	movw	r18, r28
    10bc:	2e 5f       	subi	r18, 0xFE	; 254
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	82 0f       	add	r24, r18
    10c2:	93 1f       	adc	r25, r19
    10c4:	fc 01       	movw	r30, r24
    10c6:	40 83       	st	Z, r20
		state[cnt_i + 12] = LUT_FL[2][cnt_i][inp[1]];
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0c 96       	adiw	r24, 0x0c	; 12
    10d0:	2d a1       	ldd	r18, Y+37	; 0x25
    10d2:	3e a1       	ldd	r19, Y+38	; 0x26
    10d4:	b9 01       	movw	r22, r18
    10d6:	78 5f       	subi	r23, 0xF8	; 248
    10d8:	29 81       	ldd	r18, Y+1	; 0x01
    10da:	42 2f       	mov	r20, r18
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	2b a1       	ldd	r18, Y+35	; 0x23
    10e0:	3c a1       	ldd	r19, Y+36	; 0x24
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	22 2f       	mov	r18, r18
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	54 2f       	mov	r21, r20
    10f0:	44 27       	eor	r20, r20
    10f2:	46 0f       	add	r20, r22
    10f4:	57 1f       	adc	r21, r23
    10f6:	24 0f       	add	r18, r20
    10f8:	35 1f       	adc	r19, r21
    10fa:	f9 01       	movw	r30, r18
    10fc:	40 81       	ld	r20, Z
    10fe:	9e 01       	movw	r18, r28
    1100:	2e 5f       	subi	r18, 0xFE	; 254
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	82 0f       	add	r24, r18
    1106:	93 1f       	adc	r25, r19
    1108:	fc 01       	movw	r30, r24
    110a:	40 83       	st	Z, r20
		roundkey[cnt_i] = usrkey[cnt_i];
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	29 81       	ldd	r18, Y+1	; 0x01
    1114:	22 2f       	mov	r18, r18
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	49 a5       	ldd	r20, Y+41	; 0x29
    111a:	5a a5       	ldd	r21, Y+42	; 0x2a
    111c:	24 0f       	add	r18, r20
    111e:	35 1f       	adc	r19, r21
    1120:	f9 01       	movw	r30, r18
    1122:	40 81       	ld	r20, Z
    1124:	9e 01       	movw	r18, r28
    1126:	2d 5e       	subi	r18, 0xED	; 237
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	fc 01       	movw	r30, r24
    1130:	40 83       	st	Z, r20
		roundkey[cnt_i+4] = usrkey[cnt_i+4];
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	04 96       	adiw	r24, 0x04	; 4
    113a:	29 81       	ldd	r18, Y+1	; 0x01
    113c:	22 2f       	mov	r18, r18
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	2c 5f       	subi	r18, 0xFC	; 252
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	49 a5       	ldd	r20, Y+41	; 0x29
    1146:	5a a5       	ldd	r21, Y+42	; 0x2a
    1148:	24 0f       	add	r18, r20
    114a:	35 1f       	adc	r19, r21
    114c:	f9 01       	movw	r30, r18
    114e:	40 81       	ld	r20, Z
    1150:	9e 01       	movw	r18, r28
    1152:	2d 5e       	subi	r18, 0xED	; 237
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	82 0f       	add	r24, r18
    1158:	93 1f       	adc	r25, r19
    115a:	fc 01       	movw	r30, r24
    115c:	40 83       	st	Z, r20
		roundkey[cnt_i+8] = usrkey[cnt_i+8];
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	08 96       	adiw	r24, 0x08	; 8
    1166:	29 81       	ldd	r18, Y+1	; 0x01
    1168:	22 2f       	mov	r18, r18
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	28 5f       	subi	r18, 0xF8	; 248
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	49 a5       	ldd	r20, Y+41	; 0x29
    1172:	5a a5       	ldd	r21, Y+42	; 0x2a
    1174:	24 0f       	add	r18, r20
    1176:	35 1f       	adc	r19, r21
    1178:	f9 01       	movw	r30, r18
    117a:	40 81       	ld	r20, Z
    117c:	9e 01       	movw	r18, r28
    117e:	2d 5e       	subi	r18, 0xED	; 237
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	fc 01       	movw	r30, r24
    1188:	40 83       	st	Z, r20
		roundkey[cnt_i+12] = usrkey[cnt_i+12];
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0c 96       	adiw	r24, 0x0c	; 12
    1192:	29 81       	ldd	r18, Y+1	; 0x01
    1194:	22 2f       	mov	r18, r18
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	24 5f       	subi	r18, 0xF4	; 244
    119a:	3f 4f       	sbci	r19, 0xFF	; 255
    119c:	49 a5       	ldd	r20, Y+41	; 0x29
    119e:	5a a5       	ldd	r21, Y+42	; 0x2a
    11a0:	24 0f       	add	r18, r20
    11a2:	35 1f       	adc	r19, r21
    11a4:	f9 01       	movw	r30, r18
    11a6:	40 81       	ld	r20, Z
    11a8:	9e 01       	movw	r18, r28
    11aa:	2d 5e       	subi	r18, 0xED	; 237
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	82 0f       	add	r24, r18
    11b0:	93 1f       	adc	r25, r19
    11b2:	fc 01       	movw	r30, r24
    11b4:	40 83       	st	Z, r20
	u8 state[16] = {0x00};
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	for (cnt_i = 0; cnt_i < 4; cnt_i++)
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <__stack+0xc5>
    11c2:	21 cf       	rjmp	.-446    	; 0x1006 <AES_encrypt_FACE_Light+0x5a>
		roundkey[cnt_i] = usrkey[cnt_i];
		roundkey[cnt_i+4] = usrkey[cnt_i+4];
		roundkey[cnt_i+8] = usrkey[cnt_i+8];
		roundkey[cnt_i+12] = usrkey[cnt_i+12];
	}
	keyScheduling(roundkey,rcon, sbox,&round);
    11c4:	9e 01       	movw	r18, r28
    11c6:	2e 5e       	subi	r18, 0xEE	; 238
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	4b a5       	ldd	r20, Y+43	; 0x2b
    11cc:	5c a5       	ldd	r21, Y+44	; 0x2c
    11ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    11d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    11d2:	ce 01       	movw	r24, r28
    11d4:	43 96       	adiw	r24, 0x13	; 19
    11d6:	79 da       	rcall	.-2830   	; 0x6ca <keyScheduling>
	keyScheduling(roundkey,rcon, sbox,&round);
    11d8:	9e 01       	movw	r18, r28
    11da:	2e 5e       	subi	r18, 0xEE	; 238
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	4b a5       	ldd	r20, Y+43	; 0x2b
    11e0:	5c a5       	ldd	r21, Y+44	; 0x2c
    11e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    11e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    11e6:	ce 01       	movw	r24, r28
    11e8:	43 96       	adiw	r24, 0x13	; 19
    11ea:	6f da       	rcall	.-2850   	; 0x6ca <keyScheduling>

	ShiftRow(state);
    11ec:	ce 01       	movw	r24, r28
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ShiftRow>
	MixColumns_asm(state);
    11f4:	ce 01       	movw	r24, r28
    11f6:	02 96       	adiw	r24, 0x02	; 2
    11f8:	0e 94 5e 00 	call	0xbc	; 0xbc <MixColumns_asm>
	AddRoundKey(state, roundkey);
    11fc:	9e 01       	movw	r18, r28
    11fe:	2d 5e       	subi	r18, 0xED	; 237
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	02 96       	adiw	r24, 0x02	; 2
    1206:	b9 01       	movw	r22, r18
    1208:	26 da       	rcall	.-2996   	; 0x656 <AddRoundKey>
	keyScheduling(roundkey,rcon, sbox,&round);
    120a:	9e 01       	movw	r18, r28
    120c:	2e 5e       	subi	r18, 0xEE	; 238
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	4b a5       	ldd	r20, Y+43	; 0x2b
    1212:	5c a5       	ldd	r21, Y+44	; 0x2c
    1214:	6d a5       	ldd	r22, Y+45	; 0x2d
    1216:	7e a5       	ldd	r23, Y+46	; 0x2e
    1218:	ce 01       	movw	r24, r28
    121a:	43 96       	adiw	r24, 0x13	; 19
    121c:	56 da       	rcall	.-2900   	; 0x6ca <keyScheduling>

	for (cnt_i = 3; cnt_i < AES_MAXNR; cnt_i++)
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	23 c0       	rjmp	.+70     	; 0x126a <__stack+0x16b>
	{
		SubByte(state,sbox);
    1224:	2b a5       	ldd	r18, Y+43	; 0x2b
    1226:	3c a5       	ldd	r19, Y+44	; 0x2c
    1228:	ce 01       	movw	r24, r28
    122a:	02 96       	adiw	r24, 0x02	; 2
    122c:	b9 01       	movw	r22, r18
    122e:	0e 94 bb 00 	call	0x176	; 0x176 <SubByte>
		ShiftRow(state);
    1232:	ce 01       	movw	r24, r28
    1234:	02 96       	adiw	r24, 0x02	; 2
    1236:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ShiftRow>
		MixColumns_asm(state);
    123a:	ce 01       	movw	r24, r28
    123c:	02 96       	adiw	r24, 0x02	; 2
    123e:	0e 94 5e 00 	call	0xbc	; 0xbc <MixColumns_asm>
		AddRoundKey(state, roundkey);
    1242:	9e 01       	movw	r18, r28
    1244:	2d 5e       	subi	r18, 0xED	; 237
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	ce 01       	movw	r24, r28
    124a:	02 96       	adiw	r24, 0x02	; 2
    124c:	b9 01       	movw	r22, r18
    124e:	03 da       	rcall	.-3066   	; 0x656 <AddRoundKey>
		keyScheduling(roundkey,rcon, sbox,&round);
    1250:	9e 01       	movw	r18, r28
    1252:	2e 5e       	subi	r18, 0xEE	; 238
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	4b a5       	ldd	r20, Y+43	; 0x2b
    1258:	5c a5       	ldd	r21, Y+44	; 0x2c
    125a:	6d a5       	ldd	r22, Y+45	; 0x2d
    125c:	7e a5       	ldd	r23, Y+46	; 0x2e
    125e:	ce 01       	movw	r24, r28
    1260:	43 96       	adiw	r24, 0x13	; 19
    1262:	33 da       	rcall	.-2970   	; 0x6ca <keyScheduling>
	ShiftRow(state);
	MixColumns_asm(state);
	AddRoundKey(state, roundkey);
	keyScheduling(roundkey,rcon, sbox,&round);

	for (cnt_i = 3; cnt_i < AES_MAXNR; cnt_i++)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	8a 30       	cpi	r24, 0x0A	; 10
    126e:	d0 f2       	brcs	.-76     	; 0x1224 <__stack+0x125>
		AddRoundKey(state, roundkey);
		keyScheduling(roundkey,rcon, sbox,&round);

	}
	
	SubByte(state,sbox);
    1270:	2b a5       	ldd	r18, Y+43	; 0x2b
    1272:	3c a5       	ldd	r19, Y+44	; 0x2c
    1274:	ce 01       	movw	r24, r28
    1276:	02 96       	adiw	r24, 0x02	; 2
    1278:	b9 01       	movw	r22, r18
    127a:	0e 94 bb 00 	call	0x176	; 0x176 <SubByte>
	ShiftRow(state);
    127e:	ce 01       	movw	r24, r28
    1280:	02 96       	adiw	r24, 0x02	; 2
    1282:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ShiftRow>
	AddRoundKey(state, roundkey);
    1286:	9e 01       	movw	r18, r28
    1288:	2d 5e       	subi	r18, 0xED	; 237
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	ce 01       	movw	r24, r28
    128e:	02 96       	adiw	r24, 0x02	; 2
    1290:	b9 01       	movw	r22, r18
    1292:	e1 d9       	rcall	.-3134   	; 0x656 <AddRoundKey>

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
    1294:	19 82       	std	Y+1, r1	; 0x01
    1296:	16 c0       	rjmp	.+44     	; 0x12c4 <__stack+0x1c5>
	{
		out[cnt_i] = state[cnt_i];
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	2f a1       	ldd	r18, Y+39	; 0x27
    12a0:	38 a5       	ldd	r19, Y+40	; 0x28
    12a2:	82 0f       	add	r24, r18
    12a4:	93 1f       	adc	r25, r19
    12a6:	29 81       	ldd	r18, Y+1	; 0x01
    12a8:	22 2f       	mov	r18, r18
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	ae 01       	movw	r20, r28
    12ae:	4e 5f       	subi	r20, 0xFE	; 254
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    12b2:	24 0f       	add	r18, r20
    12b4:	35 1f       	adc	r19, r21
    12b6:	f9 01       	movw	r30, r18
    12b8:	20 81       	ld	r18, Z
    12ba:	fc 01       	movw	r30, r24
    12bc:	20 83       	st	Z, r18
	
	SubByte(state,sbox);
	ShiftRow(state);
	AddRoundKey(state, roundkey);

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	80 31       	cpi	r24, 0x10	; 16
    12c8:	38 f3       	brcs	.-50     	; 0x1298 <__stack+0x199>
	{
		out[cnt_i] = state[cnt_i];
	}
}
    12ca:	00 00       	nop
    12cc:	ae 96       	adiw	r28, 0x2e	; 46
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	08 95       	ret

000012e6 <CRYPTO_ctr128_encrypt_FACE_Light>:

void CRYPTO_ctr128_encrypt_FACE_Light(u8* inp, u8* out, u8 LUT_FL[4][4][256],u8 length , u8* usrkey, u8* count ,u8* sbox, u8*rcon) //AES CTR Mode of FACE_Light ver
{
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	c4 55       	subi	r28, 0x54	; 84
    1300:	d1 09       	sbc	r29, r1
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	fe 01       	movw	r30, r28
    130e:	ec 5b       	subi	r30, 0xBC	; 188
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
    1316:	ce 01       	movw	r24, r28
    1318:	8a 5b       	subi	r24, 0xBA	; 186
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	fc 01       	movw	r30, r24
    131e:	71 83       	std	Z+1, r23	; 0x01
    1320:	60 83       	st	Z, r22
    1322:	ce 01       	movw	r24, r28
    1324:	88 5b       	subi	r24, 0xB8	; 184
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	fc 01       	movw	r30, r24
    132a:	51 83       	std	Z+1, r21	; 0x01
    132c:	40 83       	st	Z, r20
    132e:	ce 01       	movw	r24, r28
    1330:	86 5b       	subi	r24, 0xB6	; 182
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
    1338:	ce 01       	movw	r24, r28
    133a:	85 5b       	subi	r24, 0xB5	; 181
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	fc 01       	movw	r30, r24
    1340:	11 83       	std	Z+1, r17	; 0x01
    1342:	00 83       	st	Z, r16
    1344:	ce 01       	movw	r24, r28
    1346:	83 5b       	subi	r24, 0xB3	; 179
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	fc 01       	movw	r30, r24
    134c:	f1 82       	std	Z+1, r15	; 0x01
    134e:	e0 82       	st	Z, r14
    1350:	ce 01       	movw	r24, r28
    1352:	81 5b       	subi	r24, 0xB1	; 177
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	fc 01       	movw	r30, r24
    1358:	d1 82       	std	Z+1, r13	; 0x01
    135a:	c0 82       	st	Z, r12
    135c:	ce 01       	movw	r24, r28
    135e:	8f 5a       	subi	r24, 0xAF	; 175
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	fc 01       	movw	r30, r24
    1364:	b1 82       	std	Z+1, r11	; 0x01
    1366:	a0 82       	st	Z, r10
	u8 cnt_i, cnt_j;
	u8 paddingcnt = length % 16;
    1368:	ce 01       	movw	r24, r28
    136a:	86 5b       	subi	r24, 0xB6	; 182
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	fc 01       	movw	r30, r24
    1370:	80 81       	ld	r24, Z
    1372:	8f 70       	andi	r24, 0x0F	; 15
    1374:	8b 83       	std	Y+3, r24	; 0x03
	u8 PT[BLOCKSIZE][16] = { {0x00} };
    1376:	20 e1       	ldi	r18, 0x10	; 16
    1378:	ce 01       	movw	r24, r28
    137a:	04 96       	adiw	r24, 0x04	; 4
    137c:	fc 01       	movw	r30, r24
    137e:	32 2f       	mov	r19, r18
    1380:	11 92       	st	Z+, r1
    1382:	3a 95       	dec	r19
    1384:	e9 f7       	brne	.-6      	; 0x1380 <CRYPTO_ctr128_encrypt_FACE_Light+0x9a>
	u8 CT[BLOCKSIZE][16] = { {0x00} };
    1386:	20 e1       	ldi	r18, 0x10	; 16
    1388:	ce 01       	movw	r24, r28
    138a:	44 96       	adiw	r24, 0x14	; 20
    138c:	fc 01       	movw	r30, r24
    138e:	32 2f       	mov	r19, r18
    1390:	11 92       	st	Z+, r1
    1392:	3a 95       	dec	r19
    1394:	e9 f7       	brne	.-6      	; 0x1390 <CRYPTO_ctr128_encrypt_FACE_Light+0xaa>
	u8 iparray[16];
	u8 oparray[16];
	
	reset_count(count);
    1396:	ce 01       	movw	r24, r28
    1398:	83 5b       	subi	r24, 0xB3	; 179
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	fc 01       	movw	r30, r24
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	a3 da       	rcall	.-2746   	; 0x8ea <reset_count>

	for (cnt_i = 0; cnt_i < BLOCKSIZE - 1; cnt_i++)
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	00 00       	nop
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 23       	and	r24, r24
    13ac:	f9 f4       	brne	.+62     	; 0x13ec <CRYPTO_ctr128_encrypt_FACE_Light+0x106>
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    13ae:	1a 82       	std	Y+2, r1	; 0x02
    13b0:	1a c0       	rjmp	.+52     	; 0x13e6 <CRYPTO_ctr128_encrypt_FACE_Light+0x100>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ba:	22 2f       	mov	r18, r18
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	ae 01       	movw	r20, r28
    13c0:	4c 5b       	subi	r20, 0xBC	; 188
    13c2:	5f 4f       	sbci	r21, 0xFF	; 255
    13c4:	fa 01       	movw	r30, r20
    13c6:	40 81       	ld	r20, Z
    13c8:	51 81       	ldd	r21, Z+1	; 0x01
    13ca:	24 0f       	add	r18, r20
    13cc:	35 1f       	adc	r19, r21
    13ce:	f9 01       	movw	r30, r18
    13d0:	40 81       	ld	r20, Z
    13d2:	9e 01       	movw	r18, r28
    13d4:	2c 5f       	subi	r18, 0xFC	; 252
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	82 0f       	add	r24, r18
    13da:	93 1f       	adc	r25, r19
    13dc:	fc 01       	movw	r30, r24
    13de:	40 83       	st	Z, r20
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	80 31       	cpi	r24, 0x10	; 16
    13ea:	18 f3       	brcs	.-58     	; 0x13b2 <CRYPTO_ctr128_encrypt_FACE_Light+0xcc>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
	}

	if (paddingcnt != 0) // 패딩 함수.
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 23       	and	r24, r24
    13f0:	b9 f1       	breq	.+110    	; 0x1460 <CRYPTO_ctr128_encrypt_FACE_Light+0x17a>
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
    13f2:	1a 82       	std	Y+2, r1	; 0x02
    13f4:	1a c0       	rjmp	.+52     	; 0x142a <CRYPTO_ctr128_encrypt_FACE_Light+0x144>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	2a 81       	ldd	r18, Y+2	; 0x02
    13fe:	22 2f       	mov	r18, r18
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	ae 01       	movw	r20, r28
    1404:	4c 5b       	subi	r20, 0xBC	; 188
    1406:	5f 4f       	sbci	r21, 0xFF	; 255
    1408:	fa 01       	movw	r30, r20
    140a:	40 81       	ld	r20, Z
    140c:	51 81       	ldd	r21, Z+1	; 0x01
    140e:	24 0f       	add	r18, r20
    1410:	35 1f       	adc	r19, r21
    1412:	f9 01       	movw	r30, r18
    1414:	40 81       	ld	r20, Z
    1416:	9e 01       	movw	r18, r28
    1418:	2c 5f       	subi	r18, 0xFC	; 252
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	fc 01       	movw	r30, r24
    1422:	40 83       	st	Z, r20
		}
	}

	if (paddingcnt != 0) // 패딩 함수.
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	8f 5f       	subi	r24, 0xFF	; 255
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	98 17       	cp	r25, r24
    1430:	10 f3       	brcs	.-60     	; 0x13f6 <CRYPTO_ctr128_encrypt_FACE_Light+0x110>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	8a 83       	std	Y+2, r24	; 0x02
    1436:	11 c0       	rjmp	.+34     	; 0x145a <CRYPTO_ctr128_encrypt_FACE_Light+0x174>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	30 e1       	ldi	r19, 0x10	; 16
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	43 2f       	mov	r20, r19
    1444:	42 1b       	sub	r20, r18
    1446:	9e 01       	movw	r18, r28
    1448:	2c 5f       	subi	r18, 0xFC	; 252
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	fc 01       	movw	r30, r24
    1452:	40 83       	st	Z, r20
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	8a 83       	std	Y+2, r24	; 0x02
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	80 31       	cpi	r24, 0x10	; 16
    145e:	60 f3       	brcs	.-40     	; 0x1438 <CRYPTO_ctr128_encrypt_FACE_Light+0x152>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
    1460:	19 82       	std	Y+1, r1	; 0x01
    1462:	94 c0       	rjmp	.+296    	; 0x158c <CRYPTO_ctr128_encrypt_FACE_Light+0x2a6>
	{
		if (cnt_i != 0)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	88 23       	and	r24, r24
    1468:	39 f0       	breq	.+14     	; 0x1478 <CRYPTO_ctr128_encrypt_FACE_Light+0x192>
		Count_Add_for_FACE_LIGHT(count);
    146a:	ce 01       	movw	r24, r28
    146c:	83 5b       	subi	r24, 0xB3	; 179
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	fc 01       	movw	r30, r24
    1472:	80 81       	ld	r24, Z
    1474:	91 81       	ldd	r25, Z+1	; 0x01
    1476:	12 dc       	rcall	.-2012   	; 0xc9c <Count_Add_for_FACE_LIGHT>

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    1478:	1a 82       	std	Y+2, r1	; 0x02
    147a:	1a c0       	rjmp	.+52     	; 0x14b0 <CRYPTO_ctr128_encrypt_FACE_Light+0x1ca>
		{
			iparray[cnt_j] = count[cnt_j];
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	2a 81       	ldd	r18, Y+2	; 0x02
    1484:	22 2f       	mov	r18, r18
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	ae 01       	movw	r20, r28
    148a:	43 5b       	subi	r20, 0xB3	; 179
    148c:	5f 4f       	sbci	r21, 0xFF	; 255
    148e:	fa 01       	movw	r30, r20
    1490:	40 81       	ld	r20, Z
    1492:	51 81       	ldd	r21, Z+1	; 0x01
    1494:	24 0f       	add	r18, r20
    1496:	35 1f       	adc	r19, r21
    1498:	f9 01       	movw	r30, r18
    149a:	40 81       	ld	r20, Z
    149c:	9e 01       	movw	r18, r28
    149e:	2c 5d       	subi	r18, 0xDC	; 220
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	fc 01       	movw	r30, r24
    14a8:	40 83       	st	Z, r20
	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
	{
		if (cnt_i != 0)
		Count_Add_for_FACE_LIGHT(count);

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	8f 5f       	subi	r24, 0xFF	; 255
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	80 31       	cpi	r24, 0x10	; 16
    14b4:	18 f3       	brcs	.-58     	; 0x147c <CRYPTO_ctr128_encrypt_FACE_Light+0x196>
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey,sbox,rcon);
    14b6:	ce 01       	movw	r24, r28
    14b8:	8f 5a       	subi	r24, 0xAF	; 175
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	fc 01       	movw	r30, r24
    14be:	a0 81       	ld	r26, Z
    14c0:	b1 81       	ldd	r27, Z+1	; 0x01
    14c2:	ce 01       	movw	r24, r28
    14c4:	81 5b       	subi	r24, 0xB1	; 177
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	fc 01       	movw	r30, r24
    14ca:	01 90       	ld	r0, Z+
    14cc:	f0 81       	ld	r31, Z
    14ce:	e0 2d       	mov	r30, r0
    14d0:	65 96       	adiw	r28, 0x15	; 21
    14d2:	ff af       	std	Y+63, r31	; 0x3f
    14d4:	ee af       	std	Y+62, r30	; 0x3e
    14d6:	65 97       	sbiw	r28, 0x15	; 21
    14d8:	ce 01       	movw	r24, r28
    14da:	85 5b       	subi	r24, 0xB5	; 181
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	fc 01       	movw	r30, r24
    14e0:	20 81       	ld	r18, Z
    14e2:	31 81       	ldd	r19, Z+1	; 0x01
    14e4:	ae 01       	movw	r20, r28
    14e6:	4c 5c       	subi	r20, 0xCC	; 204
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	ce 01       	movw	r24, r28
    14ec:	88 5b       	subi	r24, 0xB8	; 184
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	fc 01       	movw	r30, r24
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	ce 01       	movw	r24, r28
    14f8:	84 96       	adiw	r24, 0x24	; 36
    14fa:	7d 01       	movw	r14, r26
    14fc:	65 96       	adiw	r28, 0x15	; 21
    14fe:	0e ad       	ldd	r16, Y+62	; 0x3e
    1500:	1f ad       	ldd	r17, Y+63	; 0x3f
    1502:	65 97       	sbiw	r28, 0x15	; 21
    1504:	53 dd       	rcall	.-1370   	; 0xfac <AES_encrypt_FACE_Light>
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    1506:	1a 82       	std	Y+2, r1	; 0x02
    1508:	3b c0       	rjmp	.+118    	; 0x1580 <CRYPTO_ctr128_encrypt_FACE_Light+0x29a>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	4a 81       	ldd	r20, Y+2	; 0x02
    1518:	44 2f       	mov	r20, r20
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	be 01       	movw	r22, r28
    151e:	6c 5c       	subi	r22, 0xCC	; 204
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	46 0f       	add	r20, r22
    1524:	57 1f       	adc	r21, r23
    1526:	fa 01       	movw	r30, r20
    1528:	a0 81       	ld	r26, Z
    152a:	49 81       	ldd	r20, Y+1	; 0x01
    152c:	64 2f       	mov	r22, r20
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	4a 81       	ldd	r20, Y+2	; 0x02
    1532:	44 2f       	mov	r20, r20
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	62 95       	swap	r22
    1538:	72 95       	swap	r23
    153a:	70 7f       	andi	r23, 0xF0	; 240
    153c:	76 27       	eor	r23, r22
    153e:	60 7f       	andi	r22, 0xF0	; 240
    1540:	76 27       	eor	r23, r22
    1542:	fe 01       	movw	r30, r28
    1544:	31 96       	adiw	r30, 0x01	; 1
    1546:	6e 0f       	add	r22, r30
    1548:	7f 1f       	adc	r23, r31
    154a:	46 0f       	add	r20, r22
    154c:	57 1f       	adc	r21, r23
    154e:	4d 5f       	subi	r20, 0xFD	; 253
    1550:	5f 4f       	sbci	r21, 0xFF	; 255
    1552:	fa 01       	movw	r30, r20
    1554:	40 81       	ld	r20, Z
    1556:	6a 2f       	mov	r22, r26
    1558:	64 27       	eor	r22, r20
    155a:	22 95       	swap	r18
    155c:	32 95       	swap	r19
    155e:	30 7f       	andi	r19, 0xF0	; 240
    1560:	32 27       	eor	r19, r18
    1562:	20 7f       	andi	r18, 0xF0	; 240
    1564:	32 27       	eor	r19, r18
    1566:	ae 01       	movw	r20, r28
    1568:	4f 5f       	subi	r20, 0xFF	; 255
    156a:	5f 4f       	sbci	r21, 0xFF	; 255
    156c:	24 0f       	add	r18, r20
    156e:	35 1f       	adc	r19, r21
    1570:	82 0f       	add	r24, r18
    1572:	93 1f       	adc	r25, r19
    1574:	43 96       	adiw	r24, 0x13	; 19
    1576:	fc 01       	movw	r30, r24
    1578:	60 83       	st	Z, r22
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			iparray[cnt_j] = count[cnt_j];
		}
		AES_encrypt_FACE_Light(iparray, LUT_FL, oparray,usrkey,sbox,rcon);
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	8a 83       	std	Y+2, r24	; 0x02
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	80 31       	cpi	r24, 0x10	; 16
    1584:	10 f2       	brcs	.-124    	; 0x150a <CRYPTO_ctr128_encrypt_FACE_Light+0x224>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	8f 5f       	subi	r24, 0xFF	; 255
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	88 23       	and	r24, r24
    1590:	09 f4       	brne	.+2      	; 0x1594 <CRYPTO_ctr128_encrypt_FACE_Light+0x2ae>
    1592:	68 cf       	rjmp	.-304    	; 0x1464 <CRYPTO_ctr128_encrypt_FACE_Light+0x17e>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
    1594:	19 82       	std	Y+1, r1	; 0x01
    1596:	3c c0       	rjmp	.+120    	; 0x1610 <CRYPTO_ctr128_encrypt_FACE_Light+0x32a>
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    1598:	1a 82       	std	Y+2, r1	; 0x02
    159a:	34 c0       	rjmp	.+104    	; 0x1604 <CRYPTO_ctr128_encrypt_FACE_Light+0x31e>
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9c 01       	movw	r18, r24
    15a4:	22 95       	swap	r18
    15a6:	32 95       	swap	r19
    15a8:	30 7f       	andi	r19, 0xF0	; 240
    15aa:	32 27       	eor	r19, r18
    15ac:	20 7f       	andi	r18, 0xF0	; 240
    15ae:	32 27       	eor	r19, r18
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	82 0f       	add	r24, r18
    15b8:	93 1f       	adc	r25, r19
    15ba:	9c 01       	movw	r18, r24
    15bc:	ce 01       	movw	r24, r28
    15be:	8a 5b       	subi	r24, 0xBA	; 186
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	fc 01       	movw	r30, r24
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	82 0f       	add	r24, r18
    15ca:	93 1f       	adc	r25, r19
    15cc:	29 81       	ldd	r18, Y+1	; 0x01
    15ce:	42 2f       	mov	r20, r18
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	2a 81       	ldd	r18, Y+2	; 0x02
    15d4:	22 2f       	mov	r18, r18
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	42 95       	swap	r20
    15da:	52 95       	swap	r21
    15dc:	50 7f       	andi	r21, 0xF0	; 240
    15de:	54 27       	eor	r21, r20
    15e0:	40 7f       	andi	r20, 0xF0	; 240
    15e2:	54 27       	eor	r21, r20
    15e4:	be 01       	movw	r22, r28
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	46 0f       	add	r20, r22
    15ec:	57 1f       	adc	r21, r23
    15ee:	24 0f       	add	r18, r20
    15f0:	35 1f       	adc	r19, r21
    15f2:	2d 5e       	subi	r18, 0xED	; 237
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	f9 01       	movw	r30, r18
    15f8:	20 81       	ld	r18, Z
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 31       	cpi	r24, 0x10	; 16
    1608:	48 f2       	brcs	.-110    	; 0x159c <CRYPTO_ctr128_encrypt_FACE_Light+0x2b6>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	88 23       	and	r24, r24
    1614:	09 f2       	breq	.-126    	; 0x1598 <CRYPTO_ctr128_encrypt_FACE_Light+0x2b2>
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
		}
	}
}
    1616:	00 00       	nop
    1618:	cc 5a       	subi	r28, 0xAC	; 172
    161a:	df 4f       	sbci	r29, 0xFF	; 255
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	08 95       	ret

0000163c <main>:
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};


int main(void)
{
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	c0 54       	subi	r28, 0x40	; 64
    1656:	d0 41       	sbci	r29, 0x10	; 16
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
	
// 	 u8 inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
// 	 u8 userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};

	 u8 inp[16 * BLOCKSIZE] ={0x00};
    1662:	20 e1       	ldi	r18, 0x10	; 16
    1664:	ce 01       	movw	r24, r28
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	fc 01       	movw	r30, r24
    166a:	32 2f       	mov	r19, r18
    166c:	11 92       	st	Z+, r1
    166e:	3a 95       	dec	r19
    1670:	e9 f7       	brne	.-6      	; 0x166c <main+0x30>
	 u8 out[16 * BLOCKSIZE] = {0x00};
    1672:	20 e1       	ldi	r18, 0x10	; 16
    1674:	ce 01       	movw	r24, r28
    1676:	41 96       	adiw	r24, 0x11	; 17
    1678:	fc 01       	movw	r30, r24
    167a:	32 2f       	mov	r19, r18
    167c:	11 92       	st	Z+, r1
    167e:	3a 95       	dec	r19
    1680:	e9 f7       	brne	.-6      	; 0x167c <main+0x40>
	 u8 userkey[16] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
    1682:	80 e1       	ldi	r24, 0x10	; 16
    1684:	e0 e0       	ldi	r30, 0x00	; 0
    1686:	f1 e0       	ldi	r31, 0x01	; 1
    1688:	de 01       	movw	r26, r28
    168a:	91 96       	adiw	r26, 0x21	; 33
    168c:	01 90       	ld	r0, Z+
    168e:	0d 92       	st	X+, r0
    1690:	8a 95       	dec	r24
    1692:	e1 f7       	brne	.-8      	; 0x168c <main+0x50>
	 u8 LUT_FL[4][4][256]PROGMEM = {{{0x00}}};
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e1       	ldi	r19, 0x10	; 16
    1698:	ce 01       	movw	r24, r28
    169a:	c1 96       	adiw	r24, 0x31	; 49
    169c:	fc 01       	movw	r30, r24
    169e:	a9 01       	movw	r20, r18
    16a0:	11 92       	st	Z+, r1
    16a2:	41 50       	subi	r20, 0x01	; 1
    16a4:	50 40       	sbci	r21, 0x00	; 0
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <main+0x64>
	 u8 count[16] = {0x00};
    16a8:	ce 01       	movw	r24, r28
    16aa:	8f 5c       	subi	r24, 0xCF	; 207
    16ac:	9f 4e       	sbci	r25, 0xEF	; 239
    16ae:	20 e1       	ldi	r18, 0x10	; 16
    16b0:	fc 01       	movw	r30, r24
    16b2:	32 2f       	mov	r19, r18
    16b4:	11 92       	st	Z+, r1
    16b6:	3a 95       	dec	r19
    16b8:	e9 f7       	brne	.-6      	; 0x16b4 <main+0x78>
		 
	Make_LUT_Face_Light(LUT_FL,userkey,count,sbox,Rcon);
    16ba:	ae 01       	movw	r20, r28
    16bc:	4f 5c       	subi	r20, 0xCF	; 207
    16be:	5f 4e       	sbci	r21, 0xEF	; 239
    16c0:	be 01       	movw	r22, r28
    16c2:	6f 5d       	subi	r22, 0xDF	; 223
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	ce 01       	movw	r24, r28
    16c8:	c1 96       	adiw	r24, 0x31	; 49
    16ca:	00 e1       	ldi	r16, 0x10	; 16
    16cc:	11 e0       	ldi	r17, 0x01	; 1
    16ce:	2d e1       	ldi	r18, 0x1D	; 29
    16d0:	31 e0       	ldi	r19, 0x01	; 1
    16d2:	6d db       	rcall	.-2342   	; 0xdae <Make_LUT_Face_Light>
	CRYPTO_ctr128_encrypt_FACE_Light(inp,out,LUT_FL,AES_KEY_BIT,userkey,count,sbox,Rcon);
    16d4:	be 01       	movw	r22, r28
    16d6:	6f 5c       	subi	r22, 0xCF	; 207
    16d8:	7f 4e       	sbci	r23, 0xEF	; 239
    16da:	9e 01       	movw	r18, r28
    16dc:	2f 5d       	subi	r18, 0xDF	; 223
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
    16e0:	ae 01       	movw	r20, r28
    16e2:	4f 5c       	subi	r20, 0xCF	; 207
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	ce 01       	movw	r24, r28
    16e8:	41 96       	adiw	r24, 0x11	; 17
    16ea:	0f 2e       	mov	r0, r31
    16ec:	f0 e1       	ldi	r31, 0x10	; 16
    16ee:	af 2e       	mov	r10, r31
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	bf 2e       	mov	r11, r31
    16f4:	f0 2d       	mov	r31, r0
    16f6:	0f 2e       	mov	r0, r31
    16f8:	fd e1       	ldi	r31, 0x1D	; 29
    16fa:	cf 2e       	mov	r12, r31
    16fc:	f1 e0       	ldi	r31, 0x01	; 1
    16fe:	df 2e       	mov	r13, r31
    1700:	f0 2d       	mov	r31, r0
    1702:	7b 01       	movw	r14, r22
    1704:	89 01       	movw	r16, r18
    1706:	20 e8       	ldi	r18, 0x80	; 128
    1708:	bc 01       	movw	r22, r24
    170a:	ce 01       	movw	r24, r28
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	eb dd       	rcall	.-1066   	; 0x12e6 <CRYPTO_ctr128_encrypt_FACE_Light>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
	//AES_encrypt(inp,out,userkey,sbox,Rcon);
	//AES_encrypt_asm(inp,out,userkey,sbox,Rcon);


	
}
    1714:	c0 5c       	subi	r28, 0xC0	; 192
    1716:	df 4e       	sbci	r29, 0xEF	; 239
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	08 95       	ret

00001738 <_exit>:
    1738:	f8 94       	cli

0000173a <__stop_program>:
    173a:	ff cf       	rjmp	.-2      	; 0x173a <__stop_program>
