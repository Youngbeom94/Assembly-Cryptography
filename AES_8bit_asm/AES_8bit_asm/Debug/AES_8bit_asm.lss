
AES_8bit_asm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  0000050a  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f10  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096b  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000626  00000000  00000000  00002033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ae  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b2c  00000000  00000000  00002cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 34       	cpi	r26, 0x4E	; 78
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	d3 d1       	rcall	.+934    	; 0x45a <main>
  b4:	28 c2       	rjmp	.+1104   	; 0x506 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <SubByte>:
			temp = userKey[cnt_j + (cnt_i * 4)] << ((3 - cnt_j) * 8);
			key->rd_key[start + cnt_i] += temp;
			temp = 0;
		}
	}
}
  b8:	fc 01       	movw	r30, r24
  ba:	9c 01       	movw	r18, r24
  bc:	20 5f       	subi	r18, 0xF0	; 240
  be:	3f 4f       	sbci	r19, 0xFF	; 255
  c0:	90 81       	ld	r25, Z
  c2:	db 01       	movw	r26, r22
  c4:	a9 0f       	add	r26, r25
  c6:	b1 1d       	adc	r27, r1
  c8:	9c 91       	ld	r25, X
  ca:	91 93       	st	Z+, r25
  cc:	e2 17       	cp	r30, r18
  ce:	f3 07       	cpc	r31, r19
  d0:	b9 f7       	brne	.-18     	; 0xc0 <SubByte+0x8>
  d2:	08 95       	ret

000000d4 <ShiftRow>:
  d4:	fc 01       	movw	r30, r24
  d6:	85 85       	ldd	r24, Z+13	; 0x0d
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	95 87       	std	Z+13, r25	; 0x0d
  dc:	95 81       	ldd	r25, Z+5	; 0x05
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	91 85       	ldd	r25, Z+9	; 0x09
  e2:	95 83       	std	Z+5, r25	; 0x05
  e4:	81 87       	std	Z+9, r24	; 0x09
  e6:	92 85       	ldd	r25, Z+10	; 0x0a
  e8:	86 85       	ldd	r24, Z+14	; 0x0e
  ea:	22 81       	ldd	r18, Z+2	; 0x02
  ec:	22 87       	std	Z+10, r18	; 0x0a
  ee:	26 81       	ldd	r18, Z+6	; 0x06
  f0:	26 87       	std	Z+14, r18	; 0x0e
  f2:	92 83       	std	Z+2, r25	; 0x02
  f4:	86 83       	std	Z+6, r24	; 0x06
  f6:	87 81       	ldd	r24, Z+7	; 0x07
  f8:	93 81       	ldd	r25, Z+3	; 0x03
  fa:	97 83       	std	Z+7, r25	; 0x07
  fc:	97 85       	ldd	r25, Z+15	; 0x0f
  fe:	93 83       	std	Z+3, r25	; 0x03
 100:	93 85       	ldd	r25, Z+11	; 0x0b
 102:	97 87       	std	Z+15, r25	; 0x0f
 104:	83 87       	std	Z+11, r24	; 0x0b
 106:	08 95       	ret

00000108 <MixColumns>:
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <MixColumns+0xc>
 114:	00 d0       	rcall	.+0      	; 0x116 <MixColumns+0xe>
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	ac 01       	movw	r20, r24
 11c:	8c 01       	movw	r16, r24
 11e:	00 5f       	subi	r16, 0xF0	; 240
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	0f 2e       	mov	r0, r31
 124:	fb e1       	ldi	r31, 0x1B	; 27
 126:	ff 2e       	mov	r15, r31
 128:	f0 2d       	mov	r31, r0
 12a:	be 01       	movw	r22, r28
 12c:	6b 5f       	subi	r22, 0xFB	; 251
 12e:	7f 4f       	sbci	r23, 0xFF	; 255
 130:	da 01       	movw	r26, r20
 132:	fc 91       	ld	r31, X
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	3c 91       	ld	r19, X
 138:	11 97       	sbiw	r26, 0x01	; 1
 13a:	ef 2f       	mov	r30, r31
 13c:	e3 27       	eor	r30, r19
 13e:	12 96       	adiw	r26, 0x02	; 2
 140:	2c 91       	ld	r18, X
 142:	12 97       	sbiw	r26, 0x02	; 2
 144:	32 27       	eor	r19, r18
 146:	13 96       	adiw	r26, 0x03	; 3
 148:	9c 91       	ld	r25, X
 14a:	8e 2f       	mov	r24, r30
 14c:	88 1f       	adc	r24, r24
 14e:	88 27       	eor	r24, r24
 150:	88 1f       	adc	r24, r24
 152:	8f 9d       	mul	r24, r15
 154:	80 2d       	mov	r24, r0
 156:	11 24       	eor	r1, r1
 158:	ae 2f       	mov	r26, r30
 15a:	aa 0f       	add	r26, r26
 15c:	8a 27       	eor	r24, r26
 15e:	a3 2f       	mov	r26, r19
 160:	a9 27       	eor	r26, r25
 162:	8a 27       	eor	r24, r26
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	83 2f       	mov	r24, r19
 168:	88 1f       	adc	r24, r24
 16a:	88 27       	eor	r24, r24
 16c:	88 1f       	adc	r24, r24
 16e:	8f 9d       	mul	r24, r15
 170:	80 2d       	mov	r24, r0
 172:	11 24       	eor	r1, r1
 174:	33 0f       	add	r19, r19
 176:	38 27       	eor	r19, r24
 178:	8f 2f       	mov	r24, r31
 17a:	82 27       	eor	r24, r18
 17c:	89 27       	eor	r24, r25
 17e:	38 27       	eor	r19, r24
 180:	3a 83       	std	Y+2, r19	; 0x02
 182:	82 2f       	mov	r24, r18
 184:	89 27       	eor	r24, r25
 186:	38 2f       	mov	r19, r24
 188:	33 1f       	adc	r19, r19
 18a:	33 27       	eor	r19, r19
 18c:	33 1f       	adc	r19, r19
 18e:	3f 9d       	mul	r19, r15
 190:	30 2d       	mov	r19, r0
 192:	11 24       	eor	r1, r1
 194:	88 0f       	add	r24, r24
 196:	83 27       	eor	r24, r19
 198:	3e 2f       	mov	r19, r30
 19a:	39 27       	eor	r19, r25
 19c:	83 27       	eor	r24, r19
 19e:	8b 83       	std	Y+3, r24	; 0x03
 1a0:	9f 27       	eor	r25, r31
 1a2:	89 2f       	mov	r24, r25
 1a4:	88 1f       	adc	r24, r24
 1a6:	88 27       	eor	r24, r24
 1a8:	88 1f       	adc	r24, r24
 1aa:	8f 9d       	mul	r24, r15
 1ac:	80 2d       	mov	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	99 0f       	add	r25, r25
 1b2:	98 27       	eor	r25, r24
 1b4:	2e 27       	eor	r18, r30
 1b6:	92 27       	eor	r25, r18
 1b8:	9c 83       	std	Y+4, r25	; 0x04
 1ba:	fe 01       	movw	r30, r28
 1bc:	31 96       	adiw	r30, 0x01	; 1
 1be:	da 01       	movw	r26, r20
 1c0:	81 91       	ld	r24, Z+
 1c2:	8d 93       	st	X+, r24
 1c4:	e6 17       	cp	r30, r22
 1c6:	f7 07       	cpc	r31, r23
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <MixColumns+0xb8>
 1ca:	4c 5f       	subi	r20, 0xFC	; 252
 1cc:	5f 4f       	sbci	r21, 0xFF	; 255
 1ce:	40 17       	cp	r20, r16
 1d0:	51 07       	cpc	r21, r17
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <MixColumns+0xce>
 1d4:	ad cf       	rjmp	.-166    	; 0x130 <MixColumns+0x28>
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	08 95       	ret

000001ea <AddRoundKey>:

void AddRoundKey(u8 *state, u8* rdkey)
{
 1ea:	db 01       	movw	r26, r22
 1ec:	fc 01       	movw	r30, r24
 1ee:	9c 01       	movw	r18, r24
 1f0:	2c 5f       	subi	r18, 0xFC	; 252
 1f2:	3f 4f       	sbci	r19, 0xFF	; 255
	int cnt_i;
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
	{
		state[cnt_i] ^= rdkey[cnt_i];
 1f4:	9d 91       	ld	r25, X+
 1f6:	80 81       	ld	r24, Z
 1f8:	98 27       	eor	r25, r24
 1fa:	91 93       	st	Z+, r25
}

void AddRoundKey(u8 *state, u8* rdkey)
{
	int cnt_i;
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
 1fc:	e2 17       	cp	r30, r18
 1fe:	f3 07       	cpc	r31, r19
 200:	c9 f7       	brne	.-14     	; 0x1f4 <AddRoundKey+0xa>
	{
		state[cnt_i] ^= rdkey[cnt_i];
	}
}
 202:	08 95       	ret

00000204 <keyScheduling>:


void keyScheduling(u8* roundkey,u8* Rcon, u8* sbox,u8 round)
{
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	60 97       	sbiw	r28, 0x10	; 16
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
 226:	dc 01       	movw	r26, r24
 228:	6b 01       	movw	r12, r22
 22a:	ca 01       	movw	r24, r20
	u8 cnt_i = 0x00;
	u8 temp2[16] = {0x00};
 22c:	ae 01       	movw	r20, r28
 22e:	4f 5f       	subi	r20, 0xFF	; 255
 230:	5f 4f       	sbci	r21, 0xFF	; 255
 232:	5a 01       	movw	r10, r20
 234:	30 e1       	ldi	r19, 0x10	; 16
 236:	fa 01       	movw	r30, r20
 238:	11 92       	st	Z+, r1
 23a:	3a 95       	dec	r19
 23c:	e9 f7       	brne	.-6      	; 0x238 <keyScheduling+0x34>
	cnt_i = roundkey[12];
 23e:	1c 96       	adiw	r26, 0x0c	; 12
 240:	3c 91       	ld	r19, X
 242:	1c 97       	sbiw	r26, 0x0c	; 12
	roundkey[12] = sbox[roundkey[13]];
 244:	1d 96       	adiw	r26, 0x0d	; 13
 246:	4c 91       	ld	r20, X
 248:	1d 97       	sbiw	r26, 0x0d	; 13
 24a:	bc 01       	movw	r22, r24
 24c:	64 0f       	add	r22, r20
 24e:	71 1d       	adc	r23, r1
 250:	fb 01       	movw	r30, r22
 252:	00 81       	ld	r16, Z
 254:	1c 96       	adiw	r26, 0x0c	; 12
 256:	0c 93       	st	X, r16
 258:	1c 97       	sbiw	r26, 0x0c	; 12
	roundkey[13] = sbox[roundkey[14]];
 25a:	1e 96       	adiw	r26, 0x0e	; 14
 25c:	4c 91       	ld	r20, X
 25e:	1e 97       	sbiw	r26, 0x0e	; 14
 260:	bc 01       	movw	r22, r24
 262:	64 0f       	add	r22, r20
 264:	71 1d       	adc	r23, r1
 266:	fb 01       	movw	r30, r22
 268:	10 81       	ld	r17, Z
 26a:	1d 96       	adiw	r26, 0x0d	; 13
 26c:	1c 93       	st	X, r17
 26e:	1d 97       	sbiw	r26, 0x0d	; 13
	roundkey[14] = sbox[roundkey[15]];
 270:	1f 96       	adiw	r26, 0x0f	; 15
 272:	4c 91       	ld	r20, X
 274:	1f 97       	sbiw	r26, 0x0f	; 15
 276:	bc 01       	movw	r22, r24
 278:	64 0f       	add	r22, r20
 27a:	71 1d       	adc	r23, r1
 27c:	fb 01       	movw	r30, r22
 27e:	70 81       	ld	r23, Z
 280:	1e 96       	adiw	r26, 0x0e	; 14
 282:	7c 93       	st	X, r23
 284:	1e 97       	sbiw	r26, 0x0e	; 14
	roundkey[15] = sbox[cnt_i];
 286:	83 0f       	add	r24, r19
 288:	91 1d       	adc	r25, r1
 28a:	fc 01       	movw	r30, r24
 28c:	f0 80       	ld	r15, Z
 28e:	1f 96       	adiw	r26, 0x0f	; 15
 290:	fc 92       	st	X, r15
 292:	1f 97       	sbiw	r26, 0x0f	; 15
	
	temp2[0] = roundkey[12]^Rcon[round]^roundkey[0];
 294:	8c 91       	ld	r24, X
 296:	c2 0e       	add	r12, r18
 298:	d1 1c       	adc	r13, r1
 29a:	f6 01       	movw	r30, r12
 29c:	90 81       	ld	r25, Z
 29e:	98 27       	eor	r25, r24
 2a0:	90 27       	eor	r25, r16
 2a2:	99 83       	std	Y+1, r25	; 0x01
	temp2[1] = roundkey[13]^roundkey[0];
 2a4:	51 2f       	mov	r21, r17
 2a6:	58 27       	eor	r21, r24
 2a8:	5a 83       	std	Y+2, r21	; 0x02
	temp2[2] = roundkey[14]^roundkey[0];
 2aa:	27 2f       	mov	r18, r23
 2ac:	28 27       	eor	r18, r24
 2ae:	2b 83       	std	Y+3, r18	; 0x03
	temp2[3] = roundkey[15]^roundkey[0];
 2b0:	8f 25       	eor	r24, r15
 2b2:	8c 83       	std	Y+4, r24	; 0x04
	
	temp2[4] = temp2[0]^roundkey[4];
 2b4:	14 96       	adiw	r26, 0x04	; 4
 2b6:	4c 91       	ld	r20, X
 2b8:	14 97       	sbiw	r26, 0x04	; 4
 2ba:	49 27       	eor	r20, r25
 2bc:	4d 83       	std	Y+5, r20	; 0x05
	temp2[5] = temp2[1]^roundkey[5];
 2be:	15 96       	adiw	r26, 0x05	; 5
 2c0:	3c 91       	ld	r19, X
 2c2:	15 97       	sbiw	r26, 0x05	; 5
 2c4:	35 27       	eor	r19, r21
 2c6:	3e 83       	std	Y+6, r19	; 0x06
	temp2[6] = temp2[2]^roundkey[6];
 2c8:	16 96       	adiw	r26, 0x06	; 6
 2ca:	5c 91       	ld	r21, X
 2cc:	16 97       	sbiw	r26, 0x06	; 6
 2ce:	62 2f       	mov	r22, r18
 2d0:	65 27       	eor	r22, r21
 2d2:	6f 83       	std	Y+7, r22	; 0x07
	temp2[7] = temp2[3]^roundkey[7];
 2d4:	17 96       	adiw	r26, 0x07	; 7
 2d6:	5c 91       	ld	r21, X
 2d8:	17 97       	sbiw	r26, 0x07	; 7
 2da:	85 27       	eor	r24, r21
 2dc:	88 87       	std	Y+8, r24	; 0x08
	
	temp2[8] = temp2[4]^roundkey[8];
 2de:	18 96       	adiw	r26, 0x08	; 8
 2e0:	9c 91       	ld	r25, X
 2e2:	18 97       	sbiw	r26, 0x08	; 8
 2e4:	49 27       	eor	r20, r25
 2e6:	49 87       	std	Y+9, r20	; 0x09
	temp2[9] = temp2[5]^roundkey[9];
 2e8:	19 96       	adiw	r26, 0x09	; 9
 2ea:	9c 91       	ld	r25, X
 2ec:	19 97       	sbiw	r26, 0x09	; 9
 2ee:	39 27       	eor	r19, r25
 2f0:	3a 87       	std	Y+10, r19	; 0x0a
	temp2[10] = temp2[6]^roundkey[10];
 2f2:	1a 96       	adiw	r26, 0x0a	; 10
 2f4:	9c 91       	ld	r25, X
 2f6:	1a 97       	sbiw	r26, 0x0a	; 10
 2f8:	26 2f       	mov	r18, r22
 2fa:	29 27       	eor	r18, r25
 2fc:	2b 87       	std	Y+11, r18	; 0x0b
	temp2[11] = temp2[7]^roundkey[11];
 2fe:	1b 96       	adiw	r26, 0x0b	; 11
 300:	9c 91       	ld	r25, X
 302:	1b 97       	sbiw	r26, 0x0b	; 11
 304:	89 27       	eor	r24, r25
 306:	8c 87       	std	Y+12, r24	; 0x0c
	
	temp2[12] = temp2[8]^roundkey[12];
 308:	40 27       	eor	r20, r16
 30a:	4d 87       	std	Y+13, r20	; 0x0d
	temp2[13] = temp2[9]^roundkey[13];
 30c:	31 27       	eor	r19, r17
 30e:	3e 87       	std	Y+14, r19	; 0x0e
	temp2[14] = temp2[10]^roundkey[14];
 310:	27 27       	eor	r18, r23
 312:	2f 87       	std	Y+15, r18	; 0x0f
	temp2[15] = temp2[11]^roundkey[15];
 314:	8f 25       	eor	r24, r15
 316:	88 8b       	std	Y+16, r24	; 0x10
 318:	f5 01       	movw	r30, r10
 31a:	9e 01       	movw	r18, r28
 31c:	2f 5e       	subi	r18, 0xEF	; 239
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for(cnt_i = 0 ; cnt_i <16; cnt_i++)
	{
		roundkey[cnt_i] = temp2[cnt_i];
 320:	81 91       	ld	r24, Z+
 322:	8d 93       	st	X+, r24
	temp2[12] = temp2[8]^roundkey[12];
	temp2[13] = temp2[9]^roundkey[13];
	temp2[14] = temp2[10]^roundkey[14];
	temp2[15] = temp2[11]^roundkey[15];
	
	for(cnt_i = 0 ; cnt_i <16; cnt_i++)
 324:	e2 17       	cp	r30, r18
 326:	f3 07       	cpc	r31, r19
 328:	d9 f7       	brne	.-10     	; 0x320 <keyScheduling+0x11c>
	{
		roundkey[cnt_i] = temp2[cnt_i];
	}	
	
}
 32a:	60 96       	adiw	r28, 0x10	; 16
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	bf 90       	pop	r11
 346:	af 90       	pop	r10
 348:	08 95       	ret

0000034a <AES_encrypt>:

void AES_encrypt(u8* inp, u8* out, u8* usrkey,u8* sbox, u8* rcon)
{
 34a:	7f 92       	push	r7
 34c:	8f 92       	push	r8
 34e:	9f 92       	push	r9
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	a0 97       	sbiw	r28, 0x20	; 32
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	86 2e       	mov	r8, r22
 376:	97 2e       	mov	r9, r23
 378:	59 01       	movw	r10, r18
	u8 state[16];
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};
 37a:	fe 01       	movw	r30, r28
 37c:	71 96       	adiw	r30, 0x11	; 17
 37e:	20 e1       	ldi	r18, 0x10	; 16
 380:	df 01       	movw	r26, r30
 382:	1d 92       	st	X+, r1
 384:	2a 95       	dec	r18
 386:	e9 f7       	brne	.-6      	; 0x382 <AES_encrypt+0x38>
 388:	9e 01       	movw	r18, r28
 38a:	2f 5f       	subi	r18, 0xFF	; 255
 38c:	3f 4f       	sbci	r19, 0xFF	; 255
 38e:	79 01       	movw	r14, r18
 390:	64 2f       	mov	r22, r20
 392:	75 2f       	mov	r23, r21
 394:	9f 01       	movw	r18, r30
 396:	6f 01       	movw	r12, r30
 398:	f7 01       	movw	r30, r14

	
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
	{
		state[cnt_i] = inp[cnt_i];
 39a:	dc 01       	movw	r26, r24
 39c:	4d 91       	ld	r20, X+
 39e:	cd 01       	movw	r24, r26
 3a0:	41 93       	st	Z+, r20
		roundkey[cnt_i] = usrkey[cnt_i];
 3a2:	db 01       	movw	r26, r22
 3a4:	4d 91       	ld	r20, X+
 3a6:	bd 01       	movw	r22, r26
 3a8:	d9 01       	movw	r26, r18
 3aa:	4d 93       	st	X+, r20
 3ac:	9d 01       	movw	r18, r26
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 3ae:	ec 15       	cp	r30, r12
 3b0:	fd 05       	cpc	r31, r13
 3b2:	99 f7       	brne	.-26     	; 0x39a <AES_encrypt+0x50>
	{
		state[cnt_i] = inp[cnt_i];
		roundkey[cnt_i] = usrkey[cnt_i];
	}

	AddRoundKey(state, roundkey);
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5e       	subi	r22, 0xEF	; 239
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	ce 01       	movw	r24, r28
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	15 df       	rcall	.-470    	; 0x1ea <AddRoundKey>
	keyScheduling(roundkey,rcon, sbox,round);
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	a5 01       	movw	r20, r10
 3c4:	b8 01       	movw	r22, r16
 3c6:	ce 01       	movw	r24, r28
 3c8:	41 96       	adiw	r24, 0x11	; 17
 3ca:	1c df       	rcall	.-456    	; 0x204 <keyScheduling>
 3cc:	0f 2e       	mov	r0, r31
 3ce:	f9 e0       	ldi	r31, 0x09	; 9
 3d0:	7f 2e       	mov	r7, r31
 3d2:	f0 2d       	mov	r31, r0


	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
	{
		SubByte(state,sbox);
 3d4:	b5 01       	movw	r22, r10
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	6e de       	rcall	.-804    	; 0xb8 <SubByte>
		ShiftRow(state);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	79 de       	rcall	.-782    	; 0xd4 <ShiftRow>
		MixColumns(state);
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 de       	rcall	.-736    	; 0x108 <MixColumns>
 3e8:	be 01       	movw	r22, r28
		AddRoundKey(state, roundkey);
 3ea:	6f 5e       	subi	r22, 0xEF	; 239
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	fb de       	rcall	.-522    	; 0x1ea <AddRoundKey>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
		keyScheduling(roundkey,rcon, sbox,round);
 3f6:	a5 01       	movw	r20, r10
 3f8:	b8 01       	movw	r22, r16
 3fa:	ce 01       	movw	r24, r28
 3fc:	41 96       	adiw	r24, 0x11	; 17
 3fe:	02 df       	rcall	.-508    	; 0x204 <keyScheduling>
 400:	7a 94       	dec	r7
 402:	71 10       	cpse	r7, r1

	AddRoundKey(state, roundkey);
	keyScheduling(roundkey,rcon, sbox,round);


	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
 404:	e7 cf       	rjmp	.-50     	; 0x3d4 <AES_encrypt+0x8a>
		AddRoundKey(state, roundkey);
		keyScheduling(roundkey,rcon, sbox,round);

	}
	
	SubByte(state,sbox);
 406:	b5 01       	movw	r22, r10
 408:	ce 01       	movw	r24, r28
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	55 de       	rcall	.-854    	; 0xb8 <SubByte>
 40e:	ce 01       	movw	r24, r28
	ShiftRow(state);
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	60 de       	rcall	.-832    	; 0xd4 <ShiftRow>
 414:	be 01       	movw	r22, r28
	AddRoundKey(state, roundkey);
 416:	6f 5e       	subi	r22, 0xEF	; 239
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	e5 de       	rcall	.-566    	; 0x1ea <AddRoundKey>
 420:	e8 2d       	mov	r30, r8
 422:	f9 2d       	mov	r31, r9
 424:	d7 01       	movw	r26, r14
 426:	8d 91       	ld	r24, X+

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
 428:	7d 01       	movw	r14, r26
 42a:	81 93       	st	Z+, r24
 42c:	ac 15       	cp	r26, r12
 42e:	bd 05       	cpc	r27, r13
	
	SubByte(state,sbox);
	ShiftRow(state);
	AddRoundKey(state, roundkey);

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
 430:	c9 f7       	brne	.-14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 432:	a0 96       	adiw	r28, 0x20	; 32
 434:	0f b6       	in	r0, 0x3f	; 63
	{
		out[cnt_i] = state[cnt_i];
	}
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	bf 90       	pop	r11
 450:	af 90       	pop	r10
 452:	9f 90       	pop	r9
 454:	8f 90       	pop	r8
 456:	7f 90       	pop	r7
 458:	08 95       	ret

0000045a <main>:




int main(void)
{
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	cd 56       	subi	r28, 0x6D	; 109
 468:	d1 40       	sbci	r29, 0x01	; 1
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
	volatile u8 Rcon[13] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab};
 474:	8d e0       	ldi	r24, 0x0D	; 13
 476:	e0 e0       	ldi	r30, 0x00	; 0
 478:	f1 e0       	ldi	r31, 0x01	; 1
 47a:	de 01       	movw	r26, r28
 47c:	11 96       	adiw	r26, 0x01	; 1
 47e:	01 90       	ld	r0, Z+
 480:	0d 92       	st	X+, r0
 482:	8a 95       	dec	r24
 484:	e1 f7       	brne	.-8      	; 0x47e <main+0x24>
	volatile u8 sbox[256] = {
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	ed e0       	ldi	r30, 0x0D	; 13
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	de 01       	movw	r26, r28
 48e:	1e 96       	adiw	r26, 0x0e	; 14
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <main+0x36>
	//ShiftRow_asm(plain_txt);
	
	//MixColumns(plain_txt);
	//MixColumns_asm(plain_txt);
	
	u8* inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
 498:	80 e2       	ldi	r24, 0x20	; 32
 49a:	ed e0       	ldi	r30, 0x0D	; 13
 49c:	f2 e0       	ldi	r31, 0x02	; 2
 49e:	de 01       	movw	r26, r28
 4a0:	a2 5f       	subi	r26, 0xF2	; 242
 4a2:	be 4f       	sbci	r27, 0xFE	; 254
 4a4:	01 90       	ld	r0, Z+
 4a6:	0d 92       	st	X+, r0
 4a8:	8a 95       	dec	r24
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <main+0x4a>
	u8* userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
 4ac:	80 e2       	ldi	r24, 0x20	; 32
 4ae:	ed e2       	ldi	r30, 0x2D	; 45
 4b0:	f2 e0       	ldi	r31, 0x02	; 2
 4b2:	de 01       	movw	r26, r28
 4b4:	a2 5d       	subi	r26, 0xD2	; 210
 4b6:	be 4f       	sbci	r27, 0xFE	; 254
 4b8:	01 90       	ld	r0, Z+
 4ba:	0d 92       	st	X+, r0
 4bc:	8a 95       	dec	r24
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <main+0x5e>
	u8* out[16] = {0x00};
 4c0:	be 01       	movw	r22, r28
 4c2:	62 5b       	subi	r22, 0xB2	; 178
 4c4:	7e 4f       	sbci	r23, 0xFE	; 254
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	fb 01       	movw	r30, r22
 4ca:	11 92       	st	Z+, r1
 4cc:	8a 95       	dec	r24
 4ce:	e9 f7       	brne	.-6      	; 0x4ca <main+0x70>
		
	//AES_set_encrypt_key(userkey, AES_KEY_BIT, key,Rcon,sbox);
	AES_encrypt(inp,out,userkey,sbox,Rcon);
 4d0:	8e 01       	movw	r16, r28
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	9e 01       	movw	r18, r28
 4d8:	22 5f       	subi	r18, 0xF2	; 242
 4da:	3f 4f       	sbci	r19, 0xFF	; 255
 4dc:	ae 01       	movw	r20, r28
 4de:	42 5d       	subi	r20, 0xD2	; 210
 4e0:	5e 4f       	sbci	r21, 0xFE	; 254
 4e2:	ce 01       	movw	r24, r28
 4e4:	82 5f       	subi	r24, 0xF2	; 242
 4e6:	9e 4f       	sbci	r25, 0xFE	; 254
 4e8:	30 df       	rcall	.-416    	; 0x34a <AES_encrypt>

	
}
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	c3 59       	subi	r28, 0x93	; 147
 4f0:	de 4f       	sbci	r29, 0xFE	; 254
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
