
AES_8bit_asm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  000017d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <MixColumns_asm>:
 ;void MixColumns_asm(u8 *state);
 ;operend state <- r24 ; r25

MixColumns_asm:

	regBackupAdd
  96:	0f 92       	push	r0
  98:	1f 92       	push	r1
  9a:	2f 92       	push	r2
  9c:	3f 92       	push	r3
  9e:	4f 92       	push	r4
  a0:	5f 92       	push	r5
  a2:	6f 92       	push	r6
  a4:	7f 92       	push	r7
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
	movw r30,	r24 ; Z
  b8:	fc 01       	movw	r30, r24
	movw r28,	r24 ; Y
  ba:	ec 01       	movw	r28, r24
	ldi	 r16,	4
  bc:	04 e0       	ldi	r16, 0x04	; 4
	ldi  r17,	0x1b
  be:	1b e1       	ldi	r17, 0x1B	; 27

000000c0 <loop>:

loop:
	;2 3 1 1 
	ld r2,		Y+	;2
  c0:	29 90       	ld	r2, Y+
	ld r4,		Y+	;3
  c2:	49 90       	ld	r4, Y+
	ld r5,		Y+	;1
  c4:	59 90       	ld	r5, Y+
	ld r6,		Y+	;1
  c6:	69 90       	ld	r6, Y+
	
	mov r3,		r2
  c8:	32 2c       	mov	r3, r2
	eor r3,		r4
  ca:	34 24       	eor	r3, r4
	mov r7,		r3 ; r7 = r3
  cc:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
  ce:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
  d0:	83 2c       	mov	r8, r3
	add	r8,		r8
  d2:	88 0c       	add	r8, r8
	eor r8,		r8
  d4:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
  d6:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
  d8:	81 9e       	mul	r8, r17
	eor	r0,		r7 
  da:	07 24       	eor	r0, r7
	eor r0,		r4 
  dc:	04 24       	eor	r0, r4
	eor r0,		r5
  de:	05 24       	eor	r0, r5
	eor r0,		r6
  e0:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[0]
  e2:	01 92       	st	Z+, r0

	; 1 2 3 1 
	mov r3,		r4
  e4:	34 2c       	mov	r3, r4
	eor r3,		r5
  e6:	35 24       	eor	r3, r5
	mov r7,		r3 ; r7 = r3
  e8:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
  ea:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
  ec:	83 2c       	mov	r8, r3
	add	r8,		r8
  ee:	88 0c       	add	r8, r8
	eor r8,		r8
  f0:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
  f2:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
  f4:	81 9e       	mul	r8, r17
	eor	r0,		r7 
  f6:	07 24       	eor	r0, r7
	eor r0,		r2
  f8:	02 24       	eor	r0, r2
	eor r0,		r5
  fa:	05 24       	eor	r0, r5
	eor r0,		r6
  fc:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[1]
  fe:	01 92       	st	Z+, r0


	; 1 1 2 3 
	mov r3,		r5
 100:	35 2c       	mov	r3, r5
	eor r3,		r6
 102:	36 24       	eor	r3, r6
	mov r7,		r3 ; r7 = r3
 104:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
 106:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
 108:	83 2c       	mov	r8, r3
	add	r8,		r8
 10a:	88 0c       	add	r8, r8
	eor r8,		r8
 10c:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 10e:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 110:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 112:	07 24       	eor	r0, r7
	eor r0,		r2
 114:	02 24       	eor	r0, r2
	eor r0,		r4
 116:	04 24       	eor	r0, r4
	eor r0,		r6
 118:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[2]
 11a:	01 92       	st	Z+, r0

	; 3 1 1 2 
	mov r3,		r6
 11c:	36 2c       	mov	r3, r6
	eor r3,		r2
 11e:	32 24       	eor	r3, r2
	mov r7,		r3 ; r7 = r3
 120:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
 122:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
 124:	83 2c       	mov	r8, r3
	add	r8,		r8
 126:	88 0c       	add	r8, r8
	eor r8,		r8
 128:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 12a:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 12c:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 12e:	07 24       	eor	r0, r7
	eor r0,		r2
 130:	02 24       	eor	r0, r2
	eor r0,		r4
 132:	04 24       	eor	r0, r4
	eor r0,		r5
 134:	05 24       	eor	r0, r5
	st Z+,		r0 ; -------------------[3]
 136:	01 92       	st	Z+, r0
	dec		r16
 138:	0a 95       	dec	r16
	brne loop
 13a:	11 f6       	brne	.-124    	; 0xc0 <loop>

	regRetriveveAdd
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	bf 90       	pop	r11
 148:	af 90       	pop	r10
 14a:	9f 90       	pop	r9
 14c:	8f 90       	pop	r8
 14e:	7f 90       	pop	r7
 150:	6f 90       	pop	r6
 152:	5f 90       	pop	r5
 154:	4f 90       	pop	r4
 156:	3f 90       	pop	r3
 158:	2f 90       	pop	r2
 15a:	1f 90       	pop	r1
 15c:	0f 90       	pop	r0

 15e:	08 95       	ret

00000160 <main>:
#include <avr/io.h>
#include "AES_header.h"


int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	60 97       	sbiw	r28, 0x10	; 16
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
    u8 plain_txt[16] = {0xCB,0x67,0x1F,0x6F,0x63,0xE9,0xDA,0xF0,0x7C,0x98,0xFF,0xF5,0x3A,0xFb,0xB1,0xB6};
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	e0 e0       	ldi	r30, 0x00	; 0
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	de 01       	movw	r26, r28
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	01 90       	ld	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	8a 95       	dec	r24
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x1e>
	
	//ShiftRow(plain_txt);
	//ShiftRow_asm(plain_txt);
	
	//MixColumns(plain_txt);
	MixColumns_asm(plain_txt);
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 4b 00 	call	0x96	; 0x96 <MixColumns_asm>
	
}
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	60 96       	adiw	r28, 0x10	; 16
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
