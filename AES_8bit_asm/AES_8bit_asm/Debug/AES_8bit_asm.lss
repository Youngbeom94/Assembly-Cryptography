
AES_8bit_asm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  0000070a  0000077e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001056  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e0  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000894  00000000  00000000  000021fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d89  00000000  00000000  00003133  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	d5 d2       	rcall	.+1450   	; 0x636 <main>
  8c:	3c c3       	rjmp	.+1656   	; 0x706 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <MixColumns_asm>:
 ;void MixColumns_asm(u8 *state);
 ;operend state <- r24 ; r25

MixColumns_asm:

	regBackupAdd
  90:	0f 92       	push	r0
  92:	3f 92       	push	r3
  94:	4f 92       	push	r4
  96:	5f 92       	push	r5
  98:	6f 92       	push	r6
  9a:	7f 92       	push	r7
  9c:	8f 92       	push	r8
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	movw r30,	r24 ; Z
  aa:	fc 01       	movw	r30, r24
	movw r28,	r24 ; Y
  ac:	ec 01       	movw	r28, r24
	ldi	 r16,	4
  ae:	04 e0       	ldi	r16, 0x04	; 4
	ldi  r17,	0x1b
  b0:	1b e1       	ldi	r17, 0x1B	; 27

000000b2 <loop>:

loop:
	;2 3 1 1 
	ld r2,		Y+	;2
  b2:	29 90       	ld	r2, Y+
	ld r4,		Y+	;3
  b4:	49 90       	ld	r4, Y+
	ld r5,		Y+	;1
  b6:	59 90       	ld	r5, Y+
	ld r6,		Y+	;1
  b8:	69 90       	ld	r6, Y+
	
	mov r3,		r2
  ba:	32 2c       	mov	r3, r2
	eor r3,		r4
  bc:	34 24       	eor	r3, r4
	mov r7,		r3 ; r7 = r3
  be:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
  c0:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
  c2:	83 2c       	mov	r8, r3
	add	r8,		r8
  c4:	88 0c       	add	r8, r8
	eor r8,		r8
  c6:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
  c8:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
  ca:	81 9e       	mul	r8, r17
	eor	r0,		r7 
  cc:	07 24       	eor	r0, r7
	eor r0,		r4 
  ce:	04 24       	eor	r0, r4
	eor r0,		r5
  d0:	05 24       	eor	r0, r5
	eor r0,		r6
  d2:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[0]
  d4:	01 92       	st	Z+, r0

	; 1 2 3 1 
	mov r3,		r4
  d6:	34 2c       	mov	r3, r4
	eor r3,		r5
  d8:	35 24       	eor	r3, r5
	mov r7,		r3 ; r7 = r3
  da:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
  dc:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
  de:	83 2c       	mov	r8, r3
	add	r8,		r8
  e0:	88 0c       	add	r8, r8
	eor r8,		r8
  e2:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
  e4:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
  e6:	81 9e       	mul	r8, r17
	eor	r0,		r7 
  e8:	07 24       	eor	r0, r7
	eor r0,		r2
  ea:	02 24       	eor	r0, r2
	eor r0,		r5
  ec:	05 24       	eor	r0, r5
	eor r0,		r6
  ee:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[1]
  f0:	01 92       	st	Z+, r0


	; 1 1 2 3 
	mov r3,		r5
  f2:	35 2c       	mov	r3, r5
	eor r3,		r6
  f4:	36 24       	eor	r3, r6
	mov r7,		r3 ; r7 = r3
  f6:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
  f8:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
  fa:	83 2c       	mov	r8, r3
	add	r8,		r8
  fc:	88 0c       	add	r8, r8
	eor r8,		r8
  fe:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 100:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 102:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 104:	07 24       	eor	r0, r7
	eor r0,		r2
 106:	02 24       	eor	r0, r2
	eor r0,		r4
 108:	04 24       	eor	r0, r4
	eor r0,		r6
 10a:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[2]
 10c:	01 92       	st	Z+, r0

	; 3 1 1 2 
	mov r3,		r6
 10e:	36 2c       	mov	r3, r6
	eor r3,		r2
 110:	32 24       	eor	r3, r2
	mov r7,		r3 ; r7 = r3
 112:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
 114:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
 116:	83 2c       	mov	r8, r3
	add	r8,		r8
 118:	88 0c       	add	r8, r8
	eor r8,		r8
 11a:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 11c:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 11e:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 120:	07 24       	eor	r0, r7
	eor r0,		r2
 122:	02 24       	eor	r0, r2
	eor r0,		r4
 124:	04 24       	eor	r0, r4
	eor r0,		r5
 126:	05 24       	eor	r0, r5
	st Z+,		r0 ; -------------------[3]
 128:	01 92       	st	Z+, r0
	dec		r16
 12a:	0a 95       	dec	r16
	brne loop
 12c:	11 f6       	brne	.-124    	; 0xb2 <loop>

	regRetriveveAdd
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	8f 90       	pop	r8
 13c:	7f 90       	pop	r7
 13e:	6f 90       	pop	r6
 140:	5f 90       	pop	r5
 142:	4f 90       	pop	r4
 144:	3f 90       	pop	r3
 146:	0f 90       	pop	r0

 148:	08 95       	ret

0000014a <SubByte>:
			temp = userKey[cnt_j + (cnt_i * 4)] << ((3 - cnt_j) * 8);
			key->rd_key[start + cnt_i] += temp;
			temp = 0;
		}
	}
}
 14a:	fc 01       	movw	r30, r24
 14c:	9c 01       	movw	r18, r24
 14e:	20 5f       	subi	r18, 0xF0	; 240
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	90 81       	ld	r25, Z
 154:	db 01       	movw	r26, r22
 156:	a9 0f       	add	r26, r25
 158:	b1 1d       	adc	r27, r1
 15a:	9c 91       	ld	r25, X
 15c:	91 93       	st	Z+, r25
 15e:	e2 17       	cp	r30, r18
 160:	f3 07       	cpc	r31, r19
 162:	b9 f7       	brne	.-18     	; 0x152 <SubByte+0x8>
 164:	08 95       	ret

00000166 <ShiftRow>:
 166:	fc 01       	movw	r30, r24
 168:	85 85       	ldd	r24, Z+13	; 0x0d
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	95 87       	std	Z+13, r25	; 0x0d
 16e:	95 81       	ldd	r25, Z+5	; 0x05
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	91 85       	ldd	r25, Z+9	; 0x09
 174:	95 83       	std	Z+5, r25	; 0x05
 176:	81 87       	std	Z+9, r24	; 0x09
 178:	92 85       	ldd	r25, Z+10	; 0x0a
 17a:	86 85       	ldd	r24, Z+14	; 0x0e
 17c:	22 81       	ldd	r18, Z+2	; 0x02
 17e:	22 87       	std	Z+10, r18	; 0x0a
 180:	26 81       	ldd	r18, Z+6	; 0x06
 182:	26 87       	std	Z+14, r18	; 0x0e
 184:	92 83       	std	Z+2, r25	; 0x02
 186:	86 83       	std	Z+6, r24	; 0x06
 188:	87 81       	ldd	r24, Z+7	; 0x07
 18a:	93 81       	ldd	r25, Z+3	; 0x03
 18c:	97 83       	std	Z+7, r25	; 0x07
 18e:	97 85       	ldd	r25, Z+15	; 0x0f
 190:	93 83       	std	Z+3, r25	; 0x03
 192:	93 85       	ldd	r25, Z+11	; 0x0b
 194:	97 87       	std	Z+15, r25	; 0x0f
 196:	83 87       	std	Z+11, r24	; 0x0b
 198:	08 95       	ret

0000019a <MixColumns>:
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <MixColumns+0xc>
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <MixColumns+0xe>
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	ac 01       	movw	r20, r24
 1ae:	8c 01       	movw	r16, r24
 1b0:	00 5f       	subi	r16, 0xF0	; 240
 1b2:	1f 4f       	sbci	r17, 0xFF	; 255
 1b4:	0f 2e       	mov	r0, r31
 1b6:	fb e1       	ldi	r31, 0x1B	; 27
 1b8:	ff 2e       	mov	r15, r31
 1ba:	f0 2d       	mov	r31, r0
 1bc:	be 01       	movw	r22, r28
 1be:	6b 5f       	subi	r22, 0xFB	; 251
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	da 01       	movw	r26, r20
 1c4:	fc 91       	ld	r31, X
 1c6:	11 96       	adiw	r26, 0x01	; 1
 1c8:	3c 91       	ld	r19, X
 1ca:	11 97       	sbiw	r26, 0x01	; 1
 1cc:	ef 2f       	mov	r30, r31
 1ce:	e3 27       	eor	r30, r19
 1d0:	12 96       	adiw	r26, 0x02	; 2
 1d2:	2c 91       	ld	r18, X
 1d4:	12 97       	sbiw	r26, 0x02	; 2
 1d6:	32 27       	eor	r19, r18
 1d8:	13 96       	adiw	r26, 0x03	; 3
 1da:	9c 91       	ld	r25, X
 1dc:	8e 2f       	mov	r24, r30
 1de:	88 1f       	adc	r24, r24
 1e0:	88 27       	eor	r24, r24
 1e2:	88 1f       	adc	r24, r24
 1e4:	8f 9d       	mul	r24, r15
 1e6:	80 2d       	mov	r24, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	ae 2f       	mov	r26, r30
 1ec:	aa 0f       	add	r26, r26
 1ee:	8a 27       	eor	r24, r26
 1f0:	a3 2f       	mov	r26, r19
 1f2:	a9 27       	eor	r26, r25
 1f4:	8a 27       	eor	r24, r26
 1f6:	89 83       	std	Y+1, r24	; 0x01
 1f8:	83 2f       	mov	r24, r19
 1fa:	88 1f       	adc	r24, r24
 1fc:	88 27       	eor	r24, r24
 1fe:	88 1f       	adc	r24, r24
 200:	8f 9d       	mul	r24, r15
 202:	80 2d       	mov	r24, r0
 204:	11 24       	eor	r1, r1
 206:	33 0f       	add	r19, r19
 208:	38 27       	eor	r19, r24
 20a:	8f 2f       	mov	r24, r31
 20c:	82 27       	eor	r24, r18
 20e:	89 27       	eor	r24, r25
 210:	38 27       	eor	r19, r24
 212:	3a 83       	std	Y+2, r19	; 0x02
 214:	82 2f       	mov	r24, r18
 216:	89 27       	eor	r24, r25
 218:	38 2f       	mov	r19, r24
 21a:	33 1f       	adc	r19, r19
 21c:	33 27       	eor	r19, r19
 21e:	33 1f       	adc	r19, r19
 220:	3f 9d       	mul	r19, r15
 222:	30 2d       	mov	r19, r0
 224:	11 24       	eor	r1, r1
 226:	88 0f       	add	r24, r24
 228:	83 27       	eor	r24, r19
 22a:	3e 2f       	mov	r19, r30
 22c:	39 27       	eor	r19, r25
 22e:	83 27       	eor	r24, r19
 230:	8b 83       	std	Y+3, r24	; 0x03
 232:	9f 27       	eor	r25, r31
 234:	89 2f       	mov	r24, r25
 236:	88 1f       	adc	r24, r24
 238:	88 27       	eor	r24, r24
 23a:	88 1f       	adc	r24, r24
 23c:	8f 9d       	mul	r24, r15
 23e:	80 2d       	mov	r24, r0
 240:	11 24       	eor	r1, r1
 242:	99 0f       	add	r25, r25
 244:	98 27       	eor	r25, r24
 246:	2e 27       	eor	r18, r30
 248:	92 27       	eor	r25, r18
 24a:	9c 83       	std	Y+4, r25	; 0x04
 24c:	fe 01       	movw	r30, r28
 24e:	31 96       	adiw	r30, 0x01	; 1
 250:	da 01       	movw	r26, r20
 252:	81 91       	ld	r24, Z+
 254:	8d 93       	st	X+, r24
 256:	e6 17       	cp	r30, r22
 258:	f7 07       	cpc	r31, r23
 25a:	d9 f7       	brne	.-10     	; 0x252 <MixColumns+0xb8>
 25c:	4c 5f       	subi	r20, 0xFC	; 252
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	40 17       	cp	r20, r16
 262:	51 07       	cpc	r21, r17
 264:	09 f0       	breq	.+2      	; 0x268 <MixColumns+0xce>
 266:	ad cf       	rjmp	.-166    	; 0x1c2 <MixColumns+0x28>
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	08 95       	ret

0000027c <AddRoundKey>:

void AddRoundKey(u8 *state, u8* rdkey)
{
 27c:	db 01       	movw	r26, r22
 27e:	fc 01       	movw	r30, r24
 280:	ac 01       	movw	r20, r24
 282:	40 5f       	subi	r20, 0xF0	; 240
 284:	5f 4f       	sbci	r21, 0xFF	; 255
	int cnt_i;
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
	{
		state[cnt_i] ^= rdkey[cnt_i];
 286:	9d 91       	ld	r25, X+
 288:	20 81       	ld	r18, Z
 28a:	92 27       	eor	r25, r18
 28c:	91 93       	st	Z+, r25
}

void AddRoundKey(u8 *state, u8* rdkey)
{
	int cnt_i;
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 28e:	e4 17       	cp	r30, r20
 290:	f5 07       	cpc	r31, r21
 292:	c9 f7       	brne	.-14     	; 0x286 <AddRoundKey+0xa>
	{
		state[cnt_i] ^= rdkey[cnt_i];
	}
}
 294:	08 95       	ret

00000296 <keyScheduling>:


void keyScheduling(u8* roundkey,u8* Rcon, u8* sbox,u8* round)
{
 296:	6f 92       	push	r6
 298:	7f 92       	push	r7
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	60 97       	sbiw	r28, 0x10	; 16
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	dc 01       	movw	r26, r24
 2c2:	7a 01       	movw	r14, r20
 2c4:	89 01       	movw	r16, r18
	u8 cnt_i = 0x00;
	u8 temp2[16] = {0x00};
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	3c 01       	movw	r6, r24
 2cc:	80 e1       	ldi	r24, 0x10	; 16
 2ce:	f3 01       	movw	r30, r6
 2d0:	11 92       	st	Z+, r1
 2d2:	8a 95       	dec	r24
 2d4:	e9 f7       	brne	.-6      	; 0x2d0 <keyScheduling+0x3a>
	cnt_i = roundkey[12];
 2d6:	1c 96       	adiw	r26, 0x0c	; 12
 2d8:	ac 90       	ld	r10, X
 2da:	1c 97       	sbiw	r26, 0x0c	; 12
	temp2[12] = sbox[roundkey[13]];
 2dc:	1d 96       	adiw	r26, 0x0d	; 13
 2de:	bc 90       	ld	r11, X
 2e0:	1d 97       	sbiw	r26, 0x0d	; 13
	temp2[13] = sbox[roundkey[14]];
 2e2:	1e 96       	adiw	r26, 0x0e	; 14
 2e4:	cc 90       	ld	r12, X
 2e6:	1e 97       	sbiw	r26, 0x0e	; 14
 2e8:	ca 01       	movw	r24, r20
 2ea:	8c 0d       	add	r24, r12
 2ec:	91 1d       	adc	r25, r1
 2ee:	fc 01       	movw	r30, r24
 2f0:	40 81       	ld	r20, Z
	temp2[14] = sbox[roundkey[15]];
 2f2:	1f 96       	adiw	r26, 0x0f	; 15
 2f4:	dc 90       	ld	r13, X
 2f6:	1f 97       	sbiw	r26, 0x0f	; 15
 2f8:	c7 01       	movw	r24, r14
 2fa:	8d 0d       	add	r24, r13
 2fc:	91 1d       	adc	r25, r1
 2fe:	fc 01       	movw	r30, r24
 300:	30 81       	ld	r19, Z
	temp2[15] = sbox[cnt_i];
 302:	c7 01       	movw	r24, r14
 304:	8a 0d       	add	r24, r10
 306:	91 1d       	adc	r25, r1
 308:	fc 01       	movw	r30, r24
 30a:	90 80       	ld	r9, Z
	
	temp2[0] = temp2[12]^Rcon[*round]^roundkey[0];
 30c:	f8 01       	movw	r30, r16
 30e:	20 81       	ld	r18, Z
 310:	62 0f       	add	r22, r18
 312:	71 1d       	adc	r23, r1
 314:	fb 01       	movw	r30, r22
 316:	50 81       	ld	r21, Z
 318:	8c 91       	ld	r24, X
 31a:	58 27       	eor	r21, r24
void keyScheduling(u8* roundkey,u8* Rcon, u8* sbox,u8* round)
{
	u8 cnt_i = 0x00;
	u8 temp2[16] = {0x00};
	cnt_i = roundkey[12];
	temp2[12] = sbox[roundkey[13]];
 31c:	eb 0c       	add	r14, r11
 31e:	f1 1c       	adc	r15, r1
	temp2[13] = sbox[roundkey[14]];
	temp2[14] = sbox[roundkey[15]];
	temp2[15] = sbox[cnt_i];
	
	temp2[0] = temp2[12]^Rcon[*round]^roundkey[0];
 320:	f7 01       	movw	r30, r14
 322:	90 81       	ld	r25, Z
 324:	59 27       	eor	r21, r25
 326:	59 83       	std	Y+1, r21	; 0x01
	temp2[1] = temp2[13]^roundkey[1];
 328:	11 96       	adiw	r26, 0x01	; 1
 32a:	9c 91       	ld	r25, X
 32c:	11 97       	sbiw	r26, 0x01	; 1
 32e:	49 27       	eor	r20, r25
 330:	4a 83       	std	Y+2, r20	; 0x02
	temp2[2] = temp2[14]^roundkey[2];
 332:	12 96       	adiw	r26, 0x02	; 2
 334:	9c 91       	ld	r25, X
 336:	12 97       	sbiw	r26, 0x02	; 2
 338:	39 27       	eor	r19, r25
 33a:	3b 83       	std	Y+3, r19	; 0x03
	temp2[3] = temp2[15]^roundkey[3];
 33c:	13 96       	adiw	r26, 0x03	; 3
 33e:	8c 91       	ld	r24, X
 340:	13 97       	sbiw	r26, 0x03	; 3
 342:	89 25       	eor	r24, r9
 344:	8c 83       	std	Y+4, r24	; 0x04
	
	temp2[4] = temp2[0]^roundkey[4];
 346:	14 96       	adiw	r26, 0x04	; 4
 348:	9c 91       	ld	r25, X
 34a:	14 97       	sbiw	r26, 0x04	; 4
 34c:	e5 2e       	mov	r14, r21
 34e:	e9 26       	eor	r14, r25
 350:	ed 82       	std	Y+5, r14	; 0x05
	temp2[5] = temp2[1]^roundkey[5];
 352:	15 96       	adiw	r26, 0x05	; 5
 354:	9c 91       	ld	r25, X
 356:	15 97       	sbiw	r26, 0x05	; 5
 358:	f4 2e       	mov	r15, r20
 35a:	f9 26       	eor	r15, r25
 35c:	fe 82       	std	Y+6, r15	; 0x06
	temp2[6] = temp2[2]^roundkey[6];
 35e:	16 96       	adiw	r26, 0x06	; 6
 360:	9c 91       	ld	r25, X
 362:	16 97       	sbiw	r26, 0x06	; 6
 364:	73 2f       	mov	r23, r19
 366:	79 27       	eor	r23, r25
 368:	7f 83       	std	Y+7, r23	; 0x07
	temp2[7] = temp2[3]^roundkey[7];
 36a:	17 96       	adiw	r26, 0x07	; 7
 36c:	9c 91       	ld	r25, X
 36e:	17 97       	sbiw	r26, 0x07	; 7
 370:	68 2f       	mov	r22, r24
 372:	69 27       	eor	r22, r25
 374:	68 87       	std	Y+8, r22	; 0x08
	
	temp2[8] = temp2[4]^roundkey[8];
 376:	18 96       	adiw	r26, 0x08	; 8
 378:	9c 91       	ld	r25, X
 37a:	18 97       	sbiw	r26, 0x08	; 8
 37c:	5e 2d       	mov	r21, r14
 37e:	59 27       	eor	r21, r25
 380:	59 87       	std	Y+9, r21	; 0x09
	temp2[9] = temp2[5]^roundkey[9];
 382:	19 96       	adiw	r26, 0x09	; 9
 384:	9c 91       	ld	r25, X
 386:	19 97       	sbiw	r26, 0x09	; 9
 388:	4f 2d       	mov	r20, r15
 38a:	49 27       	eor	r20, r25
 38c:	4a 87       	std	Y+10, r20	; 0x0a
	temp2[10] = temp2[6]^roundkey[10];
 38e:	1a 96       	adiw	r26, 0x0a	; 10
 390:	9c 91       	ld	r25, X
 392:	1a 97       	sbiw	r26, 0x0a	; 10
 394:	37 2f       	mov	r19, r23
 396:	39 27       	eor	r19, r25
 398:	3b 87       	std	Y+11, r19	; 0x0b
	temp2[11] = temp2[7]^roundkey[11];
 39a:	1b 96       	adiw	r26, 0x0b	; 11
 39c:	9c 91       	ld	r25, X
 39e:	1b 97       	sbiw	r26, 0x0b	; 11
 3a0:	86 2f       	mov	r24, r22
 3a2:	89 27       	eor	r24, r25
 3a4:	8c 87       	std	Y+12, r24	; 0x0c
	
	temp2[12] = temp2[8]^roundkey[12];
 3a6:	5a 25       	eor	r21, r10
 3a8:	5d 87       	std	Y+13, r21	; 0x0d
	temp2[13] = temp2[9]^roundkey[13];
 3aa:	4b 25       	eor	r20, r11
 3ac:	4e 87       	std	Y+14, r20	; 0x0e
	temp2[14] = temp2[10]^roundkey[14];
 3ae:	3c 25       	eor	r19, r12
 3b0:	3f 87       	std	Y+15, r19	; 0x0f
	temp2[15] = temp2[11]^roundkey[15];
 3b2:	8d 25       	eor	r24, r13
 3b4:	88 8b       	std	Y+16, r24	; 0x10
	
	*round = *round + 1;
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	f8 01       	movw	r30, r16
 3ba:	20 83       	st	Z, r18
 3bc:	f3 01       	movw	r30, r6
 3be:	9e 01       	movw	r18, r28
 3c0:	2f 5e       	subi	r18, 0xEF	; 239
 3c2:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for(cnt_i = 0 ; cnt_i <16; cnt_i++)
	{
		roundkey[cnt_i] = temp2[cnt_i];
 3c4:	81 91       	ld	r24, Z+
 3c6:	8d 93       	st	X+, r24
	temp2[14] = temp2[10]^roundkey[14];
	temp2[15] = temp2[11]^roundkey[15];
	
	*round = *round + 1;
	
	for(cnt_i = 0 ; cnt_i <16; cnt_i++)
 3c8:	e2 17       	cp	r30, r18
 3ca:	f3 07       	cpc	r31, r19
 3cc:	d9 f7       	brne	.-10     	; 0x3c4 <keyScheduling+0x12e>
	{
		roundkey[cnt_i] = temp2[cnt_i];
	}	
}
 3ce:	60 96       	adiw	r28, 0x10	; 16
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	9f 90       	pop	r9
 3f0:	7f 90       	pop	r7
 3f2:	6f 90       	pop	r6
 3f4:	08 95       	ret

000003f6 <AES_encrypt>:

void AES_encrypt(u8* inp, u8* out, u8* usrkey,u8* sbox, u8* rcon)
{
 3f6:	7f 92       	push	r7
 3f8:	8f 92       	push	r8
 3fa:	9f 92       	push	r9
 3fc:	af 92       	push	r10
 3fe:	bf 92       	push	r11
 400:	cf 92       	push	r12
 402:	df 92       	push	r13
 404:	ef 92       	push	r14
 406:	ff 92       	push	r15
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	a1 97       	sbiw	r28, 0x21	; 33
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	86 2e       	mov	r8, r22
 422:	97 2e       	mov	r9, r23
 424:	59 01       	movw	r10, r18
	u8 state[16];
	u8 cnt_i;
	u8 round = 0;
 426:	19 8a       	std	Y+17, r1	; 0x11
	u8 roundkey[16] = {0x00};
 428:	de 01       	movw	r26, r28
 42a:	52 96       	adiw	r26, 0x12	; 18
 42c:	20 e1       	ldi	r18, 0x10	; 16
 42e:	fd 01       	movw	r30, r26
 430:	11 92       	st	Z+, r1
 432:	2a 95       	dec	r18
 434:	e9 f7       	brne	.-6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 436:	9e 01       	movw	r18, r28
 438:	2f 5f       	subi	r18, 0xFF	; 255
 43a:	3f 4f       	sbci	r19, 0xFF	; 255
 43c:	79 01       	movw	r14, r18
 43e:	24 2f       	mov	r18, r20
 440:	35 2f       	mov	r19, r21
 442:	bd 01       	movw	r22, r26
 444:	6e 01       	movw	r12, r28
 446:	41 e1       	ldi	r20, 0x11	; 17
 448:	c4 0e       	add	r12, r20
 44a:	d1 1c       	adc	r13, r1
 44c:	f7 01       	movw	r30, r14

	for (cnt_i = 0; cnt_i < 16; cnt_i++)
	{
		state[cnt_i] = inp[cnt_i];
 44e:	dc 01       	movw	r26, r24
 450:	4d 91       	ld	r20, X+
 452:	cd 01       	movw	r24, r26
 454:	41 93       	st	Z+, r20
		roundkey[cnt_i] = usrkey[cnt_i];
 456:	d9 01       	movw	r26, r18
 458:	4d 91       	ld	r20, X+
 45a:	9d 01       	movw	r18, r26
 45c:	db 01       	movw	r26, r22
 45e:	4d 93       	st	X+, r20
 460:	bd 01       	movw	r22, r26
	u8 state[16];
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 462:	ec 15       	cp	r30, r12
 464:	fd 05       	cpc	r31, r13
 466:	99 f7       	brne	.-26     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		state[cnt_i] = inp[cnt_i];
		roundkey[cnt_i] = usrkey[cnt_i];
	}

	AddRoundKey(state, roundkey);
 468:	be 01       	movw	r22, r28
 46a:	6e 5e       	subi	r22, 0xEE	; 238
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	ce 01       	movw	r24, r28
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	04 df       	rcall	.-504    	; 0x27c <AddRoundKey>
	keyScheduling(roundkey,rcon, sbox,&round);
 474:	9e 01       	movw	r18, r28
 476:	2f 5e       	subi	r18, 0xEF	; 239
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	a5 01       	movw	r20, r10
 47c:	b8 01       	movw	r22, r16
 47e:	ce 01       	movw	r24, r28
 480:	42 96       	adiw	r24, 0x12	; 18
 482:	09 df       	rcall	.-494    	; 0x296 <keyScheduling>
 484:	0f 2e       	mov	r0, r31
 486:	f9 e0       	ldi	r31, 0x09	; 9
 488:	7f 2e       	mov	r7, r31
 48a:	f0 2d       	mov	r31, r0

	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
	{
		SubByte(state,sbox);
 48c:	b5 01       	movw	r22, r10
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	5b de       	rcall	.-842    	; 0x14a <SubByte>
		ShiftRow(state);
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	66 de       	rcall	.-820    	; 0x166 <ShiftRow>
		MixColumns(state);
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	7d de       	rcall	.-774    	; 0x19a <MixColumns>
 4a0:	be 01       	movw	r22, r28
		AddRoundKey(state, roundkey);
 4a2:	6e 5e       	subi	r22, 0xEE	; 238
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	e8 de       	rcall	.-560    	; 0x27c <AddRoundKey>
 4ac:	9e 01       	movw	r18, r28
		keyScheduling(roundkey,rcon, sbox,&round);
 4ae:	2f 5e       	subi	r18, 0xEF	; 239
 4b0:	3f 4f       	sbci	r19, 0xFF	; 255
 4b2:	a5 01       	movw	r20, r10
 4b4:	b8 01       	movw	r22, r16
 4b6:	ce 01       	movw	r24, r28
 4b8:	42 96       	adiw	r24, 0x12	; 18
 4ba:	ed de       	rcall	.-550    	; 0x296 <keyScheduling>
 4bc:	7a 94       	dec	r7
	}

	AddRoundKey(state, roundkey);
	keyScheduling(roundkey,rcon, sbox,&round);

	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
 4be:	71 10       	cpse	r7, r1
		AddRoundKey(state, roundkey);
		keyScheduling(roundkey,rcon, sbox,&round);

	}
	
	SubByte(state,sbox);
 4c0:	e5 cf       	rjmp	.-54     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 4c2:	b5 01       	movw	r22, r10
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	40 de       	rcall	.-896    	; 0x14a <SubByte>
	ShiftRow(state);
 4ca:	ce 01       	movw	r24, r28
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	4b de       	rcall	.-874    	; 0x166 <ShiftRow>
	AddRoundKey(state, roundkey);
 4d0:	be 01       	movw	r22, r28
 4d2:	6e 5e       	subi	r22, 0xEE	; 238
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	ce 01       	movw	r24, r28
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	d0 de       	rcall	.-608    	; 0x27c <AddRoundKey>
 4dc:	e8 2d       	mov	r30, r8
 4de:	f9 2d       	mov	r31, r9
 4e0:	d7 01       	movw	r26, r14

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
 4e2:	8d 91       	ld	r24, X+
 4e4:	7d 01       	movw	r14, r26
 4e6:	81 93       	st	Z+, r24
 4e8:	ac 15       	cp	r26, r12
	
	SubByte(state,sbox);
	ShiftRow(state);
	AddRoundKey(state, roundkey);

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
 4ea:	bd 05       	cpc	r27, r13
 4ec:	c9 f7       	brne	.-14     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4ee:	a1 96       	adiw	r28, 0x21	; 33
	{
		out[cnt_i] = state[cnt_i];
	}
}
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	f8 94       	cli
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	cd bf       	out	0x3d, r28	; 61
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	9f 90       	pop	r9
 510:	8f 90       	pop	r8
 512:	7f 90       	pop	r7
 514:	08 95       	ret

00000516 <AES_encrypt_asm>:
 516:	7f 92       	push	r7

void AES_encrypt_asm(u8* inp, u8* out, u8* usrkey,u8* sbox, u8* rcon)
{
 518:	8f 92       	push	r8
 51a:	9f 92       	push	r9
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	a1 97       	sbiw	r28, 0x21	; 33
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	86 2e       	mov	r8, r22
 542:	97 2e       	mov	r9, r23
 544:	59 01       	movw	r10, r18
	u8 state[16];
	u8 cnt_i = 0;
	u8 round = 0;
 546:	19 8a       	std	Y+17, r1	; 0x11
	u8 roundkey[16] = {0x00};
 548:	de 01       	movw	r26, r28
 54a:	52 96       	adiw	r26, 0x12	; 18
 54c:	20 e1       	ldi	r18, 0x10	; 16
 54e:	fd 01       	movw	r30, r26
 550:	11 92       	st	Z+, r1
 552:	2a 95       	dec	r18
 554:	e9 f7       	brne	.-6      	; 0x550 <AES_encrypt_asm+0x3a>
 556:	9e 01       	movw	r18, r28
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	79 01       	movw	r14, r18
 55e:	24 2f       	mov	r18, r20
 560:	35 2f       	mov	r19, r21
 562:	bd 01       	movw	r22, r26
 564:	6e 01       	movw	r12, r28
 566:	41 e1       	ldi	r20, 0x11	; 17
 568:	c4 0e       	add	r12, r20
 56a:	d1 1c       	adc	r13, r1
 56c:	f7 01       	movw	r30, r14

	for (cnt_i = 0; cnt_i < 16; cnt_i++)
	{
		state[cnt_i] = inp[cnt_i];
 56e:	dc 01       	movw	r26, r24
 570:	4d 91       	ld	r20, X+
 572:	cd 01       	movw	r24, r26
 574:	41 93       	st	Z+, r20
		roundkey[cnt_i] = usrkey[cnt_i];
 576:	d9 01       	movw	r26, r18
 578:	4d 91       	ld	r20, X+
 57a:	9d 01       	movw	r18, r26
 57c:	db 01       	movw	r26, r22
 57e:	4d 93       	st	X+, r20
 580:	bd 01       	movw	r22, r26
	u8 state[16];
	u8 cnt_i = 0;
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 582:	ec 15       	cp	r30, r12
 584:	fd 05       	cpc	r31, r13
 586:	99 f7       	brne	.-26     	; 0x56e <AES_encrypt_asm+0x58>
	{
		state[cnt_i] = inp[cnt_i];
		roundkey[cnt_i] = usrkey[cnt_i];
	}

	AddRoundKey(state, roundkey);
 588:	be 01       	movw	r22, r28
 58a:	6e 5e       	subi	r22, 0xEE	; 238
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	ce 01       	movw	r24, r28
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	74 de       	rcall	.-792    	; 0x27c <AddRoundKey>
	keyScheduling(roundkey,rcon, sbox,&round);
 594:	9e 01       	movw	r18, r28
 596:	2f 5e       	subi	r18, 0xEF	; 239
 598:	3f 4f       	sbci	r19, 0xFF	; 255
 59a:	a5 01       	movw	r20, r10
 59c:	b8 01       	movw	r22, r16
 59e:	ce 01       	movw	r24, r28
 5a0:	42 96       	adiw	r24, 0x12	; 18
 5a2:	79 de       	rcall	.-782    	; 0x296 <keyScheduling>
 5a4:	0f 2e       	mov	r0, r31
 5a6:	f9 e0       	ldi	r31, 0x09	; 9
 5a8:	7f 2e       	mov	r7, r31
 5aa:	f0 2d       	mov	r31, r0

	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
	{
		SubByte(state,sbox);
 5ac:	b5 01       	movw	r22, r10
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	cb dd       	rcall	.-1130   	; 0x14a <SubByte>
		ShiftRow(state);
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	d6 dd       	rcall	.-1108   	; 0x166 <ShiftRow>
		MixColumns_asm(state);
 5ba:	ce 01       	movw	r24, r28
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	68 dd       	rcall	.-1328   	; 0x90 <MixColumns_asm>
 5c0:	be 01       	movw	r22, r28
		AddRoundKey(state, roundkey);
 5c2:	6e 5e       	subi	r22, 0xEE	; 238
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	58 de       	rcall	.-848    	; 0x27c <AddRoundKey>
 5cc:	9e 01       	movw	r18, r28
		keyScheduling(roundkey,rcon, sbox,&round);
 5ce:	2f 5e       	subi	r18, 0xEF	; 239
 5d0:	3f 4f       	sbci	r19, 0xFF	; 255
 5d2:	a5 01       	movw	r20, r10
 5d4:	b8 01       	movw	r22, r16
 5d6:	ce 01       	movw	r24, r28
 5d8:	42 96       	adiw	r24, 0x12	; 18
 5da:	5d de       	rcall	.-838    	; 0x296 <keyScheduling>
 5dc:	7a 94       	dec	r7
	}

	AddRoundKey(state, roundkey);
	keyScheduling(roundkey,rcon, sbox,&round);

	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
 5de:	71 10       	cpse	r7, r1
		AddRoundKey(state, roundkey);
		keyScheduling(roundkey,rcon, sbox,&round);

	}
	
	SubByte(state,sbox);
 5e0:	e5 cf       	rjmp	.-54     	; 0x5ac <AES_encrypt_asm+0x96>
 5e2:	b5 01       	movw	r22, r10
 5e4:	ce 01       	movw	r24, r28
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	b0 dd       	rcall	.-1184   	; 0x14a <SubByte>
	ShiftRow(state);
 5ea:	ce 01       	movw	r24, r28
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	bb dd       	rcall	.-1162   	; 0x166 <ShiftRow>
	AddRoundKey(state, roundkey);
 5f0:	be 01       	movw	r22, r28
 5f2:	6e 5e       	subi	r22, 0xEE	; 238
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	ce 01       	movw	r24, r28
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	40 de       	rcall	.-896    	; 0x27c <AddRoundKey>
 5fc:	e8 2d       	mov	r30, r8
 5fe:	f9 2d       	mov	r31, r9
 600:	d7 01       	movw	r26, r14

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
 602:	8d 91       	ld	r24, X+
 604:	7d 01       	movw	r14, r26
 606:	81 93       	st	Z+, r24
 608:	ac 15       	cp	r26, r12
	
	SubByte(state,sbox);
	ShiftRow(state);
	AddRoundKey(state, roundkey);

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
 60a:	bd 05       	cpc	r27, r13
 60c:	c9 f7       	brne	.-14     	; 0x600 <AES_encrypt_asm+0xea>
 60e:	a1 96       	adiw	r28, 0x21	; 33
	{
		out[cnt_i] = state[cnt_i];
	}
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	f8 94       	cli
 614:	de bf       	out	0x3e, r29	; 62
 616:	0f be       	out	0x3f, r0	; 63
 618:	cd bf       	out	0x3d, r28	; 61
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	0f 91       	pop	r16
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	df 90       	pop	r13
 628:	cf 90       	pop	r12
 62a:	bf 90       	pop	r11
 62c:	af 90       	pop	r10
 62e:	9f 90       	pop	r9
 630:	8f 90       	pop	r8
 632:	7f 90       	pop	r7
 634:	08 95       	ret

00000636 <main>:

#include <avr/io.h>
#include "AES_header.h"

int main(void)
{
 636:	ef 92       	push	r14
 638:	ff 92       	push	r15
 63a:	0f 93       	push	r16
 63c:	1f 93       	push	r17
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	cd 53       	subi	r28, 0x3D	; 61
 648:	d1 40       	sbci	r29, 0x01	; 1
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
	volatile u8 Rcon[13] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab};
 654:	8d e0       	ldi	r24, 0x0D	; 13
 656:	e0 e0       	ldi	r30, 0x00	; 0
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	de 01       	movw	r26, r28
 65c:	11 96       	adiw	r26, 0x01	; 1
 65e:	01 90       	ld	r0, Z+
 660:	0d 92       	st	X+, r0
 662:	8a 95       	dec	r24
 664:	e1 f7       	brne	.-8      	; 0x65e <main+0x28>
	volatile u8 sbox[256] = {
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	ed e0       	ldi	r30, 0x0D	; 13
 66a:	f1 e0       	ldi	r31, 0x01	; 1
 66c:	de 01       	movw	r26, r28
 66e:	1e 96       	adiw	r26, 0x0e	; 14
 670:	01 90       	ld	r0, Z+
 672:	0d 92       	st	X+, r0
 674:	8a 95       	dec	r24
 676:	e1 f7       	brne	.-8      	; 0x670 <main+0x3a>
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
	
	 u8 inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
 678:	80 e1       	ldi	r24, 0x10	; 16
 67a:	ed e0       	ldi	r30, 0x0D	; 13
 67c:	f2 e0       	ldi	r31, 0x02	; 2
 67e:	de 01       	movw	r26, r28
 680:	a2 5f       	subi	r26, 0xF2	; 242
 682:	be 4f       	sbci	r27, 0xFE	; 254
 684:	01 90       	ld	r0, Z+
 686:	0d 92       	st	X+, r0
 688:	8a 95       	dec	r24
 68a:	e1 f7       	brne	.-8      	; 0x684 <main+0x4e>
	 u8 userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
 68c:	80 e1       	ldi	r24, 0x10	; 16
 68e:	ed e1       	ldi	r30, 0x1D	; 29
 690:	f2 e0       	ldi	r31, 0x02	; 2
 692:	de 01       	movw	r26, r28
 694:	a2 5e       	subi	r26, 0xE2	; 226
 696:	be 4f       	sbci	r27, 0xFE	; 254
 698:	01 90       	ld	r0, Z+
 69a:	0d 92       	st	X+, r0
 69c:	8a 95       	dec	r24
 69e:	e1 f7       	brne	.-8      	; 0x698 <main+0x62>
	 u8 out[16] = {0x00};
 6a0:	7e 01       	movw	r14, r28
 6a2:	82 ed       	ldi	r24, 0xD2	; 210
 6a4:	e8 1a       	sub	r14, r24
 6a6:	8e ef       	ldi	r24, 0xFE	; 254
 6a8:	f8 0a       	sbc	r15, r24
 6aa:	80 e1       	ldi	r24, 0x10	; 16
 6ac:	f7 01       	movw	r30, r14
 6ae:	11 92       	st	Z+, r1
 6b0:	8a 95       	dec	r24
 6b2:	e9 f7       	brne	.-6      	; 0x6ae <main+0x78>
	
	//MixColumns(plain_txt);
	//MixColumns_asm(plain_txt);

		
	AES_encrypt(inp,out,userkey,sbox,Rcon);
 6b4:	8e 01       	movw	r16, r28
 6b6:	0f 5f       	subi	r16, 0xFF	; 255
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	9e 01       	movw	r18, r28
 6bc:	22 5f       	subi	r18, 0xF2	; 242
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	ae 01       	movw	r20, r28
 6c2:	42 5e       	subi	r20, 0xE2	; 226
 6c4:	5e 4f       	sbci	r21, 0xFE	; 254
 6c6:	b7 01       	movw	r22, r14
 6c8:	ce 01       	movw	r24, r28
 6ca:	82 5f       	subi	r24, 0xF2	; 242
 6cc:	9e 4f       	sbci	r25, 0xFE	; 254
 6ce:	93 de       	rcall	.-730    	; 0x3f6 <AES_encrypt>
	
	AES_encrypt_asm(inp,out,userkey,sbox,Rcon);
 6d0:	9e 01       	movw	r18, r28
 6d2:	22 5f       	subi	r18, 0xF2	; 242
 6d4:	3f 4f       	sbci	r19, 0xFF	; 255
 6d6:	ae 01       	movw	r20, r28
 6d8:	42 5e       	subi	r20, 0xE2	; 226
 6da:	5e 4f       	sbci	r21, 0xFE	; 254
 6dc:	b7 01       	movw	r22, r14
 6de:	ce 01       	movw	r24, r28
 6e0:	82 5f       	subi	r24, 0xF2	; 242
 6e2:	9e 4f       	sbci	r25, 0xFE	; 254
 6e4:	18 df       	rcall	.-464    	; 0x516 <AES_encrypt_asm>


	
}
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	c3 5c       	subi	r28, 0xC3	; 195
 6ec:	de 4f       	sbci	r29, 0xFE	; 254
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	ff 90       	pop	r15
 702:	ef 90       	pop	r14
 704:	08 95       	ret

00000706 <_exit>:
 706:	f8 94       	cli

00000708 <__stop_program>:
 708:	ff cf       	rjmp	.-2      	; 0x708 <__stop_program>
