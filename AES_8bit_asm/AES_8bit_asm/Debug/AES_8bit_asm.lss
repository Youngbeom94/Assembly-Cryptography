
AES_8bit_asm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000f0e  0000100e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00001090  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000140a  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094a  00000000  00000000  00002572  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001114  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  00003fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000644  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00004e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7f c1       	rjmp	.+766    	; 0x300 <__ctors_end>
   2:	00 00       	nop
   4:	92 c1       	rjmp	.+804    	; 0x32a <__bad_interrupt>
   6:	00 00       	nop
   8:	90 c1       	rjmp	.+800    	; 0x32a <__bad_interrupt>
   a:	00 00       	nop
   c:	8e c1       	rjmp	.+796    	; 0x32a <__bad_interrupt>
   e:	00 00       	nop
  10:	8c c1       	rjmp	.+792    	; 0x32a <__bad_interrupt>
  12:	00 00       	nop
  14:	8a c1       	rjmp	.+788    	; 0x32a <__bad_interrupt>
  16:	00 00       	nop
  18:	88 c1       	rjmp	.+784    	; 0x32a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	86 c1       	rjmp	.+780    	; 0x32a <__bad_interrupt>
  1e:	00 00       	nop
  20:	84 c1       	rjmp	.+776    	; 0x32a <__bad_interrupt>
  22:	00 00       	nop
  24:	82 c1       	rjmp	.+772    	; 0x32a <__bad_interrupt>
  26:	00 00       	nop
  28:	80 c1       	rjmp	.+768    	; 0x32a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7e c1       	rjmp	.+764    	; 0x32a <__bad_interrupt>
  2e:	00 00       	nop
  30:	7c c1       	rjmp	.+760    	; 0x32a <__bad_interrupt>
  32:	00 00       	nop
  34:	7a c1       	rjmp	.+756    	; 0x32a <__bad_interrupt>
  36:	00 00       	nop
  38:	78 c1       	rjmp	.+752    	; 0x32a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	76 c1       	rjmp	.+748    	; 0x32a <__bad_interrupt>
  3e:	00 00       	nop
  40:	74 c1       	rjmp	.+744    	; 0x32a <__bad_interrupt>
  42:	00 00       	nop
  44:	72 c1       	rjmp	.+740    	; 0x32a <__bad_interrupt>
  46:	00 00       	nop
  48:	70 c1       	rjmp	.+736    	; 0x32a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6e c1       	rjmp	.+732    	; 0x32a <__bad_interrupt>
  4e:	00 00       	nop
  50:	6c c1       	rjmp	.+728    	; 0x32a <__bad_interrupt>
  52:	00 00       	nop
  54:	6a c1       	rjmp	.+724    	; 0x32a <__bad_interrupt>
  56:	00 00       	nop
  58:	68 c1       	rjmp	.+720    	; 0x32a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	66 c1       	rjmp	.+716    	; 0x32a <__bad_interrupt>
  5e:	00 00       	nop
  60:	64 c1       	rjmp	.+712    	; 0x32a <__bad_interrupt>
  62:	00 00       	nop
  64:	62 c1       	rjmp	.+708    	; 0x32a <__bad_interrupt>
  66:	00 00       	nop
  68:	60 c1       	rjmp	.+704    	; 0x32a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5e c1       	rjmp	.+700    	; 0x32a <__bad_interrupt>
  6e:	00 00       	nop
  70:	5c c1       	rjmp	.+696    	; 0x32a <__bad_interrupt>
  72:	00 00       	nop
  74:	5a c1       	rjmp	.+692    	; 0x32a <__bad_interrupt>
  76:	00 00       	nop
  78:	58 c1       	rjmp	.+688    	; 0x32a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	56 c1       	rjmp	.+684    	; 0x32a <__bad_interrupt>
  7e:	00 00       	nop
  80:	54 c1       	rjmp	.+680    	; 0x32a <__bad_interrupt>
  82:	00 00       	nop
  84:	52 c1       	rjmp	.+676    	; 0x32a <__bad_interrupt>
  86:	00 00       	nop
  88:	50 c1       	rjmp	.+672    	; 0x32a <__bad_interrupt>
	...

0000008c <__trampolines_end>:
	...

00000100 <Rcon>:
 100:	01 02 04 08 10 20 40 80 1b 36 6c d8 ab 00 00 00     ..... @..6l.....
	...

00000200 <sbox>:
 200:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
 210:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
 220:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
 230:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
 240:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
 250:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
 260:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
 270:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
 280:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
 290:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
 2a0:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
 2b0:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
 2c0:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
 2d0:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
 2e0:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
 2f0:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000300 <__ctors_end>:
 300:	11 24       	eor	r1, r1
 302:	1f be       	out	0x3f, r1	; 63
 304:	cf ef       	ldi	r28, 0xFF	; 255
 306:	d0 e1       	ldi	r29, 0x10	; 16
 308:	de bf       	out	0x3e, r29	; 62
 30a:	cd bf       	out	0x3d, r28	; 61

0000030c <__do_copy_data>:
 30c:	11 e0       	ldi	r17, 0x01	; 1
 30e:	a0 e0       	ldi	r26, 0x00	; 0
 310:	b1 e0       	ldi	r27, 0x01	; 1
 312:	ee e0       	ldi	r30, 0x0E	; 14
 314:	ff e0       	ldi	r31, 0x0F	; 15
 316:	00 e0       	ldi	r16, 0x00	; 0
 318:	0b bf       	out	0x3b, r16	; 59
 31a:	02 c0       	rjmp	.+4      	; 0x320 <__do_copy_data+0x14>
 31c:	07 90       	elpm	r0, Z+
 31e:	0d 92       	st	X+, r0
 320:	a0 31       	cpi	r26, 0x10	; 16
 322:	b1 07       	cpc	r27, r17
 324:	d9 f7       	brne	.-10     	; 0x31c <__do_copy_data+0x10>
 326:	93 d5       	rcall	.+2854   	; 0xe4e <main>
 328:	f0 c5       	rjmp	.+3040   	; 0xf0a <_exit>

0000032a <__bad_interrupt>:
 32a:	6a ce       	rjmp	.-812    	; 0x0 <__vectors>

0000032c <MixColumns_asm>:
 .endm

 .global MixColumns_asm
MixColumns_asm:

	regBackupAdd
 32c:	0f 92       	push	r0
 32e:	3f 92       	push	r3
 330:	4f 92       	push	r4
 332:	5f 92       	push	r5
 334:	6f 92       	push	r6
 336:	7f 92       	push	r7
 338:	8f 92       	push	r8
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	movw r30,	r24 ; Z
 346:	fc 01       	movw	r30, r24
	movw r28,	r24 ; Y
 348:	ec 01       	movw	r28, r24
	ldi	 r16,	4
 34a:	04 e0       	ldi	r16, 0x04	; 4
	ldi  r17,	0x1b
 34c:	1b e1       	ldi	r17, 0x1B	; 27

0000034e <loop>:

loop:
	;2 3 1 1 
	ld r2,		Y+	;2
 34e:	29 90       	ld	r2, Y+
	ld r4,		Y+	;3
 350:	49 90       	ld	r4, Y+
	ld r5,		Y+	;1
 352:	59 90       	ld	r5, Y+
	ld r6,		Y+	;1
 354:	69 90       	ld	r6, Y+
	
	mov r3,		r2
 356:	32 2c       	mov	r3, r2
	eor r3,		r4
 358:	34 24       	eor	r3, r4
	mov r7,		r3 ; r7 = r3
 35a:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
 35c:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
 35e:	83 2c       	mov	r8, r3
	add	r8,		r8
 360:	88 0c       	add	r8, r8
	eor r8,		r8
 362:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 364:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 366:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 368:	07 24       	eor	r0, r7
	eor r0,		r4 
 36a:	04 24       	eor	r0, r4
	eor r0,		r5
 36c:	05 24       	eor	r0, r5
	eor r0,		r6
 36e:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[0]
 370:	01 92       	st	Z+, r0

	; 1 2 3 1 
	mov r3,		r4
 372:	34 2c       	mov	r3, r4
	eor r3,		r5
 374:	35 24       	eor	r3, r5
	mov r7,		r3 ; r7 = r3
 376:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
 378:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
 37a:	83 2c       	mov	r8, r3
	add	r8,		r8
 37c:	88 0c       	add	r8, r8
	eor r8,		r8
 37e:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 380:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 382:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 384:	07 24       	eor	r0, r7
	eor r0,		r2
 386:	02 24       	eor	r0, r2
	eor r0,		r5
 388:	05 24       	eor	r0, r5
	eor r0,		r6
 38a:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[1]
 38c:	01 92       	st	Z+, r0


	; 1 1 2 3 
	mov r3,		r5
 38e:	35 2c       	mov	r3, r5
	eor r3,		r6
 390:	36 24       	eor	r3, r6
	mov r7,		r3 ; r7 = r3
 392:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
 394:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
 396:	83 2c       	mov	r8, r3
	add	r8,		r8
 398:	88 0c       	add	r8, r8
	eor r8,		r8
 39a:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 39c:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 39e:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 3a0:	07 24       	eor	r0, r7
	eor r0,		r2
 3a2:	02 24       	eor	r0, r2
	eor r0,		r4
 3a4:	04 24       	eor	r0, r4
	eor r0,		r6
 3a6:	06 24       	eor	r0, r6
	st Z+,		r0 ; -------------------[2]
 3a8:	01 92       	st	Z+, r0

	; 3 1 1 2 
	mov r3,		r6
 3aa:	36 2c       	mov	r3, r6
	eor r3,		r2
 3ac:	32 24       	eor	r3, r2
	mov r7,		r3 ; r7 = r3
 3ae:	73 2c       	mov	r7, r3
	add r7,		r7 ; <<1
 3b0:	77 0c       	add	r7, r7
	mov r8,		r3 ; r8 = r3
 3b2:	83 2c       	mov	r8, r3
	add	r8,		r8
 3b4:	88 0c       	add	r8, r8
	eor r8,		r8
 3b6:	88 24       	eor	r8, r8
	adc	r8,		r8 ; >>7 & 0x01 
 3b8:	88 1c       	adc	r8, r8
	mul	r8,		r17 ; (x>>7)&1 * 0x1b
 3ba:	81 9e       	mul	r8, r17
	eor	r0,		r7 
 3bc:	07 24       	eor	r0, r7
	eor r0,		r2
 3be:	02 24       	eor	r0, r2
	eor r0,		r4
 3c0:	04 24       	eor	r0, r4
	eor r0,		r5
 3c2:	05 24       	eor	r0, r5
	st Z+,		r0 ; -------------------[3]
 3c4:	01 92       	st	Z+, r0
	dec		r16
 3c6:	0a 95       	dec	r16
	brne loop
 3c8:	11 f6       	brne	.-124    	; 0x34e <loop>

	regRetriveveAdd
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	8f 90       	pop	r8
 3d8:	7f 90       	pop	r7
 3da:	6f 90       	pop	r6
 3dc:	5f 90       	pop	r5
 3de:	4f 90       	pop	r4
 3e0:	3f 90       	pop	r3
 3e2:	0f 90       	pop	r0

 3e4:	08 95       	ret

000003e6 <SubByte>:
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
		}
	}
}
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	29 97       	sbiw	r28, 0x09	; 9
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
 3fa:	9f 83       	std	Y+7, r25	; 0x07
 3fc:	8e 83       	std	Y+6, r24	; 0x06
 3fe:	79 87       	std	Y+9, r23	; 0x09
 400:	68 87       	std	Y+8, r22	; 0x08
 402:	1a 82       	std	Y+2, r1	; 0x02
 404:	19 82       	std	Y+1, r1	; 0x01
 406:	25 c0       	rjmp	.+74     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	88 2f       	mov	r24, r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	2e 81       	ldd	r18, Y+6	; 0x06
 410:	3f 81       	ldd	r19, Y+7	; 0x07
 412:	82 0f       	add	r24, r18
 414:	93 1f       	adc	r25, r19
 416:	fc 01       	movw	r30, r24
 418:	80 81       	ld	r24, Z
 41a:	8a 83       	std	Y+2, r24	; 0x02
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	88 2f       	mov	r24, r24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	2e 81       	ldd	r18, Y+6	; 0x06
 424:	3f 81       	ldd	r19, Y+7	; 0x07
 426:	82 0f       	add	r24, r18
 428:	93 1f       	adc	r25, r19
 42a:	2a 81       	ldd	r18, Y+2	; 0x02
 42c:	22 2f       	mov	r18, r18
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	48 85       	ldd	r20, Y+8	; 0x08
 432:	59 85       	ldd	r21, Y+9	; 0x09
 434:	24 0f       	add	r18, r20
 436:	35 1f       	adc	r19, r21
 438:	3c 83       	std	Y+4, r19	; 0x04
 43a:	2b 83       	std	Y+3, r18	; 0x03
 43c:	2b 81       	ldd	r18, Y+3	; 0x03
 43e:	3c 81       	ldd	r19, Y+4	; 0x04
 440:	f9 01       	movw	r30, r18
 442:	24 91       	lpm	r18, Z
 444:	2d 83       	std	Y+5, r18	; 0x05
 446:	2d 81       	ldd	r18, Y+5	; 0x05
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	80 31       	cpi	r24, 0x10	; 16
 456:	c0 f2       	brcs	.-80     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 458:	00 00       	nop
 45a:	29 96       	adiw	r28, 0x09	; 9
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <ShiftRow>:
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 d0       	rcall	.+0      	; 0x472 <ShiftRow+0x6>
 472:	00 d0       	rcall	.+0      	; 0x474 <ShiftRow+0x8>
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	9c 83       	std	Y+4, r25	; 0x04
 47a:	8b 83       	std	Y+3, r24	; 0x03
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	9c 81       	ldd	r25, Y+4	; 0x04
 480:	fc 01       	movw	r30, r24
 482:	85 85       	ldd	r24, Z+13	; 0x0d
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	9c 81       	ldd	r25, Y+4	; 0x04
 48a:	0d 96       	adiw	r24, 0x0d	; 13
 48c:	2b 81       	ldd	r18, Y+3	; 0x03
 48e:	3c 81       	ldd	r19, Y+4	; 0x04
 490:	f9 01       	movw	r30, r18
 492:	21 81       	ldd	r18, Z+1	; 0x01
 494:	fc 01       	movw	r30, r24
 496:	20 83       	st	Z, r18
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	9c 81       	ldd	r25, Y+4	; 0x04
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	2b 81       	ldd	r18, Y+3	; 0x03
 4a0:	3c 81       	ldd	r19, Y+4	; 0x04
 4a2:	f9 01       	movw	r30, r18
 4a4:	25 81       	ldd	r18, Z+5	; 0x05
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	05 96       	adiw	r24, 0x05	; 5
 4b0:	2b 81       	ldd	r18, Y+3	; 0x03
 4b2:	3c 81       	ldd	r19, Y+4	; 0x04
 4b4:	f9 01       	movw	r30, r18
 4b6:	21 85       	ldd	r18, Z+9	; 0x09
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
 4bc:	8b 81       	ldd	r24, Y+3	; 0x03
 4be:	9c 81       	ldd	r25, Y+4	; 0x04
 4c0:	09 96       	adiw	r24, 0x09	; 9
 4c2:	29 81       	ldd	r18, Y+1	; 0x01
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	9c 81       	ldd	r25, Y+4	; 0x04
 4cc:	fc 01       	movw	r30, r24
 4ce:	82 85       	ldd	r24, Z+10	; 0x0a
 4d0:	89 83       	std	Y+1, r24	; 0x01
 4d2:	8b 81       	ldd	r24, Y+3	; 0x03
 4d4:	9c 81       	ldd	r25, Y+4	; 0x04
 4d6:	fc 01       	movw	r30, r24
 4d8:	86 85       	ldd	r24, Z+14	; 0x0e
 4da:	8a 83       	std	Y+2, r24	; 0x02
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	9c 81       	ldd	r25, Y+4	; 0x04
 4e0:	0a 96       	adiw	r24, 0x0a	; 10
 4e2:	2b 81       	ldd	r18, Y+3	; 0x03
 4e4:	3c 81       	ldd	r19, Y+4	; 0x04
 4e6:	f9 01       	movw	r30, r18
 4e8:	22 81       	ldd	r18, Z+2	; 0x02
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	9c 81       	ldd	r25, Y+4	; 0x04
 4f2:	0e 96       	adiw	r24, 0x0e	; 14
 4f4:	2b 81       	ldd	r18, Y+3	; 0x03
 4f6:	3c 81       	ldd	r19, Y+4	; 0x04
 4f8:	f9 01       	movw	r30, r18
 4fa:	26 81       	ldd	r18, Z+6	; 0x06
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	02 96       	adiw	r24, 0x02	; 2
 506:	29 81       	ldd	r18, Y+1	; 0x01
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	9c 81       	ldd	r25, Y+4	; 0x04
 510:	06 96       	adiw	r24, 0x06	; 6
 512:	2a 81       	ldd	r18, Y+2	; 0x02
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	9c 81       	ldd	r25, Y+4	; 0x04
 51c:	fc 01       	movw	r30, r24
 51e:	87 81       	ldd	r24, Z+7	; 0x07
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	9c 81       	ldd	r25, Y+4	; 0x04
 526:	07 96       	adiw	r24, 0x07	; 7
 528:	2b 81       	ldd	r18, Y+3	; 0x03
 52a:	3c 81       	ldd	r19, Y+4	; 0x04
 52c:	f9 01       	movw	r30, r18
 52e:	23 81       	ldd	r18, Z+3	; 0x03
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	9c 81       	ldd	r25, Y+4	; 0x04
 538:	03 96       	adiw	r24, 0x03	; 3
 53a:	2b 81       	ldd	r18, Y+3	; 0x03
 53c:	3c 81       	ldd	r19, Y+4	; 0x04
 53e:	f9 01       	movw	r30, r18
 540:	27 85       	ldd	r18, Z+15	; 0x0f
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	9c 81       	ldd	r25, Y+4	; 0x04
 54a:	0f 96       	adiw	r24, 0x0f	; 15
 54c:	2b 81       	ldd	r18, Y+3	; 0x03
 54e:	3c 81       	ldd	r19, Y+4	; 0x04
 550:	f9 01       	movw	r30, r18
 552:	23 85       	ldd	r18, Z+11	; 0x0b
 554:	fc 01       	movw	r30, r24
 556:	20 83       	st	Z, r18
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	9c 81       	ldd	r25, Y+4	; 0x04
 55c:	0b 96       	adiw	r24, 0x0b	; 11
 55e:	29 81       	ldd	r18, Y+1	; 0x01
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
 564:	00 00       	nop
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <AddRoundKey>:
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <AddRoundKey+0x6>
 57a:	00 d0       	rcall	.+0      	; 0x57c <AddRoundKey+0x8>
 57c:	00 d0       	rcall	.+0      	; 0x57e <AddRoundKey+0xa>
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	9c 83       	std	Y+4, r25	; 0x04
 584:	8b 83       	std	Y+3, r24	; 0x03
 586:	7e 83       	std	Y+6, r23	; 0x06
 588:	6d 83       	std	Y+5, r22	; 0x05
 58a:	1a 82       	std	Y+2, r1	; 0x02
 58c:	19 82       	std	Y+1, r1	; 0x01
 58e:	1e c0       	rjmp	.+60     	; 0x5cc <AddRoundKey+0x58>
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	9a 81       	ldd	r25, Y+2	; 0x02
 594:	2b 81       	ldd	r18, Y+3	; 0x03
 596:	3c 81       	ldd	r19, Y+4	; 0x04
 598:	82 0f       	add	r24, r18
 59a:	93 1f       	adc	r25, r19
 59c:	29 81       	ldd	r18, Y+1	; 0x01
 59e:	3a 81       	ldd	r19, Y+2	; 0x02
 5a0:	4b 81       	ldd	r20, Y+3	; 0x03
 5a2:	5c 81       	ldd	r21, Y+4	; 0x04
 5a4:	24 0f       	add	r18, r20
 5a6:	35 1f       	adc	r19, r21
 5a8:	f9 01       	movw	r30, r18
 5aa:	60 81       	ld	r22, Z
 5ac:	29 81       	ldd	r18, Y+1	; 0x01
 5ae:	3a 81       	ldd	r19, Y+2	; 0x02
 5b0:	4d 81       	ldd	r20, Y+5	; 0x05
 5b2:	5e 81       	ldd	r21, Y+6	; 0x06
 5b4:	24 0f       	add	r18, r20
 5b6:	35 1f       	adc	r19, r21
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	26 27       	eor	r18, r22
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
 5c4:	9a 81       	ldd	r25, Y+2	; 0x02
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	9a 83       	std	Y+2, r25	; 0x02
 5ca:	89 83       	std	Y+1, r24	; 0x01
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	9a 81       	ldd	r25, Y+2	; 0x02
 5d0:	40 97       	sbiw	r24, 0x10	; 16
 5d2:	f4 f2       	brlt	.-68     	; 0x590 <AddRoundKey+0x1c>
 5d4:	00 00       	nop
 5d6:	26 96       	adiw	r28, 0x06	; 6
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <keyScheduling>:
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	ab 97       	sbiw	r28, 0x2b	; 43
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	f8 94       	cli
 5f6:	de bf       	out	0x3e, r29	; 62
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	cd bf       	out	0x3d, r28	; 61
 5fc:	9d a3       	std	Y+37, r25	; 0x25
 5fe:	8c a3       	std	Y+36, r24	; 0x24
 600:	7f a3       	std	Y+39, r23	; 0x27
 602:	6e a3       	std	Y+38, r22	; 0x26
 604:	59 a7       	std	Y+41, r21	; 0x29
 606:	48 a7       	std	Y+40, r20	; 0x28
 608:	3b a7       	std	Y+43, r19	; 0x2b
 60a:	2a a7       	std	Y+42, r18	; 0x2a
 60c:	18 8a       	std	Y+16, r1	; 0x10
 60e:	20 e1       	ldi	r18, 0x10	; 16
 610:	ce 01       	movw	r24, r28
 612:	41 96       	adiw	r24, 0x11	; 17
 614:	fc 01       	movw	r30, r24
 616:	32 2f       	mov	r19, r18
 618:	11 92       	st	Z+, r1
 61a:	3a 95       	dec	r19
 61c:	e9 f7       	brne	.-6      	; 0x618 <keyScheduling+0x30>
 61e:	8c a1       	ldd	r24, Y+36	; 0x24
 620:	9d a1       	ldd	r25, Y+37	; 0x25
 622:	fc 01       	movw	r30, r24
 624:	84 85       	ldd	r24, Z+12	; 0x0c
 626:	88 8b       	std	Y+16, r24	; 0x10
 628:	8c a1       	ldd	r24, Y+36	; 0x24
 62a:	9d a1       	ldd	r25, Y+37	; 0x25
 62c:	fc 01       	movw	r30, r24
 62e:	85 85       	ldd	r24, Z+13	; 0x0d
 630:	89 a3       	std	Y+33, r24	; 0x21
 632:	8c a1       	ldd	r24, Y+36	; 0x24
 634:	9d a1       	ldd	r25, Y+37	; 0x25
 636:	fc 01       	movw	r30, r24
 638:	86 85       	ldd	r24, Z+14	; 0x0e
 63a:	8a a3       	std	Y+34, r24	; 0x22
 63c:	8c a1       	ldd	r24, Y+36	; 0x24
 63e:	9d a1       	ldd	r25, Y+37	; 0x25
 640:	fc 01       	movw	r30, r24
 642:	87 85       	ldd	r24, Z+15	; 0x0f
 644:	8b a3       	std	Y+35, r24	; 0x23
 646:	89 a1       	ldd	r24, Y+33	; 0x21
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	28 a5       	ldd	r18, Y+40	; 0x28
 64e:	39 a5       	ldd	r19, Y+41	; 0x29
 650:	82 0f       	add	r24, r18
 652:	93 1f       	adc	r25, r19
 654:	9a 83       	std	Y+2, r25	; 0x02
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	9a 81       	ldd	r25, Y+2	; 0x02
 65c:	fc 01       	movw	r30, r24
 65e:	84 91       	lpm	r24, Z
 660:	8b 83       	std	Y+3, r24	; 0x03
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	8d 8f       	std	Y+29, r24	; 0x1d
 666:	8a a1       	ldd	r24, Y+34	; 0x22
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	28 a5       	ldd	r18, Y+40	; 0x28
 66e:	39 a5       	ldd	r19, Y+41	; 0x29
 670:	82 0f       	add	r24, r18
 672:	93 1f       	adc	r25, r19
 674:	9d 83       	std	Y+5, r25	; 0x05
 676:	8c 83       	std	Y+4, r24	; 0x04
 678:	8c 81       	ldd	r24, Y+4	; 0x04
 67a:	9d 81       	ldd	r25, Y+5	; 0x05
 67c:	fc 01       	movw	r30, r24
 67e:	84 91       	lpm	r24, Z
 680:	8e 83       	std	Y+6, r24	; 0x06
 682:	8e 81       	ldd	r24, Y+6	; 0x06
 684:	8e 8f       	std	Y+30, r24	; 0x1e
 686:	8b a1       	ldd	r24, Y+35	; 0x23
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	28 a5       	ldd	r18, Y+40	; 0x28
 68e:	39 a5       	ldd	r19, Y+41	; 0x29
 690:	82 0f       	add	r24, r18
 692:	93 1f       	adc	r25, r19
 694:	98 87       	std	Y+8, r25	; 0x08
 696:	8f 83       	std	Y+7, r24	; 0x07
 698:	8f 81       	ldd	r24, Y+7	; 0x07
 69a:	98 85       	ldd	r25, Y+8	; 0x08
 69c:	fc 01       	movw	r30, r24
 69e:	84 91       	lpm	r24, Z
 6a0:	89 87       	std	Y+9, r24	; 0x09
 6a2:	89 85       	ldd	r24, Y+9	; 0x09
 6a4:	8f 8f       	std	Y+31, r24	; 0x1f
 6a6:	88 89       	ldd	r24, Y+16	; 0x10
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	28 a5       	ldd	r18, Y+40	; 0x28
 6ae:	39 a5       	ldd	r19, Y+41	; 0x29
 6b0:	82 0f       	add	r24, r18
 6b2:	93 1f       	adc	r25, r19
 6b4:	9b 87       	std	Y+11, r25	; 0x0b
 6b6:	8a 87       	std	Y+10, r24	; 0x0a
 6b8:	8a 85       	ldd	r24, Y+10	; 0x0a
 6ba:	9b 85       	ldd	r25, Y+11	; 0x0b
 6bc:	fc 01       	movw	r30, r24
 6be:	84 91       	lpm	r24, Z
 6c0:	8c 87       	std	Y+12, r24	; 0x0c
 6c2:	8c 85       	ldd	r24, Y+12	; 0x0c
 6c4:	88 a3       	std	Y+32, r24	; 0x20
 6c6:	8a a5       	ldd	r24, Y+42	; 0x2a
 6c8:	9b a5       	ldd	r25, Y+43	; 0x2b
 6ca:	fc 01       	movw	r30, r24
 6cc:	80 81       	ld	r24, Z
 6ce:	89 a3       	std	Y+33, r24	; 0x21
 6d0:	89 a1       	ldd	r24, Y+33	; 0x21
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	2e a1       	ldd	r18, Y+38	; 0x26
 6d8:	3f a1       	ldd	r19, Y+39	; 0x27
 6da:	82 0f       	add	r24, r18
 6dc:	93 1f       	adc	r25, r19
 6de:	9e 87       	std	Y+14, r25	; 0x0e
 6e0:	8d 87       	std	Y+13, r24	; 0x0d
 6e2:	8d 85       	ldd	r24, Y+13	; 0x0d
 6e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 6e6:	fc 01       	movw	r30, r24
 6e8:	84 91       	lpm	r24, Z
 6ea:	8f 87       	std	Y+15, r24	; 0x0f
 6ec:	8f 85       	ldd	r24, Y+15	; 0x0f
 6ee:	88 8b       	std	Y+16, r24	; 0x10
 6f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
 6f2:	88 89       	ldd	r24, Y+16	; 0x10
 6f4:	29 2f       	mov	r18, r25
 6f6:	28 27       	eor	r18, r24
 6f8:	8c a1       	ldd	r24, Y+36	; 0x24
 6fa:	9d a1       	ldd	r25, Y+37	; 0x25
 6fc:	fc 01       	movw	r30, r24
 6fe:	80 81       	ld	r24, Z
 700:	82 27       	eor	r24, r18
 702:	89 8b       	std	Y+17, r24	; 0x11
 704:	2e 8d       	ldd	r18, Y+30	; 0x1e
 706:	8c a1       	ldd	r24, Y+36	; 0x24
 708:	9d a1       	ldd	r25, Y+37	; 0x25
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	fc 01       	movw	r30, r24
 70e:	80 81       	ld	r24, Z
 710:	82 27       	eor	r24, r18
 712:	8a 8b       	std	Y+18, r24	; 0x12
 714:	2f 8d       	ldd	r18, Y+31	; 0x1f
 716:	8c a1       	ldd	r24, Y+36	; 0x24
 718:	9d a1       	ldd	r25, Y+37	; 0x25
 71a:	02 96       	adiw	r24, 0x02	; 2
 71c:	fc 01       	movw	r30, r24
 71e:	80 81       	ld	r24, Z
 720:	82 27       	eor	r24, r18
 722:	8b 8b       	std	Y+19, r24	; 0x13
 724:	28 a1       	ldd	r18, Y+32	; 0x20
 726:	8c a1       	ldd	r24, Y+36	; 0x24
 728:	9d a1       	ldd	r25, Y+37	; 0x25
 72a:	03 96       	adiw	r24, 0x03	; 3
 72c:	fc 01       	movw	r30, r24
 72e:	80 81       	ld	r24, Z
 730:	82 27       	eor	r24, r18
 732:	8c 8b       	std	Y+20, r24	; 0x14
 734:	29 89       	ldd	r18, Y+17	; 0x11
 736:	8c a1       	ldd	r24, Y+36	; 0x24
 738:	9d a1       	ldd	r25, Y+37	; 0x25
 73a:	04 96       	adiw	r24, 0x04	; 4
 73c:	fc 01       	movw	r30, r24
 73e:	80 81       	ld	r24, Z
 740:	82 27       	eor	r24, r18
 742:	8d 8b       	std	Y+21, r24	; 0x15
 744:	2a 89       	ldd	r18, Y+18	; 0x12
 746:	8c a1       	ldd	r24, Y+36	; 0x24
 748:	9d a1       	ldd	r25, Y+37	; 0x25
 74a:	05 96       	adiw	r24, 0x05	; 5
 74c:	fc 01       	movw	r30, r24
 74e:	80 81       	ld	r24, Z
 750:	82 27       	eor	r24, r18
 752:	8e 8b       	std	Y+22, r24	; 0x16
 754:	2b 89       	ldd	r18, Y+19	; 0x13
 756:	8c a1       	ldd	r24, Y+36	; 0x24
 758:	9d a1       	ldd	r25, Y+37	; 0x25
 75a:	06 96       	adiw	r24, 0x06	; 6
 75c:	fc 01       	movw	r30, r24
 75e:	80 81       	ld	r24, Z
 760:	82 27       	eor	r24, r18
 762:	8f 8b       	std	Y+23, r24	; 0x17
 764:	2c 89       	ldd	r18, Y+20	; 0x14
 766:	8c a1       	ldd	r24, Y+36	; 0x24
 768:	9d a1       	ldd	r25, Y+37	; 0x25
 76a:	07 96       	adiw	r24, 0x07	; 7
 76c:	fc 01       	movw	r30, r24
 76e:	80 81       	ld	r24, Z
 770:	82 27       	eor	r24, r18
 772:	88 8f       	std	Y+24, r24	; 0x18
 774:	2d 89       	ldd	r18, Y+21	; 0x15
 776:	8c a1       	ldd	r24, Y+36	; 0x24
 778:	9d a1       	ldd	r25, Y+37	; 0x25
 77a:	08 96       	adiw	r24, 0x08	; 8
 77c:	fc 01       	movw	r30, r24
 77e:	80 81       	ld	r24, Z
 780:	82 27       	eor	r24, r18
 782:	89 8f       	std	Y+25, r24	; 0x19
 784:	2e 89       	ldd	r18, Y+22	; 0x16
 786:	8c a1       	ldd	r24, Y+36	; 0x24
 788:	9d a1       	ldd	r25, Y+37	; 0x25
 78a:	09 96       	adiw	r24, 0x09	; 9
 78c:	fc 01       	movw	r30, r24
 78e:	80 81       	ld	r24, Z
 790:	82 27       	eor	r24, r18
 792:	8a 8f       	std	Y+26, r24	; 0x1a
 794:	2f 89       	ldd	r18, Y+23	; 0x17
 796:	8c a1       	ldd	r24, Y+36	; 0x24
 798:	9d a1       	ldd	r25, Y+37	; 0x25
 79a:	0a 96       	adiw	r24, 0x0a	; 10
 79c:	fc 01       	movw	r30, r24
 79e:	80 81       	ld	r24, Z
 7a0:	82 27       	eor	r24, r18
 7a2:	8b 8f       	std	Y+27, r24	; 0x1b
 7a4:	28 8d       	ldd	r18, Y+24	; 0x18
 7a6:	8c a1       	ldd	r24, Y+36	; 0x24
 7a8:	9d a1       	ldd	r25, Y+37	; 0x25
 7aa:	0b 96       	adiw	r24, 0x0b	; 11
 7ac:	fc 01       	movw	r30, r24
 7ae:	80 81       	ld	r24, Z
 7b0:	82 27       	eor	r24, r18
 7b2:	8c 8f       	std	Y+28, r24	; 0x1c
 7b4:	29 8d       	ldd	r18, Y+25	; 0x19
 7b6:	8c a1       	ldd	r24, Y+36	; 0x24
 7b8:	9d a1       	ldd	r25, Y+37	; 0x25
 7ba:	0c 96       	adiw	r24, 0x0c	; 12
 7bc:	fc 01       	movw	r30, r24
 7be:	80 81       	ld	r24, Z
 7c0:	82 27       	eor	r24, r18
 7c2:	8d 8f       	std	Y+29, r24	; 0x1d
 7c4:	2a 8d       	ldd	r18, Y+26	; 0x1a
 7c6:	8c a1       	ldd	r24, Y+36	; 0x24
 7c8:	9d a1       	ldd	r25, Y+37	; 0x25
 7ca:	0d 96       	adiw	r24, 0x0d	; 13
 7cc:	fc 01       	movw	r30, r24
 7ce:	80 81       	ld	r24, Z
 7d0:	82 27       	eor	r24, r18
 7d2:	8e 8f       	std	Y+30, r24	; 0x1e
 7d4:	2b 8d       	ldd	r18, Y+27	; 0x1b
 7d6:	8c a1       	ldd	r24, Y+36	; 0x24
 7d8:	9d a1       	ldd	r25, Y+37	; 0x25
 7da:	0e 96       	adiw	r24, 0x0e	; 14
 7dc:	fc 01       	movw	r30, r24
 7de:	80 81       	ld	r24, Z
 7e0:	82 27       	eor	r24, r18
 7e2:	8f 8f       	std	Y+31, r24	; 0x1f
 7e4:	2c 8d       	ldd	r18, Y+28	; 0x1c
 7e6:	8c a1       	ldd	r24, Y+36	; 0x24
 7e8:	9d a1       	ldd	r25, Y+37	; 0x25
 7ea:	0f 96       	adiw	r24, 0x0f	; 15
 7ec:	fc 01       	movw	r30, r24
 7ee:	80 81       	ld	r24, Z
 7f0:	82 27       	eor	r24, r18
 7f2:	88 a3       	std	Y+32, r24	; 0x20
 7f4:	8a a5       	ldd	r24, Y+42	; 0x2a
 7f6:	9b a5       	ldd	r25, Y+43	; 0x2b
 7f8:	fc 01       	movw	r30, r24
 7fa:	80 81       	ld	r24, Z
 7fc:	21 e0       	ldi	r18, 0x01	; 1
 7fe:	28 0f       	add	r18, r24
 800:	8a a5       	ldd	r24, Y+42	; 0x2a
 802:	9b a5       	ldd	r25, Y+43	; 0x2b
 804:	fc 01       	movw	r30, r24
 806:	20 83       	st	Z, r18
 808:	18 8a       	std	Y+16, r1	; 0x10
 80a:	16 c0       	rjmp	.+44     	; 0x838 <keyScheduling+0x250>
 80c:	88 89       	ldd	r24, Y+16	; 0x10
 80e:	88 2f       	mov	r24, r24
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	2c a1       	ldd	r18, Y+36	; 0x24
 814:	3d a1       	ldd	r19, Y+37	; 0x25
 816:	82 0f       	add	r24, r18
 818:	93 1f       	adc	r25, r19
 81a:	28 89       	ldd	r18, Y+16	; 0x10
 81c:	22 2f       	mov	r18, r18
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	ae 01       	movw	r20, r28
 822:	4f 5e       	subi	r20, 0xEF	; 239
 824:	5f 4f       	sbci	r21, 0xFF	; 255
 826:	24 0f       	add	r18, r20
 828:	35 1f       	adc	r19, r21
 82a:	f9 01       	movw	r30, r18
 82c:	20 81       	ld	r18, Z
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
 832:	88 89       	ldd	r24, Y+16	; 0x10
 834:	8f 5f       	subi	r24, 0xFF	; 255
 836:	88 8b       	std	Y+16, r24	; 0x10
 838:	88 89       	ldd	r24, Y+16	; 0x10
 83a:	80 31       	cpi	r24, 0x10	; 16
 83c:	38 f3       	brcs	.-50     	; 0x80c <keyScheduling+0x224>
 83e:	00 00       	nop
 840:	ab 96       	adiw	r28, 0x2b	; 43
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	f8 94       	cli
 846:	de bf       	out	0x3e, r29	; 62
 848:	0f be       	out	0x3f, r0	; 63
 84a:	cd bf       	out	0x3d, r28	; 61
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	08 95       	ret

00000852 <AES_encrypt_asm>:
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	cd b7       	in	r28, 0x3d	; 61
 85c:	de b7       	in	r29, 0x3e	; 62
 85e:	ac 97       	sbiw	r28, 0x2c	; 44
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	f8 94       	cli
 864:	de bf       	out	0x3e, r29	; 62
 866:	0f be       	out	0x3f, r0	; 63
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	9c a3       	std	Y+36, r25	; 0x24
 86c:	8b a3       	std	Y+35, r24	; 0x23
 86e:	7e a3       	std	Y+38, r23	; 0x26
 870:	6d a3       	std	Y+37, r22	; 0x25
 872:	58 a7       	std	Y+40, r21	; 0x28
 874:	4f a3       	std	Y+39, r20	; 0x27
 876:	3a a7       	std	Y+42, r19	; 0x2a
 878:	29 a7       	std	Y+41, r18	; 0x29
 87a:	1c a7       	std	Y+44, r17	; 0x2c
 87c:	0b a7       	std	Y+43, r16	; 0x2b
 87e:	19 82       	std	Y+1, r1	; 0x01
 880:	1a 8a       	std	Y+18, r1	; 0x12
 882:	20 e1       	ldi	r18, 0x10	; 16
 884:	ce 01       	movw	r24, r28
 886:	43 96       	adiw	r24, 0x13	; 19
 888:	fc 01       	movw	r30, r24
 88a:	32 2f       	mov	r19, r18
 88c:	11 92       	st	Z+, r1
 88e:	3a 95       	dec	r19
 890:	e9 f7       	brne	.-6      	; 0x88c <AES_encrypt_asm+0x3a>
 892:	19 82       	std	Y+1, r1	; 0x01
 894:	29 c0       	rjmp	.+82     	; 0x8e8 <AES_encrypt_asm+0x96>
 896:	89 81       	ldd	r24, Y+1	; 0x01
 898:	88 2f       	mov	r24, r24
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	29 81       	ldd	r18, Y+1	; 0x01
 89e:	22 2f       	mov	r18, r18
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	4b a1       	ldd	r20, Y+35	; 0x23
 8a4:	5c a1       	ldd	r21, Y+36	; 0x24
 8a6:	24 0f       	add	r18, r20
 8a8:	35 1f       	adc	r19, r21
 8aa:	f9 01       	movw	r30, r18
 8ac:	40 81       	ld	r20, Z
 8ae:	9e 01       	movw	r18, r28
 8b0:	2e 5f       	subi	r18, 0xFE	; 254
 8b2:	3f 4f       	sbci	r19, 0xFF	; 255
 8b4:	82 0f       	add	r24, r18
 8b6:	93 1f       	adc	r25, r19
 8b8:	fc 01       	movw	r30, r24
 8ba:	40 83       	st	Z, r20
 8bc:	89 81       	ldd	r24, Y+1	; 0x01
 8be:	88 2f       	mov	r24, r24
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	29 81       	ldd	r18, Y+1	; 0x01
 8c4:	22 2f       	mov	r18, r18
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	4f a1       	ldd	r20, Y+39	; 0x27
 8ca:	58 a5       	ldd	r21, Y+40	; 0x28
 8cc:	24 0f       	add	r18, r20
 8ce:	35 1f       	adc	r19, r21
 8d0:	f9 01       	movw	r30, r18
 8d2:	40 81       	ld	r20, Z
 8d4:	9e 01       	movw	r18, r28
 8d6:	2d 5e       	subi	r18, 0xED	; 237
 8d8:	3f 4f       	sbci	r19, 0xFF	; 255
 8da:	82 0f       	add	r24, r18
 8dc:	93 1f       	adc	r25, r19
 8de:	fc 01       	movw	r30, r24
 8e0:	40 83       	st	Z, r20
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	8f 5f       	subi	r24, 0xFF	; 255
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
 8ea:	80 31       	cpi	r24, 0x10	; 16
 8ec:	a0 f2       	brcs	.-88     	; 0x896 <AES_encrypt_asm+0x44>
 8ee:	9e 01       	movw	r18, r28
 8f0:	2d 5e       	subi	r18, 0xED	; 237
 8f2:	3f 4f       	sbci	r19, 0xFF	; 255
 8f4:	ce 01       	movw	r24, r28
 8f6:	02 96       	adiw	r24, 0x02	; 2
 8f8:	b9 01       	movw	r22, r18
 8fa:	3c de       	rcall	.-904    	; 0x574 <AddRoundKey>
 8fc:	9e 01       	movw	r18, r28
 8fe:	2e 5e       	subi	r18, 0xEE	; 238
 900:	3f 4f       	sbci	r19, 0xFF	; 255
 902:	49 a5       	ldd	r20, Y+41	; 0x29
 904:	5a a5       	ldd	r21, Y+42	; 0x2a
 906:	6b a5       	ldd	r22, Y+43	; 0x2b
 908:	7c a5       	ldd	r23, Y+44	; 0x2c
 90a:	ce 01       	movw	r24, r28
 90c:	43 96       	adiw	r24, 0x13	; 19
 90e:	6c de       	rcall	.-808    	; 0x5e8 <keyScheduling>
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	89 83       	std	Y+1, r24	; 0x01
 914:	20 c0       	rjmp	.+64     	; 0x956 <AES_encrypt_asm+0x104>
 916:	29 a5       	ldd	r18, Y+41	; 0x29
 918:	3a a5       	ldd	r19, Y+42	; 0x2a
 91a:	ce 01       	movw	r24, r28
 91c:	02 96       	adiw	r24, 0x02	; 2
 91e:	b9 01       	movw	r22, r18
 920:	62 dd       	rcall	.-1340   	; 0x3e6 <SubByte>
 922:	ce 01       	movw	r24, r28
 924:	02 96       	adiw	r24, 0x02	; 2
 926:	a2 dd       	rcall	.-1212   	; 0x46c <ShiftRow>
 928:	ce 01       	movw	r24, r28
 92a:	02 96       	adiw	r24, 0x02	; 2
 92c:	ff dc       	rcall	.-1538   	; 0x32c <MixColumns_asm>
 92e:	9e 01       	movw	r18, r28
 930:	2d 5e       	subi	r18, 0xED	; 237
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	ce 01       	movw	r24, r28
 936:	02 96       	adiw	r24, 0x02	; 2
 938:	b9 01       	movw	r22, r18
 93a:	1c de       	rcall	.-968    	; 0x574 <AddRoundKey>
 93c:	9e 01       	movw	r18, r28
 93e:	2e 5e       	subi	r18, 0xEE	; 238
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	49 a5       	ldd	r20, Y+41	; 0x29
 944:	5a a5       	ldd	r21, Y+42	; 0x2a
 946:	6b a5       	ldd	r22, Y+43	; 0x2b
 948:	7c a5       	ldd	r23, Y+44	; 0x2c
 94a:	ce 01       	movw	r24, r28
 94c:	43 96       	adiw	r24, 0x13	; 19
 94e:	4c de       	rcall	.-872    	; 0x5e8 <keyScheduling>
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	8f 5f       	subi	r24, 0xFF	; 255
 954:	89 83       	std	Y+1, r24	; 0x01
 956:	89 81       	ldd	r24, Y+1	; 0x01
 958:	8a 30       	cpi	r24, 0x0A	; 10
 95a:	e8 f2       	brcs	.-70     	; 0x916 <AES_encrypt_asm+0xc4>
 95c:	29 a5       	ldd	r18, Y+41	; 0x29
 95e:	3a a5       	ldd	r19, Y+42	; 0x2a
 960:	ce 01       	movw	r24, r28
 962:	02 96       	adiw	r24, 0x02	; 2
 964:	b9 01       	movw	r22, r18
 966:	3f dd       	rcall	.-1410   	; 0x3e6 <SubByte>
 968:	ce 01       	movw	r24, r28
 96a:	02 96       	adiw	r24, 0x02	; 2
 96c:	7f dd       	rcall	.-1282   	; 0x46c <ShiftRow>
 96e:	9e 01       	movw	r18, r28
 970:	2d 5e       	subi	r18, 0xED	; 237
 972:	3f 4f       	sbci	r19, 0xFF	; 255
 974:	ce 01       	movw	r24, r28
 976:	02 96       	adiw	r24, 0x02	; 2
 978:	b9 01       	movw	r22, r18
 97a:	fc dd       	rcall	.-1032   	; 0x574 <AddRoundKey>
 97c:	19 82       	std	Y+1, r1	; 0x01
 97e:	16 c0       	rjmp	.+44     	; 0x9ac <AES_encrypt_asm+0x15a>
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	88 2f       	mov	r24, r24
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	2d a1       	ldd	r18, Y+37	; 0x25
 988:	3e a1       	ldd	r19, Y+38	; 0x26
 98a:	82 0f       	add	r24, r18
 98c:	93 1f       	adc	r25, r19
 98e:	29 81       	ldd	r18, Y+1	; 0x01
 990:	22 2f       	mov	r18, r18
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	ae 01       	movw	r20, r28
 996:	4e 5f       	subi	r20, 0xFE	; 254
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	24 0f       	add	r18, r20
 99c:	35 1f       	adc	r19, r21
 99e:	f9 01       	movw	r30, r18
 9a0:	20 81       	ld	r18, Z
 9a2:	fc 01       	movw	r30, r24
 9a4:	20 83       	st	Z, r18
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	8f 5f       	subi	r24, 0xFF	; 255
 9aa:	89 83       	std	Y+1, r24	; 0x01
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	80 31       	cpi	r24, 0x10	; 16
 9b0:	38 f3       	brcs	.-50     	; 0x980 <AES_encrypt_asm+0x12e>
 9b2:	00 00       	nop
 9b4:	ac 96       	adiw	r28, 0x2c	; 44
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	1f 91       	pop	r17
 9c6:	0f 91       	pop	r16
 9c8:	08 95       	ret

000009ca <reset_count>:
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <reset_count+0x6>
 9d0:	1f 92       	push	r1
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
 9d6:	9b 83       	std	Y+3, r25	; 0x03
 9d8:	8a 83       	std	Y+2, r24	; 0x02
 9da:	19 82       	std	Y+1, r1	; 0x01
 9dc:	19 82       	std	Y+1, r1	; 0x01
 9de:	0c c0       	rjmp	.+24     	; 0x9f8 <reset_count+0x2e>
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	88 2f       	mov	r24, r24
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	2a 81       	ldd	r18, Y+2	; 0x02
 9e8:	3b 81       	ldd	r19, Y+3	; 0x03
 9ea:	82 0f       	add	r24, r18
 9ec:	93 1f       	adc	r25, r19
 9ee:	fc 01       	movw	r30, r24
 9f0:	10 82       	st	Z, r1
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	8f 5f       	subi	r24, 0xFF	; 255
 9f6:	89 83       	std	Y+1, r24	; 0x01
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
 9fa:	80 31       	cpi	r24, 0x10	; 16
 9fc:	88 f3       	brcs	.-30     	; 0x9e0 <reset_count+0x16>
 9fe:	00 00       	nop
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	0f 90       	pop	r0
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <Count_Addition>:

void Count_Addition(u8 *count) //Count 배열에서 값을 1증가시키는 함수
{
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	a6 97       	sbiw	r28, 0x26	; 38
 a16:	0f b6       	in	r0, 0x3f	; 63
 a18:	f8 94       	cli
 a1a:	de bf       	out	0x3e, r29	; 62
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	cd bf       	out	0x3d, r28	; 61
 a20:	9e a3       	std	Y+38, r25	; 0x26
 a22:	8d a3       	std	Y+37, r24	; 0x25
	int cnt_i, carry = 0;           //맨처음 Carry 값은 0
 a24:	1c 82       	std	Y+4, r1	; 0x04
 a26:	1b 82       	std	Y+3, r1	; 0x03
	u8 out[16] = {0x00}; // 최종배열
 a28:	20 e1       	ldi	r18, 0x10	; 16
 a2a:	ce 01       	movw	r24, r28
 a2c:	05 96       	adiw	r24, 0x05	; 5
 a2e:	fc 01       	movw	r30, r24
 a30:	32 2f       	mov	r19, r18
 a32:	11 92       	st	Z+, r1
 a34:	3a 95       	dec	r19
 a36:	e9 f7       	brne	.-6      	; 0xa32 <Count_Addition+0x26>
	u8 one[16] = {0x00}; // 0x01을 의미하는 배열
 a38:	20 e1       	ldi	r18, 0x10	; 16
 a3a:	ce 01       	movw	r24, r28
 a3c:	45 96       	adiw	r24, 0x15	; 21
 a3e:	fc 01       	movw	r30, r24
 a40:	32 2f       	mov	r19, r18
 a42:	11 92       	st	Z+, r1
 a44:	3a 95       	dec	r19
 a46:	e9 f7       	brne	.-6      	; 0xa42 <Count_Addition+0x36>
	one[15] = 0x01;
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	8c a3       	std	Y+36, r24	; 0x24

	for (cnt_i = 15; cnt_i >= 0; cnt_i--)
 a4c:	8f e0       	ldi	r24, 0x0F	; 15
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	9a 83       	std	Y+2, r25	; 0x02
 a52:	89 83       	std	Y+1, r24	; 0x01
 a54:	3e c0       	rjmp	.+124    	; 0xad2 <Count_Addition+0xc6>
	{
		out[cnt_i] = count[cnt_i] + one[cnt_i] + carry; // 마지막 배열 끼리 순차적으로 더해주면서 carry를 계산한다.
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	9a 81       	ldd	r25, Y+2	; 0x02
 a5a:	2d a1       	ldd	r18, Y+37	; 0x25
 a5c:	3e a1       	ldd	r19, Y+38	; 0x26
 a5e:	82 0f       	add	r24, r18
 a60:	93 1f       	adc	r25, r19
 a62:	fc 01       	movw	r30, r24
 a64:	40 81       	ld	r20, Z
 a66:	9e 01       	movw	r18, r28
 a68:	2b 5e       	subi	r18, 0xEB	; 235
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
 a6c:	89 81       	ldd	r24, Y+1	; 0x01
 a6e:	9a 81       	ldd	r25, Y+2	; 0x02
 a70:	82 0f       	add	r24, r18
 a72:	93 1f       	adc	r25, r19
 a74:	fc 01       	movw	r30, r24
 a76:	80 81       	ld	r24, Z
 a78:	94 2f       	mov	r25, r20
 a7a:	98 0f       	add	r25, r24
 a7c:	8b 81       	ldd	r24, Y+3	; 0x03
 a7e:	49 2f       	mov	r20, r25
 a80:	48 0f       	add	r20, r24
 a82:	9e 01       	movw	r18, r28
 a84:	2b 5f       	subi	r18, 0xFB	; 251
 a86:	3f 4f       	sbci	r19, 0xFF	; 255
 a88:	89 81       	ldd	r24, Y+1	; 0x01
 a8a:	9a 81       	ldd	r25, Y+2	; 0x02
 a8c:	82 0f       	add	r24, r18
 a8e:	93 1f       	adc	r25, r19
 a90:	fc 01       	movw	r30, r24
 a92:	40 83       	st	Z, r20
		//만약 out의 결과값의 count값보다 작은 경우 carry가 발생했다. 만약 0xffffffff..인 경우 1을 더해주면 자동적으로 0x00상태로 돌아간다
		if (out[cnt_i] < count[cnt_i])
 a94:	9e 01       	movw	r18, r28
 a96:	2b 5f       	subi	r18, 0xFB	; 251
 a98:	3f 4f       	sbci	r19, 0xFF	; 255
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	9a 81       	ldd	r25, Y+2	; 0x02
 a9e:	82 0f       	add	r24, r18
 aa0:	93 1f       	adc	r25, r19
 aa2:	fc 01       	movw	r30, r24
 aa4:	40 81       	ld	r20, Z
 aa6:	89 81       	ldd	r24, Y+1	; 0x01
 aa8:	9a 81       	ldd	r25, Y+2	; 0x02
 aaa:	2d a1       	ldd	r18, Y+37	; 0x25
 aac:	3e a1       	ldd	r19, Y+38	; 0x26
 aae:	82 0f       	add	r24, r18
 ab0:	93 1f       	adc	r25, r19
 ab2:	fc 01       	movw	r30, r24
 ab4:	80 81       	ld	r24, Z
 ab6:	48 17       	cp	r20, r24
 ab8:	28 f4       	brcc	.+10     	; 0xac4 <Count_Addition+0xb8>
		carry = 1;
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	9c 83       	std	Y+4, r25	; 0x04
 ac0:	8b 83       	std	Y+3, r24	; 0x03
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <Count_Addition+0xbc>
		else
		{
			carry = 0;
 ac4:	1c 82       	std	Y+4, r1	; 0x04
 ac6:	1b 82       	std	Y+3, r1	; 0x03
	int cnt_i, carry = 0;           //맨처음 Carry 값은 0
	u8 out[16] = {0x00}; // 최종배열
	u8 one[16] = {0x00}; // 0x01을 의미하는 배열
	one[15] = 0x01;

	for (cnt_i = 15; cnt_i >= 0; cnt_i--)
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
 aca:	9a 81       	ldd	r25, Y+2	; 0x02
 acc:	01 97       	sbiw	r24, 0x01	; 1
 ace:	9a 83       	std	Y+2, r25	; 0x02
 ad0:	89 83       	std	Y+1, r24	; 0x01
 ad2:	89 81       	ldd	r24, Y+1	; 0x01
 ad4:	9a 81       	ldd	r25, Y+2	; 0x02
 ad6:	99 23       	and	r25, r25
 ad8:	0c f0       	brlt	.+2      	; 0xadc <Count_Addition+0xd0>
 ada:	bd cf       	rjmp	.-134    	; 0xa56 <Count_Addition+0x4a>
		else
		{
			carry = 0;
		}
	}
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 adc:	1a 82       	std	Y+2, r1	; 0x02
 ade:	19 82       	std	Y+1, r1	; 0x01
 ae0:	16 c0       	rjmp	.+44     	; 0xb0e <Count_Addition+0x102>
	{
		count[cnt_i] = out[cnt_i];
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
 ae4:	9a 81       	ldd	r25, Y+2	; 0x02
 ae6:	2d a1       	ldd	r18, Y+37	; 0x25
 ae8:	3e a1       	ldd	r19, Y+38	; 0x26
 aea:	82 0f       	add	r24, r18
 aec:	93 1f       	adc	r25, r19
 aee:	ae 01       	movw	r20, r28
 af0:	4b 5f       	subi	r20, 0xFB	; 251
 af2:	5f 4f       	sbci	r21, 0xFF	; 255
 af4:	29 81       	ldd	r18, Y+1	; 0x01
 af6:	3a 81       	ldd	r19, Y+2	; 0x02
 af8:	24 0f       	add	r18, r20
 afa:	35 1f       	adc	r19, r21
 afc:	f9 01       	movw	r30, r18
 afe:	20 81       	ld	r18, Z
 b00:	fc 01       	movw	r30, r24
 b02:	20 83       	st	Z, r18
		else
		{
			carry = 0;
		}
	}
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 b04:	89 81       	ldd	r24, Y+1	; 0x01
 b06:	9a 81       	ldd	r25, Y+2	; 0x02
 b08:	01 96       	adiw	r24, 0x01	; 1
 b0a:	9a 83       	std	Y+2, r25	; 0x02
 b0c:	89 83       	std	Y+1, r24	; 0x01
 b0e:	89 81       	ldd	r24, Y+1	; 0x01
 b10:	9a 81       	ldd	r25, Y+2	; 0x02
 b12:	40 97       	sbiw	r24, 0x10	; 16
 b14:	34 f3       	brlt	.-52     	; 0xae2 <Count_Addition+0xd6>
	{
		count[cnt_i] = out[cnt_i];
	}
}
 b16:	00 00       	nop
 b18:	a6 96       	adiw	r28, 0x26	; 38
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	f8 94       	cli
 b1e:	de bf       	out	0x3e, r29	; 62
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	cd bf       	out	0x3d, r28	; 61
 b24:	df 91       	pop	r29
 b26:	cf 91       	pop	r28
 b28:	08 95       	ret

00000b2a <CRYPTO_ctr128_encrypt>:

void CRYPTO_ctr128_encrypt(u8* inp, u8* out, u8 len, u8* usrkey, u8* count, u8* sbox, u8* rcon)//AES CTR Mode of FACE_Light ver
{
 b2a:	cf 92       	push	r12
 b2c:	df 92       	push	r13
 b2e:	ef 92       	push	r14
 b30:	ff 92       	push	r15
 b32:	0f 93       	push	r16
 b34:	1f 93       	push	r17
 b36:	cf 93       	push	r28
 b38:	df 93       	push	r29
 b3a:	cd b7       	in	r28, 0x3d	; 61
 b3c:	de b7       	in	r29, 0x3e	; 62
 b3e:	c0 55       	subi	r28, 0x50	; 80
 b40:	d1 09       	sbc	r29, r1
 b42:	0f b6       	in	r0, 0x3f	; 63
 b44:	f8 94       	cli
 b46:	de bf       	out	0x3e, r29	; 62
 b48:	0f be       	out	0x3f, r0	; 63
 b4a:	cd bf       	out	0x3d, r28	; 61
 b4c:	fe 01       	movw	r30, r28
 b4e:	ec 5b       	subi	r30, 0xBC	; 188
 b50:	ff 4f       	sbci	r31, 0xFF	; 255
 b52:	91 83       	std	Z+1, r25	; 0x01
 b54:	80 83       	st	Z, r24
 b56:	ce 01       	movw	r24, r28
 b58:	8a 5b       	subi	r24, 0xBA	; 186
 b5a:	9f 4f       	sbci	r25, 0xFF	; 255
 b5c:	dc 01       	movw	r26, r24
 b5e:	6d 93       	st	X+, r22
 b60:	7c 93       	st	X, r23
 b62:	ce 01       	movw	r24, r28
 b64:	88 5b       	subi	r24, 0xB8	; 184
 b66:	9f 4f       	sbci	r25, 0xFF	; 255
 b68:	fc 01       	movw	r30, r24
 b6a:	40 83       	st	Z, r20
 b6c:	ce 01       	movw	r24, r28
 b6e:	87 5b       	subi	r24, 0xB7	; 183
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	dc 01       	movw	r26, r24
 b74:	2d 93       	st	X+, r18
 b76:	3c 93       	st	X, r19
 b78:	ce 01       	movw	r24, r28
 b7a:	85 5b       	subi	r24, 0xB5	; 181
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	fc 01       	movw	r30, r24
 b80:	11 83       	std	Z+1, r17	; 0x01
 b82:	00 83       	st	Z, r16
 b84:	ce 01       	movw	r24, r28
 b86:	83 5b       	subi	r24, 0xB3	; 179
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	dc 01       	movw	r26, r24
 b8c:	ed 92       	st	X+, r14
 b8e:	fc 92       	st	X, r15
 b90:	ce 01       	movw	r24, r28
 b92:	81 5b       	subi	r24, 0xB1	; 177
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	fc 01       	movw	r30, r24
 b98:	d1 82       	std	Z+1, r13	; 0x01
 b9a:	c0 82       	st	Z, r12
	u8 cnt_i, cnt_j;
	u8 paddingcnt = len % 16;
 b9c:	ce 01       	movw	r24, r28
 b9e:	88 5b       	subi	r24, 0xB8	; 184
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	dc 01       	movw	r26, r24
 ba4:	8c 91       	ld	r24, X
 ba6:	8f 70       	andi	r24, 0x0F	; 15
 ba8:	8b 83       	std	Y+3, r24	; 0x03
	u8 PT[BLOCKSIZE][16] = { {0x00} };
 baa:	20 e1       	ldi	r18, 0x10	; 16
 bac:	ce 01       	movw	r24, r28
 bae:	04 96       	adiw	r24, 0x04	; 4
 bb0:	fc 01       	movw	r30, r24
 bb2:	32 2f       	mov	r19, r18
 bb4:	11 92       	st	Z+, r1
 bb6:	3a 95       	dec	r19
 bb8:	e9 f7       	brne	.-6      	; 0xbb4 <CRYPTO_ctr128_encrypt+0x8a>
	u8 CT[BLOCKSIZE][16] = { {0x00} };
 bba:	20 e1       	ldi	r18, 0x10	; 16
 bbc:	ce 01       	movw	r24, r28
 bbe:	44 96       	adiw	r24, 0x14	; 20
 bc0:	dc 01       	movw	r26, r24
 bc2:	e2 2f       	mov	r30, r18
 bc4:	1d 92       	st	X+, r1
 bc6:	ea 95       	dec	r30
 bc8:	e9 f7       	brne	.-6      	; 0xbc4 <CRYPTO_ctr128_encrypt+0x9a>
	u8 iparray[16];
	u8 oparray[16];
	
	reset_count(count);
 bca:	ce 01       	movw	r24, r28
 bcc:	85 5b       	subi	r24, 0xB5	; 181
 bce:	9f 4f       	sbci	r25, 0xFF	; 255
 bd0:	dc 01       	movw	r26, r24
 bd2:	8d 91       	ld	r24, X+
 bd4:	9c 91       	ld	r25, X
 bd6:	f9 de       	rcall	.-526    	; 0x9ca <reset_count>

	for (cnt_i = 0; cnt_i < BLOCKSIZE - 1; cnt_i++)
 bd8:	19 82       	std	Y+1, r1	; 0x01
 bda:	00 00       	nop
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
 bdc:	8b 81       	ldd	r24, Y+3	; 0x03
 bde:	88 23       	and	r24, r24
 be0:	f9 f4       	brne	.+62     	; 0xc20 <CRYPTO_ctr128_encrypt+0xf6>
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 be2:	1a 82       	std	Y+2, r1	; 0x02
 be4:	1a c0       	rjmp	.+52     	; 0xc1a <CRYPTO_ctr128_encrypt+0xf0>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
 be6:	8a 81       	ldd	r24, Y+2	; 0x02
 be8:	88 2f       	mov	r24, r24
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	2a 81       	ldd	r18, Y+2	; 0x02
 bee:	22 2f       	mov	r18, r18
 bf0:	30 e0       	ldi	r19, 0x00	; 0
 bf2:	ae 01       	movw	r20, r28
 bf4:	4c 5b       	subi	r20, 0xBC	; 188
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255
 bf8:	fa 01       	movw	r30, r20
 bfa:	40 81       	ld	r20, Z
 bfc:	51 81       	ldd	r21, Z+1	; 0x01
 bfe:	24 0f       	add	r18, r20
 c00:	35 1f       	adc	r19, r21
 c02:	d9 01       	movw	r26, r18
 c04:	4c 91       	ld	r20, X
 c06:	9e 01       	movw	r18, r28
 c08:	2c 5f       	subi	r18, 0xFC	; 252
 c0a:	3f 4f       	sbci	r19, 0xFF	; 255
 c0c:	82 0f       	add	r24, r18
 c0e:	93 1f       	adc	r25, r19
 c10:	fc 01       	movw	r30, r24
 c12:	40 83       	st	Z, r20
			PT[cnt_i][cnt_j] = inp[cnt_i * 16 + cnt_j];
		}
	}
	if (paddingcnt == 0)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 c14:	8a 81       	ldd	r24, Y+2	; 0x02
 c16:	8f 5f       	subi	r24, 0xFF	; 255
 c18:	8a 83       	std	Y+2, r24	; 0x02
 c1a:	8a 81       	ldd	r24, Y+2	; 0x02
 c1c:	80 31       	cpi	r24, 0x10	; 16
 c1e:	18 f3       	brcs	.-58     	; 0xbe6 <CRYPTO_ctr128_encrypt+0xbc>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
	}

	if (paddingcnt != 0) // 패딩 함수.
 c20:	8b 81       	ldd	r24, Y+3	; 0x03
 c22:	88 23       	and	r24, r24
 c24:	b9 f1       	breq	.+110    	; 0xc94 <CRYPTO_ctr128_encrypt+0x16a>
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
 c26:	1a 82       	std	Y+2, r1	; 0x02
 c28:	1a c0       	rjmp	.+52     	; 0xc5e <CRYPTO_ctr128_encrypt+0x134>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
 c2a:	8a 81       	ldd	r24, Y+2	; 0x02
 c2c:	88 2f       	mov	r24, r24
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	2a 81       	ldd	r18, Y+2	; 0x02
 c32:	22 2f       	mov	r18, r18
 c34:	30 e0       	ldi	r19, 0x00	; 0
 c36:	ae 01       	movw	r20, r28
 c38:	4c 5b       	subi	r20, 0xBC	; 188
 c3a:	5f 4f       	sbci	r21, 0xFF	; 255
 c3c:	da 01       	movw	r26, r20
 c3e:	4d 91       	ld	r20, X+
 c40:	5c 91       	ld	r21, X
 c42:	24 0f       	add	r18, r20
 c44:	35 1f       	adc	r19, r21
 c46:	f9 01       	movw	r30, r18
 c48:	40 81       	ld	r20, Z
 c4a:	9e 01       	movw	r18, r28
 c4c:	2c 5f       	subi	r18, 0xFC	; 252
 c4e:	3f 4f       	sbci	r19, 0xFF	; 255
 c50:	82 0f       	add	r24, r18
 c52:	93 1f       	adc	r25, r19
 c54:	dc 01       	movw	r26, r24
 c56:	4c 93       	st	X, r20
		}
	}

	if (paddingcnt != 0) // 패딩 함수.
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
 c58:	8a 81       	ldd	r24, Y+2	; 0x02
 c5a:	8f 5f       	subi	r24, 0xFF	; 255
 c5c:	8a 83       	std	Y+2, r24	; 0x02
 c5e:	9a 81       	ldd	r25, Y+2	; 0x02
 c60:	8b 81       	ldd	r24, Y+3	; 0x03
 c62:	98 17       	cp	r25, r24
 c64:	10 f3       	brcs	.-60     	; 0xc2a <CRYPTO_ctr128_encrypt+0x100>
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
 c66:	8b 81       	ldd	r24, Y+3	; 0x03
 c68:	8a 83       	std	Y+2, r24	; 0x02
 c6a:	11 c0       	rjmp	.+34     	; 0xc8e <CRYPTO_ctr128_encrypt+0x164>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
 c6c:	8a 81       	ldd	r24, Y+2	; 0x02
 c6e:	88 2f       	mov	r24, r24
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	30 e1       	ldi	r19, 0x10	; 16
 c74:	2b 81       	ldd	r18, Y+3	; 0x03
 c76:	43 2f       	mov	r20, r19
 c78:	42 1b       	sub	r20, r18
 c7a:	9e 01       	movw	r18, r28
 c7c:	2c 5f       	subi	r18, 0xFC	; 252
 c7e:	3f 4f       	sbci	r19, 0xFF	; 255
 c80:	82 0f       	add	r24, r18
 c82:	93 1f       	adc	r25, r19
 c84:	fc 01       	movw	r30, r24
 c86:	40 83       	st	Z, r20
	{
		for (cnt_j = 0; cnt_j < paddingcnt; cnt_j++)
		{
			PT[BLOCKSIZE - 1][cnt_j] = inp[(BLOCKSIZE - 1) * 16 + cnt_j];
		}
		for (cnt_j = paddingcnt; cnt_j < 16; cnt_j++)
 c88:	8a 81       	ldd	r24, Y+2	; 0x02
 c8a:	8f 5f       	subi	r24, 0xFF	; 255
 c8c:	8a 83       	std	Y+2, r24	; 0x02
 c8e:	8a 81       	ldd	r24, Y+2	; 0x02
 c90:	80 31       	cpi	r24, 0x10	; 16
 c92:	60 f3       	brcs	.-40     	; 0xc6c <CRYPTO_ctr128_encrypt+0x142>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
 c94:	19 82       	std	Y+1, r1	; 0x01
 c96:	85 c0       	rjmp	.+266    	; 0xda2 <CRYPTO_ctr128_encrypt+0x278>
	{
		if (cnt_i != 0)
 c98:	89 81       	ldd	r24, Y+1	; 0x01
 c9a:	88 23       	and	r24, r24
 c9c:	39 f0       	breq	.+14     	; 0xcac <CRYPTO_ctr128_encrypt+0x182>
		Count_Addition(count);
 c9e:	ce 01       	movw	r24, r28
 ca0:	85 5b       	subi	r24, 0xB5	; 181
 ca2:	9f 4f       	sbci	r25, 0xFF	; 255
 ca4:	dc 01       	movw	r26, r24
 ca6:	8d 91       	ld	r24, X+
 ca8:	9c 91       	ld	r25, X
 caa:	b0 de       	rcall	.-672    	; 0xa0c <Count_Addition>

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 cac:	1a 82       	std	Y+2, r1	; 0x02
 cae:	1a c0       	rjmp	.+52     	; 0xce4 <CRYPTO_ctr128_encrypt+0x1ba>
		{
			iparray[cnt_j] = count[cnt_j];
 cb0:	8a 81       	ldd	r24, Y+2	; 0x02
 cb2:	88 2f       	mov	r24, r24
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	2a 81       	ldd	r18, Y+2	; 0x02
 cb8:	22 2f       	mov	r18, r18
 cba:	30 e0       	ldi	r19, 0x00	; 0
 cbc:	ae 01       	movw	r20, r28
 cbe:	45 5b       	subi	r20, 0xB5	; 181
 cc0:	5f 4f       	sbci	r21, 0xFF	; 255
 cc2:	fa 01       	movw	r30, r20
 cc4:	40 81       	ld	r20, Z
 cc6:	51 81       	ldd	r21, Z+1	; 0x01
 cc8:	24 0f       	add	r18, r20
 cca:	35 1f       	adc	r19, r21
 ccc:	d9 01       	movw	r26, r18
 cce:	4c 91       	ld	r20, X
 cd0:	9e 01       	movw	r18, r28
 cd2:	2c 5d       	subi	r18, 0xDC	; 220
 cd4:	3f 4f       	sbci	r19, 0xFF	; 255
 cd6:	82 0f       	add	r24, r18
 cd8:	93 1f       	adc	r25, r19
 cda:	fc 01       	movw	r30, r24
 cdc:	40 83       	st	Z, r20
	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
	{
		if (cnt_i != 0)
		Count_Addition(count);

		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 cde:	8a 81       	ldd	r24, Y+2	; 0x02
 ce0:	8f 5f       	subi	r24, 0xFF	; 255
 ce2:	8a 83       	std	Y+2, r24	; 0x02
 ce4:	8a 81       	ldd	r24, Y+2	; 0x02
 ce6:	80 31       	cpi	r24, 0x10	; 16
 ce8:	18 f3       	brcs	.-58     	; 0xcb0 <CRYPTO_ctr128_encrypt+0x186>
		{
			iparray[cnt_j] = count[cnt_j];
		}
			AES_encrypt_asm(iparray, oparray,usrkey,sbox,rcon);
 cea:	ce 01       	movw	r24, r28
 cec:	81 5b       	subi	r24, 0xB1	; 177
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	dc 01       	movw	r26, r24
 cf2:	ed 91       	ld	r30, X+
 cf4:	fc 91       	ld	r31, X
 cf6:	ce 01       	movw	r24, r28
 cf8:	83 5b       	subi	r24, 0xB3	; 179
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	dc 01       	movw	r26, r24
 cfe:	2d 91       	ld	r18, X+
 d00:	3c 91       	ld	r19, X
 d02:	ce 01       	movw	r24, r28
 d04:	87 5b       	subi	r24, 0xB7	; 183
 d06:	9f 4f       	sbci	r25, 0xFF	; 255
 d08:	dc 01       	movw	r26, r24
 d0a:	4d 91       	ld	r20, X+
 d0c:	5c 91       	ld	r21, X
 d0e:	be 01       	movw	r22, r28
 d10:	6c 5c       	subi	r22, 0xCC	; 204
 d12:	7f 4f       	sbci	r23, 0xFF	; 255
 d14:	ce 01       	movw	r24, r28
 d16:	84 96       	adiw	r24, 0x24	; 36
 d18:	8f 01       	movw	r16, r30
 d1a:	9b dd       	rcall	.-1226   	; 0x852 <AES_encrypt_asm>
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 d1c:	1a 82       	std	Y+2, r1	; 0x02
 d1e:	3b c0       	rjmp	.+118    	; 0xd96 <CRYPTO_ctr128_encrypt+0x26c>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
 d20:	89 81       	ldd	r24, Y+1	; 0x01
 d22:	28 2f       	mov	r18, r24
 d24:	30 e0       	ldi	r19, 0x00	; 0
 d26:	8a 81       	ldd	r24, Y+2	; 0x02
 d28:	88 2f       	mov	r24, r24
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	4a 81       	ldd	r20, Y+2	; 0x02
 d2e:	44 2f       	mov	r20, r20
 d30:	50 e0       	ldi	r21, 0x00	; 0
 d32:	be 01       	movw	r22, r28
 d34:	6c 5c       	subi	r22, 0xCC	; 204
 d36:	7f 4f       	sbci	r23, 0xFF	; 255
 d38:	46 0f       	add	r20, r22
 d3a:	57 1f       	adc	r21, r23
 d3c:	fa 01       	movw	r30, r20
 d3e:	a0 81       	ld	r26, Z
 d40:	49 81       	ldd	r20, Y+1	; 0x01
 d42:	64 2f       	mov	r22, r20
 d44:	70 e0       	ldi	r23, 0x00	; 0
 d46:	4a 81       	ldd	r20, Y+2	; 0x02
 d48:	44 2f       	mov	r20, r20
 d4a:	50 e0       	ldi	r21, 0x00	; 0
 d4c:	62 95       	swap	r22
 d4e:	72 95       	swap	r23
 d50:	70 7f       	andi	r23, 0xF0	; 240
 d52:	76 27       	eor	r23, r22
 d54:	60 7f       	andi	r22, 0xF0	; 240
 d56:	76 27       	eor	r23, r22
 d58:	fe 01       	movw	r30, r28
 d5a:	31 96       	adiw	r30, 0x01	; 1
 d5c:	6e 0f       	add	r22, r30
 d5e:	7f 1f       	adc	r23, r31
 d60:	46 0f       	add	r20, r22
 d62:	57 1f       	adc	r21, r23
 d64:	4d 5f       	subi	r20, 0xFD	; 253
 d66:	5f 4f       	sbci	r21, 0xFF	; 255
 d68:	fa 01       	movw	r30, r20
 d6a:	40 81       	ld	r20, Z
 d6c:	6a 2f       	mov	r22, r26
 d6e:	64 27       	eor	r22, r20
 d70:	22 95       	swap	r18
 d72:	32 95       	swap	r19
 d74:	30 7f       	andi	r19, 0xF0	; 240
 d76:	32 27       	eor	r19, r18
 d78:	20 7f       	andi	r18, 0xF0	; 240
 d7a:	32 27       	eor	r19, r18
 d7c:	ae 01       	movw	r20, r28
 d7e:	4f 5f       	subi	r20, 0xFF	; 255
 d80:	5f 4f       	sbci	r21, 0xFF	; 255
 d82:	24 0f       	add	r18, r20
 d84:	35 1f       	adc	r19, r21
 d86:	82 0f       	add	r24, r18
 d88:	93 1f       	adc	r25, r19
 d8a:	43 96       	adiw	r24, 0x13	; 19
 d8c:	dc 01       	movw	r26, r24
 d8e:	6c 93       	st	X, r22
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
		{
			iparray[cnt_j] = count[cnt_j];
		}
			AES_encrypt_asm(iparray, oparray,usrkey,sbox,rcon);
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 d90:	8a 81       	ldd	r24, Y+2	; 0x02
 d92:	8f 5f       	subi	r24, 0xFF	; 255
 d94:	8a 83       	std	Y+2, r24	; 0x02
 d96:	8a 81       	ldd	r24, Y+2	; 0x02
 d98:	80 31       	cpi	r24, 0x10	; 16
 d9a:	10 f2       	brcs	.-124    	; 0xd20 <CRYPTO_ctr128_encrypt+0x1f6>
		{
			PT[BLOCKSIZE - 1][cnt_j] = (0x10 - paddingcnt);
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++) //각각의 count마다 1더하기 해주고, 암호화 시킨다음에 PT와 XoR 해준다. CORE
 d9c:	89 81       	ldd	r24, Y+1	; 0x01
 d9e:	8f 5f       	subi	r24, 0xFF	; 255
 da0:	89 83       	std	Y+1, r24	; 0x01
 da2:	89 81       	ldd	r24, Y+1	; 0x01
 da4:	88 23       	and	r24, r24
 da6:	09 f4       	brne	.+2      	; 0xdaa <CRYPTO_ctr128_encrypt+0x280>
 da8:	77 cf       	rjmp	.-274    	; 0xc98 <CRYPTO_ctr128_encrypt+0x16e>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
 daa:	19 82       	std	Y+1, r1	; 0x01
 dac:	3c c0       	rjmp	.+120    	; 0xe26 <CRYPTO_ctr128_encrypt+0x2fc>
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 dae:	1a 82       	std	Y+2, r1	; 0x02
 db0:	34 c0       	rjmp	.+104    	; 0xe1a <CRYPTO_ctr128_encrypt+0x2f0>
		{
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
 db2:	89 81       	ldd	r24, Y+1	; 0x01
 db4:	88 2f       	mov	r24, r24
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	9c 01       	movw	r18, r24
 dba:	22 95       	swap	r18
 dbc:	32 95       	swap	r19
 dbe:	30 7f       	andi	r19, 0xF0	; 240
 dc0:	32 27       	eor	r19, r18
 dc2:	20 7f       	andi	r18, 0xF0	; 240
 dc4:	32 27       	eor	r19, r18
 dc6:	8a 81       	ldd	r24, Y+2	; 0x02
 dc8:	88 2f       	mov	r24, r24
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	82 0f       	add	r24, r18
 dce:	93 1f       	adc	r25, r19
 dd0:	9c 01       	movw	r18, r24
 dd2:	ce 01       	movw	r24, r28
 dd4:	8a 5b       	subi	r24, 0xBA	; 186
 dd6:	9f 4f       	sbci	r25, 0xFF	; 255
 dd8:	fc 01       	movw	r30, r24
 dda:	80 81       	ld	r24, Z
 ddc:	91 81       	ldd	r25, Z+1	; 0x01
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	29 81       	ldd	r18, Y+1	; 0x01
 de4:	42 2f       	mov	r20, r18
 de6:	50 e0       	ldi	r21, 0x00	; 0
 de8:	2a 81       	ldd	r18, Y+2	; 0x02
 dea:	22 2f       	mov	r18, r18
 dec:	30 e0       	ldi	r19, 0x00	; 0
 dee:	42 95       	swap	r20
 df0:	52 95       	swap	r21
 df2:	50 7f       	andi	r21, 0xF0	; 240
 df4:	54 27       	eor	r21, r20
 df6:	40 7f       	andi	r20, 0xF0	; 240
 df8:	54 27       	eor	r21, r20
 dfa:	be 01       	movw	r22, r28
 dfc:	6f 5f       	subi	r22, 0xFF	; 255
 dfe:	7f 4f       	sbci	r23, 0xFF	; 255
 e00:	46 0f       	add	r20, r22
 e02:	57 1f       	adc	r21, r23
 e04:	24 0f       	add	r18, r20
 e06:	35 1f       	adc	r19, r21
 e08:	2d 5e       	subi	r18, 0xED	; 237
 e0a:	3f 4f       	sbci	r19, 0xFF	; 255
 e0c:	d9 01       	movw	r26, r18
 e0e:	2c 91       	ld	r18, X
 e10:	fc 01       	movw	r30, r24
 e12:	20 83       	st	Z, r18
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
	{
		for (cnt_j = 0; cnt_j < 16; cnt_j++)
 e14:	8a 81       	ldd	r24, Y+2	; 0x02
 e16:	8f 5f       	subi	r24, 0xFF	; 255
 e18:	8a 83       	std	Y+2, r24	; 0x02
 e1a:	8a 81       	ldd	r24, Y+2	; 0x02
 e1c:	80 31       	cpi	r24, 0x10	; 16
 e1e:	48 f2       	brcs	.-110    	; 0xdb2 <CRYPTO_ctr128_encrypt+0x288>
		{
			CT[cnt_i][cnt_j] = oparray[cnt_j] ^ PT[cnt_i][cnt_j];
		}
	}

	for (cnt_i = 0; cnt_i < BLOCKSIZE; cnt_i++)
 e20:	89 81       	ldd	r24, Y+1	; 0x01
 e22:	8f 5f       	subi	r24, 0xFF	; 255
 e24:	89 83       	std	Y+1, r24	; 0x01
 e26:	89 81       	ldd	r24, Y+1	; 0x01
 e28:	88 23       	and	r24, r24
 e2a:	09 f2       	breq	.-126    	; 0xdae <CRYPTO_ctr128_encrypt+0x284>
			out[cnt_i * 16 + cnt_j] = CT[cnt_i][cnt_j];
		}
	}
	
	
}
 e2c:	00 00       	nop
 e2e:	c0 5b       	subi	r28, 0xB0	; 176
 e30:	df 4f       	sbci	r29, 0xFF	; 255
 e32:	0f b6       	in	r0, 0x3f	; 63
 e34:	f8 94       	cli
 e36:	de bf       	out	0x3e, r29	; 62
 e38:	0f be       	out	0x3f, r0	; 63
 e3a:	cd bf       	out	0x3d, r28	; 61
 e3c:	df 91       	pop	r29
 e3e:	cf 91       	pop	r28
 e40:	1f 91       	pop	r17
 e42:	0f 91       	pop	r16
 e44:	ff 90       	pop	r15
 e46:	ef 90       	pop	r14
 e48:	df 90       	pop	r13
 e4a:	cf 90       	pop	r12
 e4c:	08 95       	ret

00000e4e <main>:
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};


int main(void)
{
 e4e:	cf 92       	push	r12
 e50:	df 92       	push	r13
 e52:	ef 92       	push	r14
 e54:	ff 92       	push	r15
 e56:	0f 93       	push	r16
 e58:	1f 93       	push	r17
 e5a:	cf 93       	push	r28
 e5c:	df 93       	push	r29
 e5e:	cd b7       	in	r28, 0x3d	; 61
 e60:	de b7       	in	r29, 0x3e	; 62
 e62:	c0 54       	subi	r28, 0x40	; 64
 e64:	d1 09       	sbc	r29, r1
 e66:	0f b6       	in	r0, 0x3f	; 63
 e68:	f8 94       	cli
 e6a:	de bf       	out	0x3e, r29	; 62
 e6c:	0f be       	out	0x3f, r0	; 63
 e6e:	cd bf       	out	0x3d, r28	; 61
	
// 	 u8 inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
// 	 u8 userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};

	 u8 inp[16 * BLOCKSIZE] ={0x00};
 e70:	20 e1       	ldi	r18, 0x10	; 16
 e72:	ce 01       	movw	r24, r28
 e74:	01 96       	adiw	r24, 0x01	; 1
 e76:	fc 01       	movw	r30, r24
 e78:	32 2f       	mov	r19, r18
 e7a:	11 92       	st	Z+, r1
 e7c:	3a 95       	dec	r19
 e7e:	e9 f7       	brne	.-6      	; 0xe7a <main+0x2c>
	 u8 out[16 * BLOCKSIZE] = {0x00};
 e80:	20 e1       	ldi	r18, 0x10	; 16
 e82:	ce 01       	movw	r24, r28
 e84:	41 96       	adiw	r24, 0x11	; 17
 e86:	fc 01       	movw	r30, r24
 e88:	32 2f       	mov	r19, r18
 e8a:	11 92       	st	Z+, r1
 e8c:	3a 95       	dec	r19
 e8e:	e9 f7       	brne	.-6      	; 0xe8a <main+0x3c>
	 u8 userkey[16] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
 e90:	80 e1       	ldi	r24, 0x10	; 16
 e92:	e0 e0       	ldi	r30, 0x00	; 0
 e94:	f1 e0       	ldi	r31, 0x01	; 1
 e96:	de 01       	movw	r26, r28
 e98:	91 96       	adiw	r26, 0x21	; 33
 e9a:	01 90       	ld	r0, Z+
 e9c:	0d 92       	st	X+, r0
 e9e:	8a 95       	dec	r24
 ea0:	e1 f7       	brne	.-8      	; 0xe9a <main+0x4c>
	 //u8 LUT_FL[4][4][256]PROGMEM = {{{0x00}}};
	 u8 count[16] = {0x00};
 ea2:	20 e1       	ldi	r18, 0x10	; 16
 ea4:	ce 01       	movw	r24, r28
 ea6:	c1 96       	adiw	r24, 0x31	; 49
 ea8:	fc 01       	movw	r30, r24
 eaa:	32 2f       	mov	r19, r18
 eac:	11 92       	st	Z+, r1
 eae:	3a 95       	dec	r19
 eb0:	e9 f7       	brne	.-6      	; 0xeac <main+0x5e>
		 
	//Make_LUT_Face_Light(LUT_FL,userkey,count,sbox,Rcon);
	//CRYPTO_ctr128_encrypt_FACE_Light(inp,out,LUT_FL,AES_KEY_BIT,userkey,count,sbox,Rcon);
	
	CRYPTO_ctr128_encrypt(inp,out,AES_KEY_BIT,userkey,count,sbox,Rcon);	
 eb2:	ae 01       	movw	r20, r28
 eb4:	4f 5c       	subi	r20, 0xCF	; 207
 eb6:	5f 4f       	sbci	r21, 0xFF	; 255
 eb8:	9e 01       	movw	r18, r28
 eba:	2f 5d       	subi	r18, 0xDF	; 223
 ebc:	3f 4f       	sbci	r19, 0xFF	; 255
 ebe:	ce 01       	movw	r24, r28
 ec0:	41 96       	adiw	r24, 0x11	; 17
 ec2:	0f 2e       	mov	r0, r31
 ec4:	f0 e0       	ldi	r31, 0x00	; 0
 ec6:	cf 2e       	mov	r12, r31
 ec8:	f1 e0       	ldi	r31, 0x01	; 1
 eca:	df 2e       	mov	r13, r31
 ecc:	f0 2d       	mov	r31, r0
 ece:	0f 2e       	mov	r0, r31
 ed0:	f0 e0       	ldi	r31, 0x00	; 0
 ed2:	ef 2e       	mov	r14, r31
 ed4:	f2 e0       	ldi	r31, 0x02	; 2
 ed6:	ff 2e       	mov	r15, r31
 ed8:	f0 2d       	mov	r31, r0
 eda:	8a 01       	movw	r16, r20
 edc:	40 e8       	ldi	r20, 0x80	; 128
 ede:	bc 01       	movw	r22, r24
 ee0:	ce 01       	movw	r24, r28
 ee2:	01 96       	adiw	r24, 0x01	; 1
 ee4:	22 de       	rcall	.-956    	; 0xb2a <CRYPTO_ctr128_encrypt>
 ee6:	80 e0       	ldi	r24, 0x00	; 0
 ee8:	90 e0       	ldi	r25, 0x00	; 0
	//AES_encrypt(inp,out,userkey,sbox,Rcon);
	//AES_encrypt_asm(inp,out,userkey,sbox,Rcon);


	
}
 eea:	c0 5c       	subi	r28, 0xC0	; 192
 eec:	df 4f       	sbci	r29, 0xFF	; 255
 eee:	0f b6       	in	r0, 0x3f	; 63
 ef0:	f8 94       	cli
 ef2:	de bf       	out	0x3e, r29	; 62
 ef4:	0f be       	out	0x3f, r0	; 63
 ef6:	cd bf       	out	0x3d, r28	; 61
 ef8:	df 91       	pop	r29
 efa:	cf 91       	pop	r28
 efc:	1f 91       	pop	r17
 efe:	0f 91       	pop	r16
 f00:	ff 90       	pop	r15
 f02:	ef 90       	pop	r14
 f04:	df 90       	pop	r13
 f06:	cf 90       	pop	r12
 f08:	08 95       	ret

00000f0a <_exit>:
 f0a:	f8 94       	cli

00000f0c <__stop_program>:
 f0c:	ff cf       	rjmp	.-2      	; 0xf0c <__stop_program>
