
AES_asm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  000004fe  00000572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da4  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000802  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f0  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b2c  00000000  00000000  00002955  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  8e:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SubByte>:
			temp = userKey[cnt_j + (cnt_i * 4)] << ((3 - cnt_j) * 8);
			key->rd_key[start + cnt_i] += temp;
			temp = 0;
		}
	}
}
  96:	fc 01       	movw	r30, r24
  98:	9c 01       	movw	r18, r24
  9a:	20 5f       	subi	r18, 0xF0	; 240
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	90 81       	ld	r25, Z
  a0:	db 01       	movw	r26, r22
  a2:	a9 0f       	add	r26, r25
  a4:	b1 1d       	adc	r27, r1
  a6:	9c 91       	ld	r25, X
  a8:	91 93       	st	Z+, r25
  aa:	e2 17       	cp	r30, r18
  ac:	f3 07       	cpc	r31, r19
  ae:	b9 f7       	brne	.-18     	; 0x9e <SubByte+0x8>
  b0:	08 95       	ret

000000b2 <ShiftRow>:
  b2:	fc 01       	movw	r30, r24
  b4:	85 85       	ldd	r24, Z+13	; 0x0d
  b6:	91 81       	ldd	r25, Z+1	; 0x01
  b8:	95 87       	std	Z+13, r25	; 0x0d
  ba:	95 81       	ldd	r25, Z+5	; 0x05
  bc:	91 83       	std	Z+1, r25	; 0x01
  be:	91 85       	ldd	r25, Z+9	; 0x09
  c0:	95 83       	std	Z+5, r25	; 0x05
  c2:	81 87       	std	Z+9, r24	; 0x09
  c4:	92 85       	ldd	r25, Z+10	; 0x0a
  c6:	86 85       	ldd	r24, Z+14	; 0x0e
  c8:	22 81       	ldd	r18, Z+2	; 0x02
  ca:	22 87       	std	Z+10, r18	; 0x0a
  cc:	26 81       	ldd	r18, Z+6	; 0x06
  ce:	26 87       	std	Z+14, r18	; 0x0e
  d0:	92 83       	std	Z+2, r25	; 0x02
  d2:	86 83       	std	Z+6, r24	; 0x06
  d4:	87 81       	ldd	r24, Z+7	; 0x07
  d6:	93 81       	ldd	r25, Z+3	; 0x03
  d8:	97 83       	std	Z+7, r25	; 0x07
  da:	97 85       	ldd	r25, Z+15	; 0x0f
  dc:	93 83       	std	Z+3, r25	; 0x03
  de:	93 85       	ldd	r25, Z+11	; 0x0b
  e0:	97 87       	std	Z+15, r25	; 0x0f
  e2:	83 87       	std	Z+11, r24	; 0x0b
  e4:	08 95       	ret

000000e6 <MixColumns>:
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <MixColumns+0xc>
  f2:	00 d0       	rcall	.+0      	; 0xf4 <MixColumns+0xe>
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	ac 01       	movw	r20, r24
  fa:	8c 01       	movw	r16, r24
  fc:	00 5f       	subi	r16, 0xF0	; 240
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
 100:	0f 2e       	mov	r0, r31
 102:	fb e1       	ldi	r31, 0x1B	; 27
 104:	ff 2e       	mov	r15, r31
 106:	f0 2d       	mov	r31, r0
 108:	be 01       	movw	r22, r28
 10a:	6b 5f       	subi	r22, 0xFB	; 251
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	da 01       	movw	r26, r20
 110:	fc 91       	ld	r31, X
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	3c 91       	ld	r19, X
 116:	11 97       	sbiw	r26, 0x01	; 1
 118:	ef 2f       	mov	r30, r31
 11a:	e3 27       	eor	r30, r19
 11c:	12 96       	adiw	r26, 0x02	; 2
 11e:	2c 91       	ld	r18, X
 120:	12 97       	sbiw	r26, 0x02	; 2
 122:	32 27       	eor	r19, r18
 124:	13 96       	adiw	r26, 0x03	; 3
 126:	9c 91       	ld	r25, X
 128:	8e 2f       	mov	r24, r30
 12a:	88 1f       	adc	r24, r24
 12c:	88 27       	eor	r24, r24
 12e:	88 1f       	adc	r24, r24
 130:	8f 9d       	mul	r24, r15
 132:	80 2d       	mov	r24, r0
 134:	11 24       	eor	r1, r1
 136:	ae 2f       	mov	r26, r30
 138:	aa 0f       	add	r26, r26
 13a:	8a 27       	eor	r24, r26
 13c:	a3 2f       	mov	r26, r19
 13e:	a9 27       	eor	r26, r25
 140:	8a 27       	eor	r24, r26
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	83 2f       	mov	r24, r19
 146:	88 1f       	adc	r24, r24
 148:	88 27       	eor	r24, r24
 14a:	88 1f       	adc	r24, r24
 14c:	8f 9d       	mul	r24, r15
 14e:	80 2d       	mov	r24, r0
 150:	11 24       	eor	r1, r1
 152:	33 0f       	add	r19, r19
 154:	38 27       	eor	r19, r24
 156:	8f 2f       	mov	r24, r31
 158:	82 27       	eor	r24, r18
 15a:	89 27       	eor	r24, r25
 15c:	38 27       	eor	r19, r24
 15e:	3a 83       	std	Y+2, r19	; 0x02
 160:	82 2f       	mov	r24, r18
 162:	89 27       	eor	r24, r25
 164:	38 2f       	mov	r19, r24
 166:	33 1f       	adc	r19, r19
 168:	33 27       	eor	r19, r19
 16a:	33 1f       	adc	r19, r19
 16c:	3f 9d       	mul	r19, r15
 16e:	30 2d       	mov	r19, r0
 170:	11 24       	eor	r1, r1
 172:	88 0f       	add	r24, r24
 174:	83 27       	eor	r24, r19
 176:	3e 2f       	mov	r19, r30
 178:	39 27       	eor	r19, r25
 17a:	83 27       	eor	r24, r19
 17c:	8b 83       	std	Y+3, r24	; 0x03
 17e:	9f 27       	eor	r25, r31
 180:	89 2f       	mov	r24, r25
 182:	88 1f       	adc	r24, r24
 184:	88 27       	eor	r24, r24
 186:	88 1f       	adc	r24, r24
 188:	8f 9d       	mul	r24, r15
 18a:	80 2d       	mov	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	99 0f       	add	r25, r25
 190:	98 27       	eor	r25, r24
 192:	2e 27       	eor	r18, r30
 194:	92 27       	eor	r25, r18
 196:	9c 83       	std	Y+4, r25	; 0x04
 198:	fe 01       	movw	r30, r28
 19a:	31 96       	adiw	r30, 0x01	; 1
 19c:	da 01       	movw	r26, r20
 19e:	81 91       	ld	r24, Z+
 1a0:	8d 93       	st	X+, r24
 1a2:	e6 17       	cp	r30, r22
 1a4:	f7 07       	cpc	r31, r23
 1a6:	d9 f7       	brne	.-10     	; 0x19e <MixColumns+0xb8>
 1a8:	4c 5f       	subi	r20, 0xFC	; 252
 1aa:	5f 4f       	sbci	r21, 0xFF	; 255
 1ac:	40 17       	cp	r20, r16
 1ae:	51 07       	cpc	r21, r17
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <MixColumns+0xce>
 1b2:	ad cf       	rjmp	.-166    	; 0x10e <MixColumns+0x28>
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	08 95       	ret

000001c8 <AddRoundKey>:

void AddRoundKey(u8 *state, u8* rdkey)
{
 1c8:	db 01       	movw	r26, r22
 1ca:	fc 01       	movw	r30, r24
 1cc:	9c 01       	movw	r18, r24
 1ce:	2c 5f       	subi	r18, 0xFC	; 252
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
	int cnt_i;
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
	{
		state[cnt_i] ^= rdkey[cnt_i];
 1d2:	9d 91       	ld	r25, X+
 1d4:	80 81       	ld	r24, Z
 1d6:	98 27       	eor	r25, r24
 1d8:	91 93       	st	Z+, r25
}

void AddRoundKey(u8 *state, u8* rdkey)
{
	int cnt_i;
	for (cnt_i = 0; cnt_i < 4; cnt_i++)
 1da:	e2 17       	cp	r30, r18
 1dc:	f3 07       	cpc	r31, r19
 1de:	c9 f7       	brne	.-14     	; 0x1d2 <AddRoundKey+0xa>
	{
		state[cnt_i] ^= rdkey[cnt_i];
	}
}
 1e0:	08 95       	ret

000001e2 <keyScheduling>:


void keyScheduling(u8* roundkey,u8* Rcon, u8* sbox,u8 round)
{
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	60 97       	sbiw	r28, 0x10	; 16
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	dc 01       	movw	r26, r24
 206:	6b 01       	movw	r12, r22
 208:	ca 01       	movw	r24, r20
	u8 cnt_i = 0x00;
	u8 temp2[16] = {0x00};
 20a:	ae 01       	movw	r20, r28
 20c:	4f 5f       	subi	r20, 0xFF	; 255
 20e:	5f 4f       	sbci	r21, 0xFF	; 255
 210:	5a 01       	movw	r10, r20
 212:	30 e1       	ldi	r19, 0x10	; 16
 214:	fa 01       	movw	r30, r20
 216:	11 92       	st	Z+, r1
 218:	3a 95       	dec	r19
 21a:	e9 f7       	brne	.-6      	; 0x216 <keyScheduling+0x34>
	cnt_i = roundkey[12];
 21c:	1c 96       	adiw	r26, 0x0c	; 12
 21e:	3c 91       	ld	r19, X
 220:	1c 97       	sbiw	r26, 0x0c	; 12
	roundkey[12] = sbox[roundkey[13]];
 222:	1d 96       	adiw	r26, 0x0d	; 13
 224:	4c 91       	ld	r20, X
 226:	1d 97       	sbiw	r26, 0x0d	; 13
 228:	bc 01       	movw	r22, r24
 22a:	64 0f       	add	r22, r20
 22c:	71 1d       	adc	r23, r1
 22e:	fb 01       	movw	r30, r22
 230:	00 81       	ld	r16, Z
 232:	1c 96       	adiw	r26, 0x0c	; 12
 234:	0c 93       	st	X, r16
 236:	1c 97       	sbiw	r26, 0x0c	; 12
	roundkey[13] = sbox[roundkey[14]];
 238:	1e 96       	adiw	r26, 0x0e	; 14
 23a:	4c 91       	ld	r20, X
 23c:	1e 97       	sbiw	r26, 0x0e	; 14
 23e:	bc 01       	movw	r22, r24
 240:	64 0f       	add	r22, r20
 242:	71 1d       	adc	r23, r1
 244:	fb 01       	movw	r30, r22
 246:	10 81       	ld	r17, Z
 248:	1d 96       	adiw	r26, 0x0d	; 13
 24a:	1c 93       	st	X, r17
 24c:	1d 97       	sbiw	r26, 0x0d	; 13
	roundkey[14] = sbox[roundkey[15]];
 24e:	1f 96       	adiw	r26, 0x0f	; 15
 250:	4c 91       	ld	r20, X
 252:	1f 97       	sbiw	r26, 0x0f	; 15
 254:	bc 01       	movw	r22, r24
 256:	64 0f       	add	r22, r20
 258:	71 1d       	adc	r23, r1
 25a:	fb 01       	movw	r30, r22
 25c:	70 81       	ld	r23, Z
 25e:	1e 96       	adiw	r26, 0x0e	; 14
 260:	7c 93       	st	X, r23
 262:	1e 97       	sbiw	r26, 0x0e	; 14
	roundkey[15] = sbox[cnt_i];
 264:	83 0f       	add	r24, r19
 266:	91 1d       	adc	r25, r1
 268:	fc 01       	movw	r30, r24
 26a:	f0 80       	ld	r15, Z
 26c:	1f 96       	adiw	r26, 0x0f	; 15
 26e:	fc 92       	st	X, r15
 270:	1f 97       	sbiw	r26, 0x0f	; 15
	
	temp2[0] = roundkey[12]^Rcon[round]^roundkey[0];
 272:	8c 91       	ld	r24, X
 274:	c2 0e       	add	r12, r18
 276:	d1 1c       	adc	r13, r1
 278:	f6 01       	movw	r30, r12
 27a:	90 81       	ld	r25, Z
 27c:	98 27       	eor	r25, r24
 27e:	90 27       	eor	r25, r16
 280:	99 83       	std	Y+1, r25	; 0x01
	temp2[1] = roundkey[13]^roundkey[0];
 282:	51 2f       	mov	r21, r17
 284:	58 27       	eor	r21, r24
 286:	5a 83       	std	Y+2, r21	; 0x02
	temp2[2] = roundkey[14]^roundkey[0];
 288:	27 2f       	mov	r18, r23
 28a:	28 27       	eor	r18, r24
 28c:	2b 83       	std	Y+3, r18	; 0x03
	temp2[3] = roundkey[15]^roundkey[0];
 28e:	8f 25       	eor	r24, r15
 290:	8c 83       	std	Y+4, r24	; 0x04
	
	temp2[4] = temp2[0]^roundkey[4];
 292:	14 96       	adiw	r26, 0x04	; 4
 294:	4c 91       	ld	r20, X
 296:	14 97       	sbiw	r26, 0x04	; 4
 298:	49 27       	eor	r20, r25
 29a:	4d 83       	std	Y+5, r20	; 0x05
	temp2[5] = temp2[1]^roundkey[5];
 29c:	15 96       	adiw	r26, 0x05	; 5
 29e:	3c 91       	ld	r19, X
 2a0:	15 97       	sbiw	r26, 0x05	; 5
 2a2:	35 27       	eor	r19, r21
 2a4:	3e 83       	std	Y+6, r19	; 0x06
	temp2[6] = temp2[2]^roundkey[6];
 2a6:	16 96       	adiw	r26, 0x06	; 6
 2a8:	5c 91       	ld	r21, X
 2aa:	16 97       	sbiw	r26, 0x06	; 6
 2ac:	62 2f       	mov	r22, r18
 2ae:	65 27       	eor	r22, r21
 2b0:	6f 83       	std	Y+7, r22	; 0x07
	temp2[7] = temp2[3]^roundkey[7];
 2b2:	17 96       	adiw	r26, 0x07	; 7
 2b4:	5c 91       	ld	r21, X
 2b6:	17 97       	sbiw	r26, 0x07	; 7
 2b8:	85 27       	eor	r24, r21
 2ba:	88 87       	std	Y+8, r24	; 0x08
	
	temp2[8] = temp2[4]^roundkey[8];
 2bc:	18 96       	adiw	r26, 0x08	; 8
 2be:	9c 91       	ld	r25, X
 2c0:	18 97       	sbiw	r26, 0x08	; 8
 2c2:	49 27       	eor	r20, r25
 2c4:	49 87       	std	Y+9, r20	; 0x09
	temp2[9] = temp2[5]^roundkey[9];
 2c6:	19 96       	adiw	r26, 0x09	; 9
 2c8:	9c 91       	ld	r25, X
 2ca:	19 97       	sbiw	r26, 0x09	; 9
 2cc:	39 27       	eor	r19, r25
 2ce:	3a 87       	std	Y+10, r19	; 0x0a
	temp2[10] = temp2[6]^roundkey[10];
 2d0:	1a 96       	adiw	r26, 0x0a	; 10
 2d2:	9c 91       	ld	r25, X
 2d4:	1a 97       	sbiw	r26, 0x0a	; 10
 2d6:	26 2f       	mov	r18, r22
 2d8:	29 27       	eor	r18, r25
 2da:	2b 87       	std	Y+11, r18	; 0x0b
	temp2[11] = temp2[7]^roundkey[11];
 2dc:	1b 96       	adiw	r26, 0x0b	; 11
 2de:	9c 91       	ld	r25, X
 2e0:	1b 97       	sbiw	r26, 0x0b	; 11
 2e2:	89 27       	eor	r24, r25
 2e4:	8c 87       	std	Y+12, r24	; 0x0c
	
	temp2[12] = temp2[8]^roundkey[12];
 2e6:	40 27       	eor	r20, r16
 2e8:	4d 87       	std	Y+13, r20	; 0x0d
	temp2[13] = temp2[9]^roundkey[13];
 2ea:	31 27       	eor	r19, r17
 2ec:	3e 87       	std	Y+14, r19	; 0x0e
	temp2[14] = temp2[10]^roundkey[14];
 2ee:	27 27       	eor	r18, r23
 2f0:	2f 87       	std	Y+15, r18	; 0x0f
	temp2[15] = temp2[11]^roundkey[15];
 2f2:	8f 25       	eor	r24, r15
 2f4:	88 8b       	std	Y+16, r24	; 0x10
 2f6:	f5 01       	movw	r30, r10
 2f8:	9e 01       	movw	r18, r28
 2fa:	2f 5e       	subi	r18, 0xEF	; 239
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for(cnt_i = 0 ; cnt_i <16; cnt_i++)
	{
		roundkey[cnt_i] = temp2[cnt_i];
 2fe:	81 91       	ld	r24, Z+
 300:	8d 93       	st	X+, r24
	temp2[12] = temp2[8]^roundkey[12];
	temp2[13] = temp2[9]^roundkey[13];
	temp2[14] = temp2[10]^roundkey[14];
	temp2[15] = temp2[11]^roundkey[15];
	
	for(cnt_i = 0 ; cnt_i <16; cnt_i++)
 302:	e2 17       	cp	r30, r18
 304:	f3 07       	cpc	r31, r19
 306:	d9 f7       	brne	.-10     	; 0x2fe <keyScheduling+0x11c>
	{
		roundkey[cnt_i] = temp2[cnt_i];
	}
	
}
 308:	60 96       	adiw	r28, 0x10	; 16
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	bf 90       	pop	r11
 324:	af 90       	pop	r10
 326:	08 95       	ret

00000328 <AES_encrypt>:

void AES_encrypt(u8* inp, u8* out, u8* usrkey,u8* sbox, u8* rcon)
{
 328:	7f 92       	push	r7
 32a:	8f 92       	push	r8
 32c:	9f 92       	push	r9
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	a0 97       	sbiw	r28, 0x20	; 32
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	86 2e       	mov	r8, r22
 354:	97 2e       	mov	r9, r23
 356:	59 01       	movw	r10, r18
	u8 state[16];
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};
 358:	fe 01       	movw	r30, r28
 35a:	71 96       	adiw	r30, 0x11	; 17
 35c:	20 e1       	ldi	r18, 0x10	; 16
 35e:	df 01       	movw	r26, r30
 360:	1d 92       	st	X+, r1
 362:	2a 95       	dec	r18
 364:	e9 f7       	brne	.-6      	; 0x360 <AES_encrypt+0x38>
 366:	9e 01       	movw	r18, r28
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	79 01       	movw	r14, r18
 36e:	64 2f       	mov	r22, r20
 370:	75 2f       	mov	r23, r21
 372:	9f 01       	movw	r18, r30
 374:	6f 01       	movw	r12, r30
 376:	f7 01       	movw	r30, r14

	
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
	{
		state[cnt_i] = inp[cnt_i];
 378:	dc 01       	movw	r26, r24
 37a:	4d 91       	ld	r20, X+
 37c:	cd 01       	movw	r24, r26
 37e:	41 93       	st	Z+, r20
		roundkey[cnt_i] = usrkey[cnt_i];
 380:	db 01       	movw	r26, r22
 382:	4d 91       	ld	r20, X+
 384:	bd 01       	movw	r22, r26
 386:	d9 01       	movw	r26, r18
 388:	4d 93       	st	X+, r20
 38a:	9d 01       	movw	r18, r26
	u8 cnt_i;
	u8 round = 0;
	u8 roundkey[16] = {0x00};

	
	for (cnt_i = 0; cnt_i < 16; cnt_i++)
 38c:	ec 15       	cp	r30, r12
 38e:	fd 05       	cpc	r31, r13
 390:	99 f7       	brne	.-26     	; 0x378 <AES_encrypt+0x50>
		state[cnt_i] = inp[cnt_i];
		roundkey[cnt_i] = usrkey[cnt_i];
	}


	AddRoundKey(state, roundkey);
 392:	be 01       	movw	r22, r28
 394:	6f 5e       	subi	r22, 0xEF	; 239
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	ce 01       	movw	r24, r28
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <AddRoundKey>
	keyScheduling(roundkey,rcon, sbox,round);
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	a5 01       	movw	r20, r10
 3a4:	b8 01       	movw	r22, r16
 3a6:	ce 01       	movw	r24, r28
 3a8:	41 96       	adiw	r24, 0x11	; 17
 3aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <keyScheduling>
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f9 e0       	ldi	r31, 0x09	; 9
 3b2:	7f 2e       	mov	r7, r31
 3b4:	f0 2d       	mov	r31, r0


	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
	{
		SubByte(state,sbox);
 3b6:	b5 01       	movw	r22, r10
 3b8:	ce 01       	movw	r24, r28
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	0e 94 4b 00 	call	0x96	; 0x96 <SubByte>
		ShiftRow(state);
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	0e 94 59 00 	call	0xb2	; 0xb2 <ShiftRow>
		MixColumns(state);
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 73 00 	call	0xe6	; 0xe6 <MixColumns>
		AddRoundKey(state, roundkey);
 3d0:	be 01       	movw	r22, r28
 3d2:	6f 5e       	subi	r22, 0xEF	; 239
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <AddRoundKey>
		keyScheduling(roundkey,rcon, sbox,round);
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	a5 01       	movw	r20, r10
 3e2:	b8 01       	movw	r22, r16
 3e4:	ce 01       	movw	r24, r28
 3e6:	41 96       	adiw	r24, 0x11	; 17
 3e8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <keyScheduling>
 3ec:	7a 94       	dec	r7

	AddRoundKey(state, roundkey);
	keyScheduling(roundkey,rcon, sbox,round);


	for (cnt_i = 1; cnt_i < AES_MAXNR; cnt_i++)
 3ee:	71 10       	cpse	r7, r1
 3f0:	e2 cf       	rjmp	.-60     	; 0x3b6 <AES_encrypt+0x8e>
		AddRoundKey(state, roundkey);
		keyScheduling(roundkey,rcon, sbox,round);

	}
	
	SubByte(state,sbox);
 3f2:	b5 01       	movw	r22, r10
 3f4:	ce 01       	movw	r24, r28
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	0e 94 4b 00 	call	0x96	; 0x96 <SubByte>
	ShiftRow(state);
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	0e 94 59 00 	call	0xb2	; 0xb2 <ShiftRow>
	AddRoundKey(state, roundkey);
 404:	be 01       	movw	r22, r28
 406:	6f 5e       	subi	r22, 0xEF	; 239
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	ce 01       	movw	r24, r28
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <AddRoundKey>
 412:	e8 2d       	mov	r30, r8
 414:	f9 2d       	mov	r31, r9

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
	{
		out[cnt_i] = state[cnt_i];
 416:	d7 01       	movw	r26, r14
 418:	8d 91       	ld	r24, X+
 41a:	7d 01       	movw	r14, r26
 41c:	81 93       	st	Z+, r24
	
	SubByte(state,sbox);
	ShiftRow(state);
	AddRoundKey(state, roundkey);

	for (cnt_i = 0; cnt_i < 4 * Nb; cnt_i++)
 41e:	ac 15       	cp	r26, r12
 420:	bd 05       	cpc	r27, r13
 422:	c9 f7       	brne	.-14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		out[cnt_i] = state[cnt_i];
	}
 424:	a0 96       	adiw	r28, 0x20	; 32
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	bf 90       	pop	r11
 442:	af 90       	pop	r10
 444:	9f 90       	pop	r9
 446:	8f 90       	pop	r8
 448:	7f 90       	pop	r7
 44a:	08 95       	ret

0000044c <main>:

#include <avr/io.h>
#include "AES_header.h"

int main(void)
{
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	cd 56       	subi	r28, 0x6D	; 109
 45a:	d1 40       	sbci	r29, 0x01	; 1
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
	volatile u8 Rcon[13] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab};
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	e0 e0       	ldi	r30, 0x00	; 0
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	de 01       	movw	r26, r28
 46e:	11 96       	adiw	r26, 0x01	; 1
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	8a 95       	dec	r24
 476:	e1 f7       	brne	.-8      	; 0x470 <main+0x24>
	volatile u8 sbox[256] = {
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	ed e0       	ldi	r30, 0x0D	; 13
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	de 01       	movw	r26, r28
 480:	1e 96       	adiw	r26, 0x0e	; 14
 482:	01 90       	ld	r0, Z+
 484:	0d 92       	st	X+, r0
 486:	8a 95       	dec	r24
 488:	e1 f7       	brne	.-8      	; 0x482 <main+0x36>
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
	
	
	volatile uint8_t* inp[16] = {0x32,0x43,0xf6,0xa8,0x88,0x5a,0x30,0x8d,0x31,0x31,0x98,0xa2,0xe0,0x37,0x07,0x34};
 48a:	80 e2       	ldi	r24, 0x20	; 32
 48c:	ed e0       	ldi	r30, 0x0D	; 13
 48e:	f2 e0       	ldi	r31, 0x02	; 2
 490:	de 01       	movw	r26, r28
 492:	a2 5f       	subi	r26, 0xF2	; 242
 494:	be 4f       	sbci	r27, 0xFE	; 254
 496:	01 90       	ld	r0, Z+
 498:	0d 92       	st	X+, r0
 49a:	8a 95       	dec	r24
 49c:	e1 f7       	brne	.-8      	; 0x496 <main+0x4a>
	volatile uint8_t* userkey[16] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
 49e:	80 e2       	ldi	r24, 0x20	; 32
 4a0:	ed e2       	ldi	r30, 0x2D	; 45
 4a2:	f2 e0       	ldi	r31, 0x02	; 2
 4a4:	de 01       	movw	r26, r28
 4a6:	a2 5d       	subi	r26, 0xD2	; 210
 4a8:	be 4f       	sbci	r27, 0xFE	; 254
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0x5e>
	volatile uint8_t* out[16] = {0x00};
 4b2:	be 01       	movw	r22, r28
 4b4:	62 5b       	subi	r22, 0xB2	; 178
 4b6:	7e 4f       	sbci	r23, 0xFE	; 254
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	fb 01       	movw	r30, r22
 4bc:	11 92       	st	Z+, r1
 4be:	8a 95       	dec	r24
 4c0:	e9 f7       	brne	.-6      	; 0x4bc <main+0x70>
	//MixColumns(plain_txt);
	//MixColumns_asm(plain_txt);

		
	//AES_set_encrypt_key(userkey, AES_KEY_BIT, key,Rcon,sbox);
	AES_encrypt(inp,out,userkey,sbox,Rcon);
 4c2:	8e 01       	movw	r16, r28
 4c4:	0f 5f       	subi	r16, 0xFF	; 255
 4c6:	1f 4f       	sbci	r17, 0xFF	; 255
 4c8:	9e 01       	movw	r18, r28
 4ca:	22 5f       	subi	r18, 0xF2	; 242
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	ae 01       	movw	r20, r28
 4d0:	42 5d       	subi	r20, 0xD2	; 210
 4d2:	5e 4f       	sbci	r21, 0xFE	; 254
 4d4:	ce 01       	movw	r24, r28
 4d6:	82 5f       	subi	r24, 0xF2	; 242
 4d8:	9e 4f       	sbci	r25, 0xFE	; 254
 4da:	0e 94 94 01 	call	0x328	; 0x328 <AES_encrypt>

	
}
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	c3 59       	subi	r28, 0x93	; 147
 4e4:	de 4f       	sbci	r29, 0xFE	; 254
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
