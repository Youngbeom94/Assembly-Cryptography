
AES_8bit Asm_fast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000618  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ca  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000383  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	d8 d1       	rcall	.+944    	; 0x426 <main>
  76:	15 c2       	rjmp	.+1066   	; 0x4a2 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>
	...

00000100 <aes_sbox>:
 100:	63 7c       	andi	r22, 0xC3	; 195
 102:	77 7b       	andi	r23, 0xB7	; 183
 104:	f2 6b       	ori	r31, 0xB2	; 178
 106:	6f c5       	rjmp	.+2782   	; 0xbe6 <__stack+0x2e7>
 108:	30 01       	movw	r6, r0
 10a:	67 2b       	or	r22, r23
 10c:	fe d7       	rcall	.+4092   	; 0x110a <__stack+0x80b>
 10e:	ab 76       	andi	r26, 0x6B	; 107
 110:	ca 82       	std	Y+2, r12	; 0x02
 112:	c9 7d       	andi	r28, 0xD9	; 217
 114:	fa 59       	subi	r31, 0x9A	; 154
 116:	47 f0       	brie	.+16     	; 0x128 <aes_sbox+0x28>
 118:	ad d4       	rcall	.+2394   	; 0xa74 <__stack+0x175>
 11a:	a2 af       	std	Z+58, r26	; 0x3a
 11c:	9c a4       	ldd	r9, Y+44	; 0x2c
 11e:	72 c0       	rjmp	.+228    	; 0x204 <aes192_enc_origin>
 120:	b7 fd       	sbrc	r27, 7
 122:	93 26       	eor	r9, r19
 124:	36 3f       	cpi	r19, 0xF6	; 246
 126:	f7 cc       	rjmp	.-1554   	; 0xfffffb16 <__eeprom_end+0xff7efb16>
 128:	34 a5       	ldd	r19, Z+44	; 0x2c
 12a:	e5 f1       	brhs	.+120    	; 0x1a4 <aes_sbox+0xa4>
 12c:	71 d8       	rcall	.-3870   	; 0xfffff210 <__eeprom_end+0xff7ef210>
 12e:	31 15       	cp	r19, r1
 130:	04 c7       	rjmp	.+3592   	; 0xf3a <__stack+0x63b>
 132:	23 c3       	rjmp	.+1606   	; 0x77a <_etext+0x2d4>
 134:	18 96       	adiw	r26, 0x08	; 8
 136:	05 9a       	sbi	0x00, 5	; 0
 138:	07 12       	cpse	r0, r23
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	eb 27       	eor	r30, r27
 13e:	b2 75       	andi	r27, 0x52	; 82
 140:	09 83       	std	Y+1, r16	; 0x01
 142:	2c 1a       	sub	r2, r28
 144:	1b 6e       	ori	r17, 0xEB	; 235
 146:	5a a0       	ldd	r5, Y+34	; 0x22
 148:	52 3b       	cpi	r21, 0xB2	; 178
 14a:	d6 b3       	in	r29, 0x16	; 22
 14c:	29 e3       	ldi	r18, 0x39	; 57
 14e:	2f 84       	ldd	r2, Y+15	; 0x0f
 150:	53 d1       	rcall	.+678    	; 0x3f8 <exit+0x158>
 152:	00 ed       	ldi	r16, 0xD0	; 208
 154:	20 fc       	sbrc	r2, 0
 156:	b1 5b       	subi	r27, 0xB1	; 177
 158:	6a cb       	rjmp	.-2348   	; 0xfffff82e <__eeprom_end+0xff7ef82e>
 15a:	be 39       	cpi	r27, 0x9E	; 158
 15c:	4a 4c       	sbci	r20, 0xCA	; 202
 15e:	58 cf       	rjmp	.-336    	; 0x10 <ST20>
 160:	d0 ef       	ldi	r29, 0xF0	; 240
 162:	aa fb       	.word	0xfbaa	; ????
 164:	43 4d       	sbci	r20, 0xD3	; 211
 166:	33 85       	ldd	r19, Z+11	; 0x0b
 168:	45 f9       	bld	r20, 5
 16a:	02 7f       	andi	r16, 0xF2	; 242
 16c:	50 3c       	cpi	r21, 0xC0	; 192
 16e:	9f a8       	ldd	r9, Y+55	; 0x37
 170:	51 a3       	std	Z+33, r21	; 0x21
 172:	40 8f       	std	Z+24, r20	; 0x18
 174:	92 9d       	mul	r25, r2
 176:	38 f5       	brcc	.+78     	; 0x1c6 <aes_sbox+0xc6>
 178:	bc b6       	in	r11, 0x3c	; 60
 17a:	da 21       	and	r29, r10
 17c:	10 ff       	sbrs	r17, 0
 17e:	f3 d2       	rcall	.+1510   	; 0x766 <_etext+0x2c0>
 180:	cd 0c       	add	r12, r13
 182:	13 ec       	ldi	r17, 0xC3	; 195
 184:	5f 97       	sbiw	r26, 0x1f	; 31
 186:	44 17       	cp	r20, r20
 188:	c4 a7       	std	Z+44, r28	; 0x2c
 18a:	7e 3d       	cpi	r23, 0xDE	; 222
 18c:	64 5d       	subi	r22, 0xD4	; 212
 18e:	19 73       	andi	r17, 0x39	; 57
 190:	60 81       	ld	r22, Z
 192:	4f dc       	rcall	.-1890   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
 194:	22 2a       	or	r2, r18
 196:	90 88       	ldd	r9, Z+16	; 0x10
 198:	46 ee       	ldi	r20, 0xE6	; 230
 19a:	b8 14       	cp	r11, r8
 19c:	de 5e       	subi	r29, 0xEE	; 238
 19e:	0b db       	rcall	.-2538   	; 0xfffff7b6 <__eeprom_end+0xff7ef7b6>
 1a0:	e0 32       	cpi	r30, 0x20	; 32
 1a2:	3a 0a       	sbc	r3, r26
 1a4:	49 06       	cpc	r4, r25
 1a6:	24 5c       	subi	r18, 0xC4	; 196
 1a8:	c2 d3       	rcall	.+1924   	; 0x92e <__stack+0x2f>
 1aa:	ac 62       	ori	r26, 0x2C	; 44
 1ac:	91 95       	neg	r25
 1ae:	e4 79       	andi	r30, 0x94	; 148
 1b0:	e7 c8       	rjmp	.-3634   	; 0xfffff380 <__eeprom_end+0xff7ef380>
 1b2:	37 6d       	ori	r19, 0xD7	; 215
 1b4:	8d d5       	rcall	.+2842   	; 0xcd0 <__stack+0x3d1>
 1b6:	4e a9       	ldd	r20, Y+54	; 0x36
 1b8:	6c 56       	subi	r22, 0x6C	; 108
 1ba:	f4 ea       	ldi	r31, 0xA4	; 164
 1bc:	65 7a       	andi	r22, 0xA5	; 165
 1be:	ae 08       	sbc	r10, r14
 1c0:	ba 78       	andi	r27, 0x8A	; 138
 1c2:	25 2e       	mov	r2, r21
 1c4:	1c a6       	std	Y+44, r1	; 0x2c
 1c6:	b4 c6       	rjmp	.+3432   	; 0xf30 <__stack+0x631>
 1c8:	e8 dd       	rcall	.-1072   	; 0xfffffd9a <__eeprom_end+0xff7efd9a>
 1ca:	74 1f       	adc	r23, r20
 1cc:	4b bd       	out	0x2b, r20	; 43
 1ce:	8b 8a       	std	Y+19, r8	; 0x13
 1d0:	70 3e       	cpi	r23, 0xE0	; 224
 1d2:	b5 66       	ori	r27, 0x65	; 101
 1d4:	48 03       	fmul	r20, r16
 1d6:	f6 0e       	add	r15, r22
 1d8:	61 35       	cpi	r22, 0x51	; 81
 1da:	57 b9       	out	0x07, r21	; 7
 1dc:	86 c1       	rjmp	.+780    	; 0x4ea <_etext+0x44>
 1de:	1d 9e       	mul	r1, r29
 1e0:	e1 f8       	bld	r14, 1
 1e2:	98 11       	cpse	r25, r8
 1e4:	69 d9       	rcall	.-3374   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
 1e6:	8e 94 9b 1e 	call	0x203d36	; 0x203d36 <__TEXT_REGION_LENGTH__+0x1e3d36>
 1ea:	87 e9       	ldi	r24, 0x97	; 151
 1ec:	ce 55       	subi	r28, 0x5E	; 94
 1ee:	28 df       	rcall	.-432    	; 0x40 <__SREG__+0x1>
 1f0:	8c a1       	ldd	r24, Y+36	; 0x24
 1f2:	89 0d       	add	r24, r9
 1f4:	bf e6       	ldi	r27, 0x6F	; 111
 1f6:	42 68       	ori	r20, 0x82	; 130
 1f8:	41 99       	sbic	0x08, 1	; 8
 1fa:	2d 0f       	add	r18, r29
 1fc:	b0 54       	subi	r27, 0x40	; 64
 1fe:	bb 16       	cp	r11, r27

00000200 <aes256_enc_origin>:
P = 0
xREDUCER = 25

.global aes256_enc_origin
aes256_enc_origin:
	ldi r20, 14
 200:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core_origin
 202:	03 c0       	rjmp	.+6      	; 0x20a <aes_encrypt_core_origin>

00000204 <aes192_enc_origin>:

.global aes192_enc_origin
aes192_enc_origin:
	ldi r20, 12
 204:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core_origin
 206:	01 c0       	rjmp	.+2      	; 0x20a <aes_encrypt_core_origin>

00000208 <aes128_enc_origin>:

.global aes128_enc_origin
aes128_enc_origin:
	ldi r20, 10
 208:	4a e0       	ldi	r20, 0x0A	; 10

0000020a <aes_encrypt_core_origin>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_encrypt_core_origin
aes_encrypt_core_origin:
	push_range 2, 17
 20a:	2f 92       	push	r2
 20c:	3f 92       	push	r3
 20e:	4f 92       	push	r4
 210:	5f 92       	push	r5
 212:	6f 92       	push	r6
 214:	7f 92       	push	r7
 216:	8f 92       	push	r8
 218:	9f 92       	push	r9
 21a:	af 92       	push	r10
 21c:	bf 92       	push	r11
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
	push r28
 22a:	cf 93       	push	r28
	push r29
 22c:	df 93       	push	r29
	push r24
 22e:	8f 93       	push	r24
	push r25
 230:	9f 93       	push	r25
	movw r26, r22
 232:	db 01       	movw	r26, r22
	movw r30, r24
 234:	fc 01       	movw	r30, r24
	mov  CTR, r20
 236:	84 2f       	mov	r24, r20
	clt
 238:	e8 94       	clt
	
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld ST\row\col, Z+
		.endr
	.endr
 23a:	81 90       	ld	r8, Z+
 23c:	91 90       	ld	r9, Z+
 23e:	a1 90       	ld	r10, Z+
 240:	b1 90       	ld	r11, Z+
 242:	c1 90       	ld	r12, Z+
 244:	d1 90       	ld	r13, Z+
 246:	e1 90       	ld	r14, Z+
 248:	f1 90       	ld	r15, Z+
 24a:	01 91       	ld	r16, Z+
 24c:	11 91       	ld	r17, Z+
 24e:	21 91       	ld	r18, Z+
 250:	31 91       	ld	r19, Z+
 252:	41 91       	ld	r20, Z+
 254:	51 91       	ld	r21, Z+
 256:	61 91       	ld	r22, Z+
 258:	71 91       	ld	r23, Z+
	
	ldi xREDUCER, 0x1b /* load reducer */
 25a:	9b e1       	ldi	r25, 0x1B	; 27
	ldi r31, hi8(aes_sbox)
 25c:	f1 e0       	ldi	r31, 0x01	; 1
	.irp row, 0, 1, 2, 3
		.irp col, 0, 1, 2, 3
			ld r0, X+
			eor ST\row\col, r0
		.endr
	.endr
 25e:	0d 90       	ld	r0, X+
 260:	80 24       	eor	r8, r0
 262:	0d 90       	ld	r0, X+
 264:	90 24       	eor	r9, r0
 266:	0d 90       	ld	r0, X+
 268:	a0 24       	eor	r10, r0
 26a:	0d 90       	ld	r0, X+
 26c:	b0 24       	eor	r11, r0
 26e:	0d 90       	ld	r0, X+
 270:	c0 24       	eor	r12, r0
 272:	0d 90       	ld	r0, X+
 274:	d0 24       	eor	r13, r0
 276:	0d 90       	ld	r0, X+
 278:	e0 24       	eor	r14, r0
 27a:	0d 90       	ld	r0, X+
 27c:	f0 24       	eor	r15, r0
 27e:	0d 90       	ld	r0, X+
 280:	00 25       	eor	r16, r0
 282:	0d 90       	ld	r0, X+
 284:	10 25       	eor	r17, r0
 286:	0d 90       	ld	r0, X+
 288:	20 25       	eor	r18, r0
 28a:	0d 90       	ld	r0, X+
 28c:	30 25       	eor	r19, r0
 28e:	0d 90       	ld	r0, X+
 290:	40 25       	eor	r20, r0
 292:	0d 90       	ld	r0, X+
 294:	50 25       	eor	r21, r0
 296:	0d 90       	ld	r0, X+
 298:	60 25       	eor	r22, r0
 29a:	0d 90       	ld	r0, X+
 29c:	70 25       	eor	r23, r0
	
	brtc 2f
 29e:	2e f5       	brtc	.+74     	; 0x2ea <exit+0x4a>

000002a0 <exit>:
exit:
	pop r31
 2a0:	ff 91       	pop	r31
	pop r30
 2a2:	ef 91       	pop	r30
	.irp row, 0, 1, 2, 3
			.irp col, 0, 1, 2, 3
			st Z+, ST\row\col
		.endr
	.endr
 2a4:	81 92       	st	Z+, r8
 2a6:	91 92       	st	Z+, r9
 2a8:	a1 92       	st	Z+, r10
 2aa:	b1 92       	st	Z+, r11
 2ac:	c1 92       	st	Z+, r12
 2ae:	d1 92       	st	Z+, r13
 2b0:	e1 92       	st	Z+, r14
 2b2:	f1 92       	st	Z+, r15
 2b4:	01 93       	st	Z+, r16
 2b6:	11 93       	st	Z+, r17
 2b8:	21 93       	st	Z+, r18
 2ba:	31 93       	st	Z+, r19
 2bc:	41 93       	st	Z+, r20
 2be:	51 93       	st	Z+, r21
 2c0:	61 93       	st	Z+, r22
 2c2:	71 93       	st	Z+, r23
	pop r29
 2c4:	df 91       	pop	r29
	pop r28
 2c6:	cf 91       	pop	r28
	pop_range 2, 17
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	bf 90       	pop	r11
 2d6:	af 90       	pop	r10
 2d8:	9f 90       	pop	r9
 2da:	8f 90       	pop	r8
 2dc:	7f 90       	pop	r7
 2de:	6f 90       	pop	r6
 2e0:	5f 90       	pop	r5
 2e2:	4f 90       	pop	r4
 2e4:	3f 90       	pop	r3
 2e6:	2f 90       	pop	r2
	ret
 2e8:	08 95       	ret

2:	dec CTR
 2ea:	8a 95       	dec	r24
	brne 3f
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <exit+0x50>
	set
 2ee:	68 94       	set
3:

	/* encryption loop */ 

	/* SBOX substitution and shifting */
	mov r30, ST00
 2f0:	e8 2d       	mov	r30, r8
	lpm ST00, Z
 2f2:	84 90       	lpm	r8, Z
	mov r30, ST10
 2f4:	ec 2d       	mov	r30, r12
	lpm ST10, Z
 2f6:	c4 90       	lpm	r12, Z
	mov r30, ST20
 2f8:	e0 2f       	mov	r30, r16
	lpm ST20, Z
 2fa:	04 91       	lpm	r16, Z
	mov r30, ST30
 2fc:	e4 2f       	mov	r30, r20
	lpm ST30, Z
 2fe:	44 91       	lpm	r20, Z

	mov r30, ST01
 300:	e9 2d       	mov	r30, r9
	lpm T0, Z
 302:	24 90       	lpm	r2, Z
	mov r30, ST11
 304:	ed 2d       	mov	r30, r13
	lpm ST01, Z
 306:	94 90       	lpm	r9, Z
	mov r30, ST21
 308:	e1 2f       	mov	r30, r17
	lpm ST11, Z
 30a:	d4 90       	lpm	r13, Z
	mov r30, ST31
 30c:	e5 2f       	mov	r30, r21
	lpm ST21, Z
 30e:	14 91       	lpm	r17, Z
	mov ST31, T0
 310:	52 2d       	mov	r21, r2

	mov r30, ST02
 312:	ea 2d       	mov	r30, r10
	lpm T0, Z
 314:	24 90       	lpm	r2, Z
	mov r30, ST12
 316:	ee 2d       	mov	r30, r14
	lpm T1, Z
 318:	34 90       	lpm	r3, Z
	mov r30, ST22
 31a:	e2 2f       	mov	r30, r18
	lpm ST02, Z
 31c:	a4 90       	lpm	r10, Z
	mov r30, ST32
 31e:	e6 2f       	mov	r30, r22
	lpm ST12, Z
 320:	e4 90       	lpm	r14, Z
	mov ST22, T0
 322:	22 2d       	mov	r18, r2
	mov ST32, T1
 324:	63 2d       	mov	r22, r3

	mov r30, ST03
 326:	eb 2d       	mov	r30, r11
	lpm T0, Z
 328:	24 90       	lpm	r2, Z
	mov r30, ST33
 32a:	e7 2f       	mov	r30, r23
	lpm ST03, Z
 32c:	b4 90       	lpm	r11, Z
	mov r30, ST23
 32e:	e3 2f       	mov	r30, r19
	lpm ST33, Z
 330:	74 91       	lpm	r23, Z
	mov r30, ST13
 332:	ef 2d       	mov	r30, r15
	lpm ST23, Z
 334:	34 91       	lpm	r19, Z
	mov ST13, T0
 336:	f2 2c       	mov	r15, r2
		
	/* mixcols (or rows in our case) */
	brtc 2f
 338:	0e f4       	brtc	.+2      	; 0x33c <exit+0x9c>
	rjmp 1b
 33a:	91 cf       	rjmp	.-222    	; 0x25e <aes_encrypt_core_origin+0x54>
	brcc 3f
	eor T0, xREDUCER
3:	eor T0, r0
	eor ST\row\()3, T0

.endr
 33c:	0a 2c       	mov	r0, r10
 33e:	0b 24       	eor	r0, r11
 340:	40 2c       	mov	r4, r0
 342:	28 2c       	mov	r2, r8
 344:	89 24       	eor	r8, r9
 346:	08 24       	eor	r0, r8
 348:	88 0c       	add	r8, r8
 34a:	08 f4       	brcc	.+2      	; 0x34e <exit+0xae>
 34c:	89 26       	eor	r8, r25
 34e:	80 24       	eor	r8, r0
 350:	82 24       	eor	r8, r2
 352:	39 2c       	mov	r3, r9
 354:	3a 24       	eor	r3, r10
 356:	33 0c       	add	r3, r3
 358:	08 f4       	brcc	.+2      	; 0x35c <exit+0xbc>
 35a:	39 26       	eor	r3, r25
 35c:	30 24       	eor	r3, r0
 35e:	93 24       	eor	r9, r3
 360:	44 0c       	add	r4, r4
 362:	08 f4       	brcc	.+2      	; 0x366 <exit+0xc6>
 364:	49 26       	eor	r4, r25
 366:	40 24       	eor	r4, r0
 368:	a4 24       	eor	r10, r4
 36a:	2b 24       	eor	r2, r11
 36c:	22 0c       	add	r2, r2
 36e:	08 f4       	brcc	.+2      	; 0x372 <exit+0xd2>
 370:	29 26       	eor	r2, r25
 372:	20 24       	eor	r2, r0
 374:	b2 24       	eor	r11, r2
 376:	0e 2c       	mov	r0, r14
 378:	0f 24       	eor	r0, r15
 37a:	40 2c       	mov	r4, r0
 37c:	2c 2c       	mov	r2, r12
 37e:	cd 24       	eor	r12, r13
 380:	0c 24       	eor	r0, r12
 382:	cc 0c       	add	r12, r12
 384:	08 f4       	brcc	.+2      	; 0x388 <exit+0xe8>
 386:	c9 26       	eor	r12, r25
 388:	c0 24       	eor	r12, r0
 38a:	c2 24       	eor	r12, r2
 38c:	3d 2c       	mov	r3, r13
 38e:	3e 24       	eor	r3, r14
 390:	33 0c       	add	r3, r3
 392:	08 f4       	brcc	.+2      	; 0x396 <exit+0xf6>
 394:	39 26       	eor	r3, r25
 396:	30 24       	eor	r3, r0
 398:	d3 24       	eor	r13, r3
 39a:	44 0c       	add	r4, r4
 39c:	08 f4       	brcc	.+2      	; 0x3a0 <exit+0x100>
 39e:	49 26       	eor	r4, r25
 3a0:	40 24       	eor	r4, r0
 3a2:	e4 24       	eor	r14, r4
 3a4:	2f 24       	eor	r2, r15
 3a6:	22 0c       	add	r2, r2
 3a8:	08 f4       	brcc	.+2      	; 0x3ac <exit+0x10c>
 3aa:	29 26       	eor	r2, r25
 3ac:	20 24       	eor	r2, r0
 3ae:	f2 24       	eor	r15, r2
 3b0:	02 2e       	mov	r0, r18
 3b2:	03 26       	eor	r0, r19
 3b4:	40 2c       	mov	r4, r0
 3b6:	20 2e       	mov	r2, r16
 3b8:	01 27       	eor	r16, r17
 3ba:	00 26       	eor	r0, r16
 3bc:	00 0f       	add	r16, r16
 3be:	08 f4       	brcc	.+2      	; 0x3c2 <exit+0x122>
 3c0:	09 27       	eor	r16, r25
 3c2:	00 25       	eor	r16, r0
 3c4:	02 25       	eor	r16, r2
 3c6:	31 2e       	mov	r3, r17
 3c8:	32 26       	eor	r3, r18
 3ca:	33 0c       	add	r3, r3
 3cc:	08 f4       	brcc	.+2      	; 0x3d0 <exit+0x130>
 3ce:	39 26       	eor	r3, r25
 3d0:	30 24       	eor	r3, r0
 3d2:	13 25       	eor	r17, r3
 3d4:	44 0c       	add	r4, r4
 3d6:	08 f4       	brcc	.+2      	; 0x3da <exit+0x13a>
 3d8:	49 26       	eor	r4, r25
 3da:	40 24       	eor	r4, r0
 3dc:	24 25       	eor	r18, r4
 3de:	23 26       	eor	r2, r19
 3e0:	22 0c       	add	r2, r2
 3e2:	08 f4       	brcc	.+2      	; 0x3e6 <exit+0x146>
 3e4:	29 26       	eor	r2, r25
 3e6:	20 24       	eor	r2, r0
 3e8:	32 25       	eor	r19, r2
 3ea:	06 2e       	mov	r0, r22
 3ec:	07 26       	eor	r0, r23
 3ee:	40 2c       	mov	r4, r0
 3f0:	24 2e       	mov	r2, r20
 3f2:	45 27       	eor	r20, r21
 3f4:	04 26       	eor	r0, r20
 3f6:	44 0f       	add	r20, r20
 3f8:	08 f4       	brcc	.+2      	; 0x3fc <exit+0x15c>
 3fa:	49 27       	eor	r20, r25
 3fc:	40 25       	eor	r20, r0
 3fe:	42 25       	eor	r20, r2
 400:	35 2e       	mov	r3, r21
 402:	36 26       	eor	r3, r22
 404:	33 0c       	add	r3, r3
 406:	08 f4       	brcc	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	39 26       	eor	r3, r25
 40a:	30 24       	eor	r3, r0
 40c:	53 25       	eor	r21, r3
 40e:	44 0c       	add	r4, r4
 410:	08 f4       	brcc	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	49 26       	eor	r4, r25
 414:	40 24       	eor	r4, r0
 416:	64 25       	eor	r22, r4
 418:	27 26       	eor	r2, r23
 41a:	22 0c       	add	r2, r2
 41c:	08 f4       	brcc	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	29 26       	eor	r2, r25
 420:	20 24       	eor	r2, r0
 422:	72 25       	eor	r23, r2
	/* mix colums (rows) done */

	/* add key*/
 424:	1c cf       	rjmp	.-456    	; 0x25e <aes_encrypt_core_origin+0x54>

00000426 <main>:
void aes192_enc_nobr(void *buffer, aes128_ctx_t *ctx);
void aes256_enc_nobr(void *buffer, aes128_ctx_t *ctx);


int main(void)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	c0 5e       	subi	r28, 0xE0	; 224
 430:	d1 09       	sbc	r29, r1
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */

	u8 key[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
	u8 IV[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
 43c:	fe 01       	movw	r30, r28
 43e:	ef 52       	subi	r30, 0x2F	; 47
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	80 e1       	ldi	r24, 0x10	; 16
 444:	df 01       	movw	r26, r30
 446:	1d 92       	st	X+, r1
 448:	8a 95       	dec	r24
 44a:	e9 f7       	brne	.-6      	; 0x446 <main+0x20>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	81 83       	std	Z+1, r24	; 0x01
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	82 83       	std	Z+2, r24	; 0x02
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	83 83       	std	Z+3, r24	; 0x03
 458:	84 e0       	ldi	r24, 0x04	; 4
 45a:	84 83       	std	Z+4, r24	; 0x04
 45c:	85 e0       	ldi	r24, 0x05	; 5
 45e:	85 83       	std	Z+5, r24	; 0x05
 460:	86 e0       	ldi	r24, 0x06	; 6
 462:	86 83       	std	Z+6, r24	; 0x06
 464:	87 e0       	ldi	r24, 0x07	; 7
 466:	87 83       	std	Z+7, r24	; 0x07
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	80 87       	std	Z+8, r24	; 0x08
 46c:	89 e0       	ldi	r24, 0x09	; 9
 46e:	81 87       	std	Z+9, r24	; 0x09
 470:	8a e0       	ldi	r24, 0x0A	; 10
 472:	82 87       	std	Z+10, r24	; 0x0a
 474:	8b e0       	ldi	r24, 0x0B	; 11
 476:	83 87       	std	Z+11, r24	; 0x0b
 478:	8c e0       	ldi	r24, 0x0C	; 12
 47a:	84 87       	std	Z+12, r24	; 0x0c
 47c:	8d e0       	ldi	r24, 0x0D	; 13
 47e:	85 87       	std	Z+13, r24	; 0x0d
	
	aes192_ctx_t aes_test;
	//aes192_init(key, &aes_test);
	//aes192_enc(IV2,&aes_test);
	//aes192_enc_nobr(IV,&aes_test);
	aes192_enc_origin(IV,&aes_test);
 480:	be 01       	movw	r22, r28
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	cf 01       	movw	r24, r30
 488:	bd de       	rcall	.-646    	; 0x204 <aes192_enc_origin>
	//aes256_enc(IV2,&aes_test);
	//aes256_enc_nobr(IV,&aes_test);
	//aes256_enc_origin(IV,&aes_test);

	
}
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	c0 52       	subi	r28, 0x20	; 32
 490:	df 4f       	sbci	r29, 0xFF	; 255
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
